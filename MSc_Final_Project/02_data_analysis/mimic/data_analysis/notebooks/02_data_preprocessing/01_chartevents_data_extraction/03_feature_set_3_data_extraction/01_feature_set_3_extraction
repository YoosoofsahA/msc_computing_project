{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyMk+wA3agOm9WttX7AyZt/u"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Time series data extraction for feature set 3**\n","\n","Feature set 2 is defined as the features that are not popular in literature but clinically available according to WAVE as a proxy.\n","\n","As with feature set 1, for all patients in the derived set, time series data for each of these features will be extracted from the chart events table.\n","\n","The data will then be observed, cleaned and pre-processed as required to train an LSTM model.\n","\n","We will collect data for both feature set 1, 2 and 3 so we can train the models with a larger number of features"],"metadata":{"id":"fZGf3KepDREn"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from datetime import timedelta"],"metadata":{"id":"8uupVr9eEyrv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JIhu8MHUE96u","executionInfo":{"status":"ok","timestamp":1722784648095,"user_tz":-60,"elapsed":14684,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"76ea889f-2b91-498f-b31f-3827377e99d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load all patients\n","patient_file = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/03_annotated_set/annotation_v03.parquet'\n","\n","patient_df = pd.read_parquet(patient_file)\n","patient_df.shape[0]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hgLA37kHDQqg","executionInfo":{"status":"ok","timestamp":1722784659356,"user_tz":-60,"elapsed":1533,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"c852b4ad-df27-4c76-8422-eab631f5d6e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5970"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R40g5_kwDKe1"},"outputs":[],"source":["# Load variables for extraction\n","chartevents_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/mimic-iv-2.2-raw-data/icu/chartevents.csv'"]},{"cell_type":"code","source":["time_window_hours = timedelta(hours=6)"],"metadata":{"id":"dVRwU-PLFWi8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# State the features to be extracted\n","feature_set_3_dynamic = [\n","    220210, 220277, 228640, 220235, 223830, 220224, 220228, 223835, 224685, 224686, 224695, 224687,\n","    224696, 223849, 224419, 220045, 223901, 220739, 220052, 223761, 228096, 220050, 220051, 220546,\n","    220615, 227457, 220645, 227442, 225668, 220621, 225690, 220545, 225667, 224697, 220227, 220235,\n","    226062, 220274, 224828, 225674, 226063, 224743, 224842, 220245, 224727, 229661\n","]\n","len(feature_set_3_dynamic)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tt1JShDw-YdK","executionInfo":{"status":"ok","timestamp":1722784797681,"user_tz":-60,"elapsed":231,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"881a96ca-d852-4444-f6a5-0c165b6cd94b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["46"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Make sure all itemids are unique\n","feature_set_3_dynamic = list(set(feature_set_3_dynamic))\n","len(feature_set_3_dynamic)"],"metadata":{"id":"wiu41zb-U5we","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1722784805722,"user_tz":-60,"elapsed":383,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"c3106900-d42c-407f-a764-e7036b4cbc49"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Function copied from feature set 1 extraction\n","def process_chunk_incl_null(chunk, patient_dict, itemid_set, time_window):\n","    # Filter the columns\n","    chunk = chunk[['subject_id', 'charttime', 'itemid', 'valuenum']].copy()\n","\n","    # Drop rows where only itemid is null and NOT valuenum\n","    chunk = chunk.dropna(subset=['itemid'])\n","\n","    # Convert subject_id to nullable integer type if necessary\n","    chunk.loc[:, 'subject_id'] = chunk['subject_id'].astype('Int64')\n","\n","    # Filter by subject_id\n","    chunk = chunk[chunk['subject_id'].isin(patient_dict.keys())]\n","\n","    # Filter by itemid\n","    chunk = chunk[chunk['itemid'].isin(itemid_set)]\n","\n","    # Apply the time window filter using the patient_dict\n","    filtered_rows = []\n","    for idx, row in chunk.iterrows():\n","        extubation_time = patient_dict[row['subject_id']]['extubation_starttime']\n","        if (row['charttime'] >= extubation_time - time_window) and (row['charttime'] <= extubation_time):\n","            filtered_rows.append(row)\n","\n","    filtered_df = pd.DataFrame(filtered_rows)\n","    if not filtered_df.empty:\n","        filtered_df['extubation_starttime'] = filtered_df['subject_id'].map(lambda x: patient_dict[x]['extubation_starttime'])\n","        filtered_df['extubation_failure'] = filtered_df['subject_id'].map(lambda x: patient_dict[x]['extubation_failure'])\n","\n","    return filtered_df"],"metadata":{"id":"j9PwNnJVFdPm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def extract_patient_data_2_incl_null(patient_df, chartevents_file_path, itemids, time_window):\n","    # Initialize a list to hold the results\n","    results = []\n","\n","    # Define the chunk size\n","    chunksize = 100000\n","\n","    # Convert itemids to a set for faster lookup\n","    itemid_set = set(itemids)\n","\n","    # Convert patient_df to a dictionary for fast lookups\n","    patient_dict = patient_df.set_index('subject_id').to_dict('index')\n","\n","    # Track the number of processed rows\n","    processed_rows = 0\n","\n","    # Read and process the file in chunks\n","    for chunk in pd.read_csv(chartevents_file_path, parse_dates=['charttime'], chunksize=chunksize):\n","\n","      # Process each chunk and filter the data\n","      filtered_df = process_chunk_incl_null(chunk, patient_dict, itemid_set, time_window)\n","\n","      # Append the filtered data to the results list\n","      results.append(filtered_df)\n","\n","      # Update the processed rows count\n","      processed_rows += len(chunk)\n","\n","      # Print the progress every 10,000,000 rows\n","      if processed_rows % 10000000 == 0:\n","          print(f\"Processed {processed_rows} rows\")\n","\n","\n","    # Concatenate all the results\n","    result_df = pd.concat(results, ignore_index=True)\n","\n","    # Check if result_df is empty and handle it accordingly\n","    if result_df.empty:\n","        print(\"Warning: No data found for the given criteria.\")\n","        return pd.DataFrame(), pd.DataFrame() # Return empty DataFrames\n","\n","\n","    # Extract the data and labels\n","    data = result_df[['subject_id', 'charttime', 'itemid', 'valuenum']]\n","    labels = result_df[['subject_id','extubation_failure']]\n","\n","    return data, labels"],"metadata":{"id":"so0sginsFofk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Â Extract time series data for feature set 1 and 2 and save to drive\n","full_data_set_3, full_labels_3 = extract_patient_data_2_incl_null(patient_df, chartevents_path, feature_set_3_dynamic, time_window_hours)\n","\n","full_data_set_3.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/05_time_series_data_extraction/feature_set_3_results/full_data_3.parquet')\n","full_labels_3.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/05_time_series_data_extraction/feature_set_3_results/full_labels_3.parquet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NCWv-AZIFrk8","executionInfo":{"status":"ok","timestamp":1722786395211,"user_tz":-60,"elapsed":1412420,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"2a3a7f94-0522-4d0c-9256-373103e32b0c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Processed 10000000 rows\n","Processed 20000000 rows\n","Processed 30000000 rows\n","Processed 40000000 rows\n","Processed 50000000 rows\n","Processed 60000000 rows\n","Processed 70000000 rows\n","Processed 80000000 rows\n","Processed 90000000 rows\n","Processed 100000000 rows\n","Processed 110000000 rows\n","Processed 120000000 rows\n","Processed 130000000 rows\n","Processed 140000000 rows\n","Processed 150000000 rows\n","Processed 160000000 rows\n","Processed 170000000 rows\n","Processed 180000000 rows\n","Processed 190000000 rows\n","Processed 200000000 rows\n","Processed 210000000 rows\n","Processed 220000000 rows\n","Processed 230000000 rows\n","Processed 240000000 rows\n"]}]},{"cell_type":"code","source":["# Count the number of unqiue patients in the extracted data\n","full_data_set_3['subject_id'].nunique()\n","print('Number of unique patients in feature set 2: ', full_data_set_3['subject_id'].nunique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4udcmYcRtV8","executionInfo":{"status":"ok","timestamp":1722786610241,"user_tz":-60,"elapsed":238,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"86597cb8-1414-4120-8d8b-fc99660c560c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of unique patients in feature set 2:  4701\n"]}]},{"cell_type":"code","source":["# Count the number of itemids present\n","full_data_set_3['itemid'].nunique()\n","print('Number of unique itemids in feature set 3: ', full_data_set_3['itemid'].nunique())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8hstZFkxSFz0","executionInfo":{"status":"ok","timestamp":1722786620938,"user_tz":-60,"elapsed":260,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a54fadda-aedd-4625-853e-73692a4a49ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of unique itemids in feature set 3:  43\n"]}]},{"cell_type":"code","source":["feature_set_3_dynamic"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GW3G2mwvSf1U","executionInfo":{"status":"ok","timestamp":1722786645091,"user_tz":-60,"elapsed":262,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"35a69c32-f527-4927-f469-4672bf45880f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[228096,\n"," 227457,\n"," 220546,\n"," 220545,\n"," 225668,\n"," 225667,\n"," 225674,\n"," 220045,\n"," 226062,\n"," 226063,\n"," 223761,\n"," 220050,\n"," 220051,\n"," 220052,\n"," 225690,\n"," 223901,\n"," 229661,\n"," 228640,\n"," 224419,\n"," 224685,\n"," 224686,\n"," 224687,\n"," 220210,\n"," 224695,\n"," 224696,\n"," 224697,\n"," 224828,\n"," 220224,\n"," 220739,\n"," 220228,\n"," 220227,\n"," 220615,\n"," 224842,\n"," 220235,\n"," 220621,\n"," 220245,\n"," 223830,\n"," 224727,\n"," 223835,\n"," 220645,\n"," 224743,\n"," 223849,\n"," 227442,\n"," 220274,\n"," 220277]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["list_3 = list(full_data_set_3['itemid'].unique().astype('int64'))\n","list_3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aJ23uSXhSp-r","executionInfo":{"status":"ok","timestamp":1722786658145,"user_tz":-60,"elapsed":3,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"810e555b-46e2-47e2-fc90-810e74ee9a2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[223835,\n"," 224685,\n"," 224686,\n"," 224687,\n"," 224695,\n"," 224697,\n"," 228640,\n"," 220045,\n"," 220210,\n"," 220739,\n"," 223901,\n"," 220277,\n"," 228096,\n"," 223849,\n"," 220050,\n"," 220051,\n"," 220052,\n"," 223761,\n"," 220545,\n"," 220645,\n"," 227442,\n"," 220224,\n"," 220235,\n"," 223830,\n"," 224828,\n"," 220227,\n"," 225667,\n"," 225668,\n"," 220228,\n"," 220546,\n"," 220615,\n"," 220621,\n"," 227457,\n"," 220245,\n"," 229661,\n"," 224696,\n"," 225674,\n"," 220274,\n"," 226062,\n"," 226063,\n"," 224842,\n"," 225690,\n"," 224419]"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Count occurrences in both lists\n","list1_count = {num: feature_set_3_dynamic.count(num) for num in set(feature_set_3_dynamic)}\n","list2_count = {num: list_3.count(num) for num in set(list_3)}"],"metadata":{"id":"RyAyWQmGSXeF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Find numbers present in the first list but not in the second\n","difference_manual = []\n","for num in list1_count:\n","    if num not in list2_count or list1_count[num] > list2_count[num]:\n","        difference_manual.extend([num] * (list1_count[num] - list2_count.get(num, 0)))\n","\n","# Convert to sorted list\n","difference_manual_sorted = sorted(difference_manual)\n","print(difference_manual_sorted)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0bTWdRISUHgV","executionInfo":{"status":"ok","timestamp":1722786682214,"user_tz":-60,"elapsed":241,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"779dd808-e2c6-424c-9e3b-424c3f08ea21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[224727, 224743]\n"]}]},{"cell_type":"code","source":["len(difference_manual_sorted)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g2nhjzNnUKhk","executionInfo":{"status":"ok","timestamp":1722786692091,"user_tz":-60,"elapsed":261,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"563f5fb9-271d-4c15-f348-597fd05b2298"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["There are 2 itemids for which no data has been collected.\n","\n","We can use the d_items file to identify these."],"metadata":{"id":"B5tJrHYLUOec"}},{"cell_type":"code","source":["# Load the d_items data frame\n","d_items_file = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/mimic-iv-2.2-raw-data/icu/d_items.csv'\n","d_items_df = pd.read_csv(d_items_file)\n","d_items_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":382},"id":"0F6t8bFiUMvU","executionInfo":{"status":"ok","timestamp":1722786694564,"user_tz":-60,"elapsed":703,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"9f573b10-fb52-46b0-866f-8e87a71d4fe7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   itemid                    label        abbreviation         linksto  \\\n","0  220001             Problem List        Problem List     chartevents   \n","1  220003       ICU Admission date  ICU Admission date  datetimeevents   \n","2  220045               Heart Rate                  HR     chartevents   \n","3  220046  Heart rate Alarm - High     HR Alarm - High     chartevents   \n","4  220047   Heart Rate Alarm - Low      HR Alarm - Low     chartevents   \n","\n","              category unitname     param_type  lownormalvalue  \\\n","0              General      NaN           Text             NaN   \n","1                  ADT      NaN  Date and time             NaN   \n","2  Routine Vital Signs      bpm        Numeric             NaN   \n","3               Alarms      bpm        Numeric             NaN   \n","4               Alarms      bpm        Numeric             NaN   \n","\n","   highnormalvalue  \n","0              NaN  \n","1              NaN  \n","2              NaN  \n","3              NaN  \n","4              NaN  "],"text/html":["\n","  <div id=\"df-5c543bc6-0773-4fb9-a75c-5e9da6445ede\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>itemid</th>\n","      <th>label</th>\n","      <th>abbreviation</th>\n","      <th>linksto</th>\n","      <th>category</th>\n","      <th>unitname</th>\n","      <th>param_type</th>\n","      <th>lownormalvalue</th>\n","      <th>highnormalvalue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>220001</td>\n","      <td>Problem List</td>\n","      <td>Problem List</td>\n","      <td>chartevents</td>\n","      <td>General</td>\n","      <td>NaN</td>\n","      <td>Text</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>220003</td>\n","      <td>ICU Admission date</td>\n","      <td>ICU Admission date</td>\n","      <td>datetimeevents</td>\n","      <td>ADT</td>\n","      <td>NaN</td>\n","      <td>Date and time</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>220045</td>\n","      <td>Heart Rate</td>\n","      <td>HR</td>\n","      <td>chartevents</td>\n","      <td>Routine Vital Signs</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>220046</td>\n","      <td>Heart rate Alarm - High</td>\n","      <td>HR Alarm - High</td>\n","      <td>chartevents</td>\n","      <td>Alarms</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>220047</td>\n","      <td>Heart Rate Alarm - Low</td>\n","      <td>HR Alarm - Low</td>\n","      <td>chartevents</td>\n","      <td>Alarms</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c543bc6-0773-4fb9-a75c-5e9da6445ede')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5c543bc6-0773-4fb9-a75c-5e9da6445ede button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5c543bc6-0773-4fb9-a75c-5e9da6445ede');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f32e517a-d98e-452d-ab60-243a9923f516\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f32e517a-d98e-452d-ab60-243a9923f516')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f32e517a-d98e-452d-ab60-243a9923f516 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"d_items_df","summary":"{\n  \"name\": \"d_items_df\",\n  \"rows\": 4014,\n  \"fields\": [\n    {\n      \"column\": \"itemid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2467,\n        \"min\": 220001,\n        \"max\": 230085,\n        \"num_unique_values\": 4014,\n        \"samples\": [\n          229798,\n          227618,\n          228177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3888,\n        \"samples\": [\n          \"PNC-1 Bolus (mL)\",\n          \"Tunneling Present #9\",\n          \"Impaired Skin  - Dressing Status #6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3895,\n        \"samples\": [\n          \"Pain Assessment Method (BIS)\",\n          \"ZTrach Care\",\n          \"Intubation - Details\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"linksto\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"chartevents\",\n          \"datetimeevents\",\n          \"outputevents\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 81,\n        \"samples\": [\n          \"Skin - Assessment\",\n          \"General\",\n          \"Pain/Sedation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unitname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"bpm\",\n          \"Liters\",\n          \"mcg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Date and time\",\n          \"Processes\",\n          \"Text\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lownormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.35662273210929,\n        \"min\": -2.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          6.0,\n          90.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highnormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 253.0760071306539,\n        \"min\": 8.0,\n        \"max\": 750.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          750.0,\n          36.0,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Identify and print the label for the itemids that were missing\n","missing_labels = d_items_df[d_items_df['itemid'].isin(difference_manual_sorted)]['label'].unique()\n","\n","# Print the itemid next to its label\n","for label in missing_labels:\n","    print(f\"itemid: {label}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4MMan_nqUbMc","executionInfo":{"status":"ok","timestamp":1722786699157,"user_tz":-60,"elapsed":310,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"d3a2e203-76ff-45f3-c246-8304bddc8da7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["itemid: Resting Energy Expenditure\n","itemid: Vd/Vt Ratio\n"]}]},{"cell_type":"markdown","source":["The above two features were not present in the additional feature data."],"metadata":{"id":"9X46fLjEFw8F"}}]}