{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyNoRN5kCxdsA5ug2C8O4/DD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Feature set 1 dynamic data preprocessing**\n","\n","Given the poor performance of LSTM model training, we will re-create and review the data preprocessing step by step to ensure that there is no data leakage and that the correct protocol is being followed throughout."],"metadata":{"id":"ideWdoseXUsA"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k6kSPrBqXQAG","executionInfo":{"status":"ok","timestamp":1721916442147,"user_tz":-60,"elapsed":18587,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"29a529c5-0aa1-44f2-c373-f5caee0f2574"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"P_YCRj6pYLjs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Step 1: Load the time-series data**\n"],"metadata":{"id":"nc8jqne3YO1f"}},{"cell_type":"code","source":["# Load the time series data for feature set 1\n","data_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/06_extracted_data_analysis/01_feature_set_1_analysis/patient_f1_data_feature_labels.parquet'\n","patient_data_df = pd.read_parquet(data_path)\n","patient_data_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"XNK5kv55YT6p","executionInfo":{"status":"ok","timestamp":1721499747681,"user_tz":-60,"elapsed":5269,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"54077f23-febc-4936-ee0a-b5ec4debddf3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   subject_id  itemid  valuenum  time_to_extubation_mins  \\\n","0    10001884  223835      40.0                    160.0   \n","1    10001884  224685     284.0                    160.0   \n","2    10001884  224686     284.0                    160.0   \n","3    10001884  224687       6.1                    160.0   \n","4    10001884  224695      17.0                    160.0   \n","\n","   time_from_window_start                       label  \n","0                   200.0        Inspired O2 Fraction  \n","1                   200.0     Tidal Volume (observed)  \n","2                   200.0  Tidal Volume (spontaneous)  \n","3                   200.0               Minute Volume  \n","4                   200.0         Peak Insp. Pressure  "],"text/html":["\n","  <div id=\"df-38858ef2-c3b2-4030-8f96-185965826b16\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>itemid</th>\n","      <th>valuenum</th>\n","      <th>time_to_extubation_mins</th>\n","      <th>time_from_window_start</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10001884</td>\n","      <td>223835</td>\n","      <td>40.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Inspired O2 Fraction</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10001884</td>\n","      <td>224685</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (observed)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10001884</td>\n","      <td>224686</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (spontaneous)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10001884</td>\n","      <td>224687</td>\n","      <td>6.1</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Minute Volume</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10001884</td>\n","      <td>224695</td>\n","      <td>17.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Peak Insp. Pressure</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38858ef2-c3b2-4030-8f96-185965826b16')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-38858ef2-c3b2-4030-8f96-185965826b16 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-38858ef2-c3b2-4030-8f96-185965826b16');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b9c36e70-4765-4631-ad58-72dfc415e3a5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9c36e70-4765-4631-ad58-72dfc415e3a5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b9c36e70-4765-4631-ad58-72dfc415e3a5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"patient_data_df"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["patient_data_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7TpeKXOYaCQ","executionInfo":{"status":"ok","timestamp":1721499763289,"user_tz":-60,"elapsed":364,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"c593136b-ff8a-4da6-ff9c-94a741a7b065"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 116639 entries, 0 to 116638\n","Data columns (total 6 columns):\n"," #   Column                   Non-Null Count   Dtype  \n","---  ------                   --------------   -----  \n"," 0   subject_id               116639 non-null  int64  \n"," 1   itemid                   116639 non-null  int64  \n"," 2   valuenum                 116639 non-null  float64\n"," 3   time_to_extubation_mins  116639 non-null  float64\n"," 4   time_from_window_start   116639 non-null  float64\n"," 5   label                    116639 non-null  object \n","dtypes: float64(3), int64(2), object(1)\n","memory usage: 5.3+ MB\n"]}]},{"cell_type":"markdown","source":["### **Step 2: Remove low observed features**\n","\n","The observed frequency rate for each feature is important as features that are sparsely sampled do not lend themselves to building time series of a 6 hour resolution.\n","\n","As per the paper from Zeng et al. (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9513908/#CR8), features that were observed less than 0.1 times in the 6 hour peroid will be excluded. This was coroborrated with Dr Murali.\n","\n","Anything higher would likley restrict sufficient data coverage for meaningful analysis at this stage."],"metadata":{"id":"OVT74h0dYfxJ"}},{"cell_type":"code","source":["# Load the average sampling frequency previously caluclated\n","freq_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/06_extracted_data_analysis/01_feature_set_1_analysis/sampling_frequency.parquet'\n","freq_df = pd.read_parquet(freq_path)\n","freq_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"mOviy2_DYfEe","executionInfo":{"status":"ok","timestamp":1721499829223,"user_tz":-60,"elapsed":1279,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"9882ae3c-5516-4bc6-d8b6-307981456991"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        Feature  Average Sampling Frequency\n","0              Respiratory Rate                    6.614763\n","1   O2 saturation pulseoxymetry                    6.610508\n","2          Inspired O2 Fraction                    2.104446\n","3       Tidal Volume (observed)                    1.600298\n","4                 Minute Volume                    1.597532\n","5           Peak Insp. Pressure                    1.524144\n","6    Tidal Volume (spontaneous)                    1.367581\n","7               Ventilator Mode                    1.203999\n","8                 PH (Arterial)                    0.534567\n","9         Arterial CO2 Pressure                    0.524782\n","10         Arterial O2 pressure                    0.524782\n","11                   Hemoglobin                    0.247181\n","12                        EtCO2                    0.189109\n","13             Plateau Pressure                    0.159753\n","14         Negative Insp. Force                    0.008083"],"text/html":["\n","  <div id=\"df-151bce83-c3d9-4c80-a056-b6956c10279a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>Average Sampling Frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Respiratory Rate</td>\n","      <td>6.614763</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>6.610508</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>2.104446</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>1.600298</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Minute Volume</td>\n","      <td>1.597532</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>1.524144</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>1.367581</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ventilator Mode</td>\n","      <td>1.203999</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>PH (Arterial)</td>\n","      <td>0.534567</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>0.524782</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>0.524782</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>Hemoglobin</td>\n","      <td>0.247181</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>EtCO2</td>\n","      <td>0.189109</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>Plateau Pressure</td>\n","      <td>0.159753</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>Negative Insp. Force</td>\n","      <td>0.008083</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-151bce83-c3d9-4c80-a056-b6956c10279a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-151bce83-c3d9-4c80-a056-b6956c10279a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-151bce83-c3d9-4c80-a056-b6956c10279a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dd48b6b1-25ac-47de-89b6-3f17601792dd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd48b6b1-25ac-47de-89b6-3f17601792dd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dd48b6b1-25ac-47de-89b6-3f17601792dd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_19624715-30ed-4a19-850b-2f4d3392f028\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('freq_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_19624715-30ed-4a19-850b-2f4d3392f028 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('freq_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"freq_df","summary":"{\n  \"name\": \"freq_df\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Arterial CO2 Pressure\",\n          \"Hemoglobin\",\n          \"Respiratory Rate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average Sampling Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.113845052599657,\n        \"min\": 0.008083386513507764,\n        \"max\": 6.614762816422038,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.524781961284833,\n          0.1891087002765369,\n          6.614762816422038\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["**Threshold selection**\n","\n","The Zeng paper referenced earlier uses a threshold of 0.1 times in the 4 hour time period, which essentially translates to 1 observation every 40 hours.\n","\n","If this were scaled up to our 6 hour time window, this would be 0.15 observations every 6 hours.\n","\n","Clinical data often comes with irregular resampling due to the nature of patient monitoring and intervention. Features with very low sampling frequencies might not provide sufficient information for reliable predictions.\n","\n","Poorly observed features will essentially need completely synthetic data to be created to be fed into the model. If interpolation is based on sparse / non-existent data, this could lead to the model learning patterns that are not representative of the true underlying data distribution and impact the model's generalisability. The model can overfit to synthetic patterns.\n","\n","However, there is a balance that needs to be struck between data synthesis and the number of features. If the threshold is set too high, the model will have insufficient features to learn complex information.\n","\n","**Why Zeng's value is not relevant for our study**\n","\n","Zeng et al.'s Study:\n","- Focused on dynamic prediction over multiple 4-hour windows throughout the entire duration of invasive mechanical ventilation (IMV). This approach allows for the accumulation of a large number of data points, which can help mitigate the impact of features with low observation frequencies.\n","- The dynamic model continuously updates predictions, allowing it to handle intermittent missing data more effectively due to the longer observation period.\n","- They can afford to have a lower threshold (0.1 times per 4 hours) because the accumulation of data over many time windows can compensate for occasional sparsity.\n","- Interpolating and imputing data over a longer period can still provide a reliable trend due to the higher overall frequency of observations.\n","\n","This Study:\n","- Focused on a fixed 6-hour window before extubation. This single time window approach means we have fewer data points overall and less opportunity to average out the impact of missing or infrequent data points.\n","- The model relies on data from a single, critical 6-hour window. Thus, the data quality within this window is paramount, and having infrequent observations can significantly impact model performance\n","- A higher threshold is necessary to ensure that each feature has enough observations within the 6-hour window to be meaningful and reliable, given the limited number of data points.\n","- Interpolation within a single 6-hour window with sparse data can lead to unreliable and artificial data points, reducing the model's ability to make accurate predictions"],"metadata":{"id":"23R0pfxybJ08"}},{"cell_type":"markdown","source":["As such, to balance data sparsity and density, a threshold of 0.5 will be used.\n","\n","This threshold implies that each feature is recorded at least once every 12 hours.\n","\n","Ensures a level of consistency that each feature can highlight clinical changes. It reduces the over-reliance on interpolation of missing values. And aligns with the clinical critical time window of 6/12 hours.\n","\n","However, the drawback is there are still a number of instances where data will be heavily interpolated but this will be evaluated once models have been trained and will be a consideration of this study and future work."],"metadata":{"id":"eyjPMZCcdjOx"}},{"cell_type":"code","source":["threshold = 0.5"],"metadata":{"id":"MMarOMBPeNkY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Identify all features below the threshold\n","low_freq_features = freq_df[freq_df['Average Sampling Frequency'] < threshold]['Feature'].tolist()\n","low_freq_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"USyL2TgMeRYf","executionInfo":{"status":"ok","timestamp":1721501347825,"user_tz":-60,"elapsed":734,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"ef0abf1f-b603-4336-b73e-87df54210af5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Hemoglobin', 'EtCO2', 'Plateau Pressure', 'Negative Insp. Force']"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["These four features will be removed from the patient data"],"metadata":{"id":"YWDGc12_eizh"}},{"cell_type":"code","source":["# From the patient data remove all rows that correspond to the low frequency features\n","patient_data_filtered_df = patient_data_df[~patient_data_df['label'].isin(low_freq_features)]\n","patient_data_filtered_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"09oJop3qegif","executionInfo":{"status":"ok","timestamp":1721501436803,"user_tz":-60,"elapsed":416,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"f90f401a-be60-40bb-fcc9-4e79d3539b80"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   subject_id  itemid  valuenum  time_to_extubation_mins  \\\n","0    10001884  223835      40.0                    160.0   \n","1    10001884  224685     284.0                    160.0   \n","2    10001884  224686     284.0                    160.0   \n","3    10001884  224687       6.1                    160.0   \n","4    10001884  224695      17.0                    160.0   \n","\n","   time_from_window_start                       label  \n","0                   200.0        Inspired O2 Fraction  \n","1                   200.0     Tidal Volume (observed)  \n","2                   200.0  Tidal Volume (spontaneous)  \n","3                   200.0               Minute Volume  \n","4                   200.0         Peak Insp. Pressure  "],"text/html":["\n","  <div id=\"df-05385365-19d5-4255-9b8a-2cc594bebcfd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>itemid</th>\n","      <th>valuenum</th>\n","      <th>time_to_extubation_mins</th>\n","      <th>time_from_window_start</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10001884</td>\n","      <td>223835</td>\n","      <td>40.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Inspired O2 Fraction</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10001884</td>\n","      <td>224685</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (observed)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10001884</td>\n","      <td>224686</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (spontaneous)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10001884</td>\n","      <td>224687</td>\n","      <td>6.1</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Minute Volume</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10001884</td>\n","      <td>224695</td>\n","      <td>17.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Peak Insp. Pressure</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05385365-19d5-4255-9b8a-2cc594bebcfd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-05385365-19d5-4255-9b8a-2cc594bebcfd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-05385365-19d5-4255-9b8a-2cc594bebcfd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5384e0c5-d930-484c-8ea6-26e7af1adb3f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5384e0c5-d930-484c-8ea6-26e7af1adb3f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5384e0c5-d930-484c-8ea6-26e7af1adb3f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"patient_data_filtered_df"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Check that there are no entries of these features remaining\n","print(patient_data_filtered_df[patient_data_filtered_df['label'].isin(low_freq_features)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ok3W9jiWe2LR","executionInfo":{"status":"ok","timestamp":1721501464243,"user_tz":-60,"elapsed":936,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"8790dd26-835a-41d3-aedb-5ee642b4de95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Empty DataFrame\n","Columns: [subject_id, itemid, valuenum, time_to_extubation_mins, time_from_window_start, label]\n","Index: []\n"]}]},{"cell_type":"code","source":["# Save progress for now in the drive\n","patient_data_filtered_df.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/07_data_preprocessing/01_feature_set_1/preprocessing_v2/01_patient_f1_data_feature_labels_filtered.parquet')"],"metadata":{"id":"rjitsqwOfJ2E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Step 3: Split the data into train and test sets**\n","\n","Now we will split our patient population into train and test sets.\n","\n","For this study, the train / test split will be 80 / 20 - in keeping with analogous studies.\n","\n","We also need to ensure that data distribution is similar between the train and test sets to ensure the level of imputation and interpolation required on the train and test sets is comparable."],"metadata":{"id":"OOrWnHKPfbvL"}},{"cell_type":"markdown","source":["First we will attach the extubation failure label to the patient data"],"metadata":{"id":"J_dy5-Ujf5Ep"}},{"cell_type":"code","source":["annotations_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/03_annotated_set/annotation_v03.parquet'\n","annotations_df = pd.read_parquet(annotations_path)\n","\n","patient_data_filtered_df.loc[:, 'extubation_failure'] = patient_data_filtered_df['subject_id'].map(annotations_df.set_index('subject_id')['extubation_failure'])\n","patient_data_filtered_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"B0NTwZ-vf1OX","executionInfo":{"status":"ok","timestamp":1721501836796,"user_tz":-60,"elapsed":613,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"45976b48-6996-402f-83e3-9bcf89db332a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   subject_id  itemid  valuenum  time_to_extubation_mins  \\\n","0    10001884  223835      40.0                    160.0   \n","1    10001884  224685     284.0                    160.0   \n","2    10001884  224686     284.0                    160.0   \n","3    10001884  224687       6.1                    160.0   \n","4    10001884  224695      17.0                    160.0   \n","\n","   time_from_window_start                       label  extubation_failure  \n","0                   200.0        Inspired O2 Fraction                   1  \n","1                   200.0     Tidal Volume (observed)                   1  \n","2                   200.0  Tidal Volume (spontaneous)                   1  \n","3                   200.0               Minute Volume                   1  \n","4                   200.0         Peak Insp. Pressure                   1  "],"text/html":["\n","  <div id=\"df-5a4d4d5c-b272-4722-8b93-8fee8a6f9183\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>itemid</th>\n","      <th>valuenum</th>\n","      <th>time_to_extubation_mins</th>\n","      <th>time_from_window_start</th>\n","      <th>label</th>\n","      <th>extubation_failure</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10001884</td>\n","      <td>223835</td>\n","      <td>40.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Inspired O2 Fraction</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10001884</td>\n","      <td>224685</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (observed)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10001884</td>\n","      <td>224686</td>\n","      <td>284.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10001884</td>\n","      <td>224687</td>\n","      <td>6.1</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Minute Volume</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10001884</td>\n","      <td>224695</td>\n","      <td>17.0</td>\n","      <td>160.0</td>\n","      <td>200.0</td>\n","      <td>Peak Insp. Pressure</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a4d4d5c-b272-4722-8b93-8fee8a6f9183')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5a4d4d5c-b272-4722-8b93-8fee8a6f9183 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5a4d4d5c-b272-4722-8b93-8fee8a6f9183');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d4725743-cbc9-46de-8be1-ee43429b8dc5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4725743-cbc9-46de-8be1-ee43429b8dc5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d4725743-cbc9-46de-8be1-ee43429b8dc5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"patient_data_filtered_df"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Identify the unique patients\n","unique_patients = patient_data_filtered_df['subject_id'].unique()\n","unique_patients.shape[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OBHLUAqygYbK","executionInfo":{"status":"ok","timestamp":1721501870360,"user_tz":-60,"elapsed":838,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"738c74cb-b131-43cc-b9af-391b350b0a3f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4701"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split"],"metadata":{"id":"o_oUmlIKhPp7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We want to split the data 80/20 but also need to ensure that the amount of synthetic data that will be required is comparable between the train and test sets. Otherwise the model evaluation will not be completely valid i.e. if train data is mostly synthetic the model will learn from those patterns and not generalise to less synthetic patterns in the test set.\n","\n","i.e we need to stratify the train, test split"],"metadata":{"id":"8QCisuFbhSUk"}},{"cell_type":"markdown","source":["To do this, we will first calculate the proportion of synthetic data that will be required to reample the data to 30 min intervals i.e. target observation frequency of 13 in 6 hours."],"metadata":{"id":"sr2TavvViXxd"}},{"cell_type":"code","source":["target_frequency = 13"],"metadata":{"id":"31T0Pqonhmk5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def calculate_synthetic_data_proportion(df, patient_id_col, feature_col, target_frequency=13):\n","    synthetic_data_proportion = {}\n","    for patient_id in df[patient_id_col].unique():\n","        patient_data = df[df[patient_id_col] == patient_id]\n","        total_entries = len(patient_data)\n","        synthetic_entries = 0\n","        for feature in df[feature_col].unique():\n","            feature_data = patient_data[patient_data[feature_col] == feature]\n","            observed_count = len(feature_data)\n","            if observed_count < target_frequency:\n","                synthetic_entries += (target_frequency - observed_count)\n","        synthetic_data_proportion[patient_id] = synthetic_entries / total_entries\n","    return synthetic_data_proportion"],"metadata":{"id":"d6OBvgJPjRRT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Calculate the synthetic data proportion that will be required for each feature\n","synthetic_data_proportion = calculate_synthetic_data_proportion(patient_data_filtered_df, 'subject_id', 'label', target_frequency)\n","synthetic_data_proportion_df = pd.DataFrame(list(synthetic_data_proportion.items()), columns=['subject_id', 'synthetic_data_proportion'])\n","synthetic_data_proportion_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ePMzI9DCjSsq","executionInfo":{"status":"ok","timestamp":1721502739676,"user_tz":-60,"elapsed":59911,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"40e5eeb8-890a-45c9-b1e7-5ee4ff98cb51"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   subject_id  synthetic_data_proportion\n","0    10001884                   3.931034\n","1    10002428                   2.972222\n","2    10004235                   4.958333\n","3    10004720                   4.958333\n","4    10004733                   3.931034"],"text/html":["\n","  <div id=\"df-27491063-481c-409f-a843-859957fc9711\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>synthetic_data_proportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10001884</td>\n","      <td>3.931034</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10002428</td>\n","      <td>2.972222</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10004235</td>\n","      <td>4.958333</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10004720</td>\n","      <td>4.958333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10004733</td>\n","      <td>3.931034</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27491063-481c-409f-a843-859957fc9711')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-27491063-481c-409f-a843-859957fc9711 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-27491063-481c-409f-a843-859957fc9711');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-194e9ee7-670d-404c-a4e4-3a1068a07d8c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-194e9ee7-670d-404c-a4e4-3a1068a07d8c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-194e9ee7-670d-404c-a4e4-3a1068a07d8c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"synthetic_data_proportion_df","summary":"{\n  \"name\": \"synthetic_data_proportion_df\",\n  \"rows\": 4701,\n  \"fields\": [\n    {\n      \"column\": \"subject_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2307767,\n        \"min\": 10001884,\n        \"max\": 17923146,\n        \"num_unique_values\": 4701,\n        \"samples\": [\n          15154165,\n          14806591,\n          13824421\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"synthetic_data_proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7549051739707382,\n        \"min\": 0.1918238993710692,\n        \"max\": 46.666666666666664,\n        \"num_unique_values\": 123,\n        \"samples\": [\n          3.085714285714286,\n          3.264705882352941,\n          3.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["We can now split the data into the train and test sets using the calculated synthetic data proportions to ensure a balanced split between the sets.\n","\n","**The split is based on a maximal scenario where the data would be sampled every 30 mins - it should be noted that in the end not all features were sampled to 30 mins**"],"metadata":{"id":"if9y63gJ-EDh"}},{"cell_type":"code","source":["def calculate_patient_synthetic_data_proportion(patient_data, target_frequency=13):\n","    patient_synthetic_data_proportion = {}\n","    for patient_id, group in patient_data.groupby('subject_id'):\n","        observed_count = group['label'].count()\n","        total_expected = len(group) * target_frequency\n","        synthetic_count = total_expected - observed_count\n","        synthetic_proportion = synthetic_count / total_expected\n","        patient_synthetic_data_proportion[patient_id] = synthetic_proportion\n","    return patient_synthetic_data_proportion"],"metadata":{"id":"-MN6H-pp_9q8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def create_synthetic_data_proportion_df(patient_data):\n","    synthetic_data_proportion = calculate_patient_synthetic_data_proportion(patient_data)\n","    synthetic_df = pd.DataFrame(list(synthetic_data_proportion.items()), columns=['subject_id', 'synthetic_proportion'])\n","    return synthetic_df"],"metadata":{"id":"YslLMHte_3KY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def stratified_split(patient_data, test_size=0.2, random_state=42):\n","    synthetic_df = create_synthetic_data_proportion_df(patient_data)\n","    train_ids, test_ids = train_test_split(\n","        synthetic_df['subject_id'],\n","        test_size=test_size,\n","        random_state=random_state,\n","        stratify=synthetic_df['synthetic_proportion']\n","    )\n","    train_data = patient_data[patient_data['subject_id'].isin(train_ids)]\n","    test_data = patient_data[patient_data['subject_id'].isin(test_ids)]\n","    return train_data, test_data"],"metadata":{"id":"Tm3xxnvn-PKY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split into train and test data\n","train_data, test_data = stratified_split(patient_data_filtered_df, test_size=0.2, random_state=42)\n","\n","print(f\"Total number of patients in train set: {len(train_data['subject_id'].unique())}\")\n","print(f\"Total number of patients in test set: {len(test_data['subject_id'].unique())}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3EQFRyvg-T9Q","executionInfo":{"status":"ok","timestamp":1721510211787,"user_tz":-60,"elapsed":804,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"07e9d7ef-bc15-40b8-a55a-78e83fc411f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of patients in train set: 3760\n","Total number of patients in test set: 941\n"]}]},{"cell_type":"markdown","source":["We now can verify that the splitting stratified the data correclty."],"metadata":{"id":"cxq2UIm8-2Je"}},{"cell_type":"code","source":["def compare_synthetic_data_proportions(train_df, test_df, patient_id_col, feature_col, target_frequency=13):\n","    train_synthetic_data_proportion = calculate_synthetic_data_proportion(train_df, patient_id_col, feature_col, target_frequency)\n","    test_synthetic_data_proportion = calculate_synthetic_data_proportion(test_df, patient_id_col, feature_col, target_frequency)\n","\n","    train_avg_synthetic_data_proportion = sum(train_synthetic_data_proportion.values()) / len(train_synthetic_data_proportion)\n","    test_avg_synthetic_data_proportion = sum(test_synthetic_data_proportion.values()) / len(test_synthetic_data_proportion)\n","\n","    print(f\"Train Average Synthetic Data Proportion: {train_avg_synthetic_data_proportion:.4f}\")\n","    print(f\"Test Average Synthetic Data Proportion: {test_avg_synthetic_data_proportion:.4f}\")\n","\n","def compare_class_distributions(train_df, test_df, target_col):\n","    train_class_distribution = train_df[target_col].value_counts(normalize=True)\n","    test_class_distribution = test_df[target_col].value_counts(normalize=True)\n","\n","    print(\"Train Class Distribution:\")\n","    print(train_class_distribution)\n","    print(\"\\nTest Class Distribution:\")\n","    print(test_class_distribution)\n","\n","def compare_feature_distributions(train_df, test_df, feature_cols):\n","    train_feature_stats = train_df[feature_cols].describe().transpose()\n","    test_feature_stats = test_df[feature_cols].describe().transpose()\n","\n","    comparison_df = train_feature_stats[['mean', 'std']].merge(\n","        test_feature_stats[['mean', 'std']],\n","        left_index=True,\n","        right_index=True,\n","        suffixes=('_train', '_test')\n","    )\n","\n","    print(\"\\nFeature Statistics Comparison:\")\n","    print(comparison_df)"],"metadata":{"id":"7fY0t4cP-5zR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["compare_synthetic_data_proportions(train_data, test_data, 'subject_id', 'label', target_frequency)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uxMxlCr1_BLX","executionInfo":{"status":"ok","timestamp":1721510263106,"user_tz":-60,"elapsed":44506,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"02f1e930-858e-4c63-80e7-a82fa0e5bd94"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Average Synthetic Data Proportion: 5.3740\n","Test Average Synthetic Data Proportion: 5.4014\n"]}]},{"cell_type":"markdown","source":["The amount of synthetic data that would need to be generated is similar between the sets which is ideal.\n","\n","We will now check the class distributions."],"metadata":{"id":"SAHpGfAiAj-M"}},{"cell_type":"code","source":["def compare_class_distributions(train_df, test_df, target_col):\n","    train_class_distribution = train_df[target_col].value_counts(normalize=True)\n","    test_class_distribution = test_df[target_col].value_counts(normalize=True)\n","\n","    print(\"Train Class Distribution:\")\n","    print(train_class_distribution)\n","    print(\"\\nTest Class Distribution:\")\n","    print(test_class_distribution)"],"metadata":{"id":"2jMNFkrzAjIP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["compare_class_distributions(train_data, test_data, 'extubation_failure')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YCZUUs0GAudk","executionInfo":{"status":"ok","timestamp":1721510329723,"user_tz":-60,"elapsed":410,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"f3e4e138-c05e-4585-fa30-0db08112acf5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Class Distribution:\n","extubation_failure\n","0    0.670018\n","1    0.329982\n","Name: proportion, dtype: float64\n","\n","Test Class Distribution:\n","extubation_failure\n","0    0.674325\n","1    0.325675\n","Name: proportion, dtype: float64\n"]}]},{"cell_type":"markdown","source":["The class distribution is near identical between the two and reflects the inherent class distribution of the dataset which is ideal.\n","\n","Finally we will check the feature distributions between the train and test sets."],"metadata":{"id":"POmuXGIUAxWH"}},{"cell_type":"code","source":["def pivot_features(data):\n","    \"\"\"Pivot the DataFrame so that each feature label in the 'label' column becomes a column.\"\"\"\n","    pivoted_df = data.pivot_table(index='subject_id', columns='label', values='valuenum', aggfunc='mean').reset_index()\n","    return pivoted_df\n","\n","def compare_feature_distributions(train_df, test_df, feature_labels):\n","    # Pivot the train and test dataframes\n","    train_pivoted = pivot_features(train_df)\n","    test_pivoted = pivot_features(test_df)\n","\n","    # Calculate statistics for the pivoted features\n","    train_feature_stats = train_pivoted[feature_labels].describe().transpose()\n","    test_feature_stats = test_pivoted[feature_labels].describe().transpose()\n","\n","    # Merge the statistics from train and test dataframes\n","    comparison_df = train_feature_stats[['mean', 'std']].merge(\n","        test_feature_stats[['mean', 'std']],\n","        left_index=True,\n","        right_index=True,\n","        suffixes=('_train', '_test')\n","    )\n","\n","    # Print the comparison dataframe in a readable format\n","    print(\"\\nFeature Statistics Comparison:\")\n","    print(comparison_df)"],"metadata":{"id":"QIwnLb-yA9lC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["feature_cols = freq_df['Feature'].tolist()\n","# Remove low freq features from feature cols\n","feature_cols = [x for x in feature_cols if x not in low_freq_features]\n","\n","compare_feature_distributions(train_data, test_data, feature_cols)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4xXSfYdkA_EJ","executionInfo":{"status":"ok","timestamp":1721510736872,"user_tz":-60,"elapsed":852,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"4f58b6e2-df5d-48f8-ec70-4a5ea4f870fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Feature Statistics Comparison:\n","                             mean_train   std_train   mean_test    std_test\n","label                                                                      \n","Respiratory Rate              19.094851    7.168183   18.855197    4.681453\n","O2 saturation pulseoxymetry   97.569262    2.406151   97.512783    2.189873\n","Inspired O2 Fraction          42.971156    9.731068   42.922510    8.583030\n","Tidal Volume (observed)      469.480313  146.227187  481.555807  153.008609\n","Minute Volume                  8.783212    6.849875    8.692771    2.494141\n","Peak Insp. Pressure           14.140046   21.785647   13.775104    5.256252\n","Tidal Volume (spontaneous)   497.293202  490.311167  552.231935  965.520790\n","Ventilator Mode               18.214481   12.000974   18.508548   12.425795\n","PH (Arterial)                  7.411455    0.072239    7.410343    0.073391\n","Arterial CO2 Pressure         41.153256    8.490864   41.232617    8.805997\n","Arterial O2 pressure         112.828298   35.241575  112.946944   33.835808\n"]}]},{"cell_type":"markdown","source":["The feature data is comparable which is what is desired so we can move to the next step."],"metadata":{"id":"-VB3ENErCXD2"}},{"cell_type":"code","source":["# Save train and test data for now\n","train_data.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/07_data_preprocessing/01_feature_set_1/preprocessing_v2/02_train_data.parquet')\n","test_data.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/07_data_preprocessing/01_feature_set_1/preprocessing_v2/02_test_data.parquet')"],"metadata":{"id":"BWWemDatC07d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Step 3: Outlier Detection and Removal**\n","\n","Outliers tend to skew the data such that some values could be ignored and others overemphasised.\n","\n","These outliers need to be detected and handled to be within a reasonable range.\n","\n","Importantly, the range needs to be set based on the training data and then applied to the test data."],"metadata":{"id":"D-8Ilv8KDBi_"}},{"cell_type":"code","source":["# For each feature we can calculate statistics\n","train_feature_stats = train_data.groupby('label').agg({\n","    'valuenum': ['min', 'max', 'mean', 'median', 'std']\n","}).reset_index()\n","\n","train_feature_stats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"id":"DwuTharkDM0o","executionInfo":{"status":"ok","timestamp":1721510990974,"user_tz":-60,"elapsed":519,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"880cb8ee-2991-40f1-a983-afa01c05ae06"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          label valuenum                                \\\n","                                     min       max        mean  median   \n","0         Arterial CO2 Pressure     16.0     89.00   41.048930   40.00   \n","1          Arterial O2 pressure     16.0    525.00  112.679409  106.00   \n","2          Inspired O2 Fraction      0.0    100.00   43.433712   40.00   \n","3                 Minute Volume      0.0    777.00    8.818543    8.30   \n","4   O2 saturation pulseoxymetry      0.0    100.00   97.572667   98.00   \n","5                 PH (Arterial)      6.8      7.58    7.412026    7.42   \n","6           Peak Insp. Pressure      0.0   2523.00   14.192709   12.00   \n","7              Respiratory Rate      0.0   2325.00   19.175607   19.00   \n","8       Tidal Volume (observed)      0.0   1360.00  472.025328  452.00   \n","9    Tidal Volume (spontaneous)      0.0  52540.00  505.749019  446.00   \n","10              Ventilator Mode      1.0     71.00   18.618468   11.00   \n","\n","                \n","           std  \n","0     8.622495  \n","1    38.317571  \n","2    11.918554  \n","3    10.296240  \n","4     3.012675  \n","5     0.074149  \n","6    33.633063  \n","7    15.833371  \n","8   163.021589  \n","9   910.968934  \n","10   14.107023  "],"text/html":["\n","  <div id=\"df-43a59103-5f07-4c08-84a8-619a5f146cf4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th>label</th>\n","      <th colspan=\"5\" halign=\"left\">valuenum</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th>min</th>\n","      <th>max</th>\n","      <th>mean</th>\n","      <th>median</th>\n","      <th>std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>16.0</td>\n","      <td>89.00</td>\n","      <td>41.048930</td>\n","      <td>40.00</td>\n","      <td>8.622495</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>16.0</td>\n","      <td>525.00</td>\n","      <td>112.679409</td>\n","      <td>106.00</td>\n","      <td>38.317571</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>0.0</td>\n","      <td>100.00</td>\n","      <td>43.433712</td>\n","      <td>40.00</td>\n","      <td>11.918554</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minute Volume</td>\n","      <td>0.0</td>\n","      <td>777.00</td>\n","      <td>8.818543</td>\n","      <td>8.30</td>\n","      <td>10.296240</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>0.0</td>\n","      <td>100.00</td>\n","      <td>97.572667</td>\n","      <td>98.00</td>\n","      <td>3.012675</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>PH (Arterial)</td>\n","      <td>6.8</td>\n","      <td>7.58</td>\n","      <td>7.412026</td>\n","      <td>7.42</td>\n","      <td>0.074149</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>0.0</td>\n","      <td>2523.00</td>\n","      <td>14.192709</td>\n","      <td>12.00</td>\n","      <td>33.633063</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Respiratory Rate</td>\n","      <td>0.0</td>\n","      <td>2325.00</td>\n","      <td>19.175607</td>\n","      <td>19.00</td>\n","      <td>15.833371</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>0.0</td>\n","      <td>1360.00</td>\n","      <td>472.025328</td>\n","      <td>452.00</td>\n","      <td>163.021589</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>0.0</td>\n","      <td>52540.00</td>\n","      <td>505.749019</td>\n","      <td>446.00</td>\n","      <td>910.968934</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Ventilator Mode</td>\n","      <td>1.0</td>\n","      <td>71.00</td>\n","      <td>18.618468</td>\n","      <td>11.00</td>\n","      <td>14.107023</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43a59103-5f07-4c08-84a8-619a5f146cf4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-43a59103-5f07-4c08-84a8-619a5f146cf4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-43a59103-5f07-4c08-84a8-619a5f146cf4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5bffa187-72aa-4aaa-a5cf-cfe7ef9d7c2a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bffa187-72aa-4aaa-a5cf-cfe7ef9d7c2a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5bffa187-72aa-4aaa-a5cf-cfe7ef9d7c2a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_574c9210-0dc9-4dd4-bedd-b94bbd603dbd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_feature_stats')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_574c9210-0dc9-4dd4-bedd-b94bbd603dbd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_feature_stats');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_feature_stats","summary":"{\n  \"name\": \"train_feature_stats\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": [\n        \"label\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"PH (Arterial)\",\n          \"Arterial CO2 Pressure\",\n          \"Tidal Volume (spontaneous)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"valuenum\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.443883639827488,\n        \"min\": 0.0,\n        \"max\": 16.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          1.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"valuenum\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15630.549350249397,\n        \"min\": 7.58,\n        \"max\": 52540.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          52540.0,\n          525.0,\n          2523.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"valuenum\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 184.93611133367662,\n        \"min\": 7.412025948103793,\n        \"max\": 505.7490194024059,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          7.412025948103793,\n          41.04892966360856,\n          505.7490194024059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"valuenum\",\n        \"median\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 169.79141567335975,\n        \"min\": 7.42,\n        \"max\": 452.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          446.0,\n          106.0,\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"valuenum\",\n        \"std\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 269.5855714932853,\n        \"min\": 0.07414877116279046,\n        \"max\": 910.9689336763713,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.07414877116279046,\n          8.622495357307486,\n          910.9689336763713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","source":["It should be noted that ventilator model is categorical i.e. each value refers to a specific mechanical ventilator mode. As such, outlier detection will not be implemented on this."],"metadata":{"id":"jPDXcQhfDUtb"}},{"cell_type":"markdown","source":["To identify outliers, we need to set a reasonable range from which we can then detect and remove outliers.\n","\n","Helpfully, MIMIC provides high and low normal value ranges for several features in the chartevents table.\n","\n","We will first extract these and filter out values that exceed these ranges and set them as NaN.\n","\n","For any features that do not have recommended ranges, a standard range of mean +- 3 std dev will be used and values outside this range set to NaN.\n","\n","**The ranges will be based on the training data and applied to the test data**"],"metadata":{"id":"f5QSL2iEDnwR"}},{"cell_type":"code","source":["# Load the d_items table\n","items_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/mimic-iv-2.2-raw-data/icu/d_items.csv'\n","items_df = pd.read_csv(items_path)\n","items_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"aBXRZ9txDtWy","executionInfo":{"status":"ok","timestamp":1721511110361,"user_tz":-60,"elapsed":2446,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"d7069518-bd6c-4ff0-8e0b-02fb963b8b05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   itemid                    label        abbreviation         linksto  \\\n","0  220001             Problem List        Problem List     chartevents   \n","1  220003       ICU Admission date  ICU Admission date  datetimeevents   \n","2  220045               Heart Rate                  HR     chartevents   \n","3  220046  Heart rate Alarm - High     HR Alarm - High     chartevents   \n","4  220047   Heart Rate Alarm - Low      HR Alarm - Low     chartevents   \n","\n","              category unitname     param_type  lownormalvalue  \\\n","0              General      NaN           Text             NaN   \n","1                  ADT      NaN  Date and time             NaN   \n","2  Routine Vital Signs      bpm        Numeric             NaN   \n","3               Alarms      bpm        Numeric             NaN   \n","4               Alarms      bpm        Numeric             NaN   \n","\n","   highnormalvalue  \n","0              NaN  \n","1              NaN  \n","2              NaN  \n","3              NaN  \n","4              NaN  "],"text/html":["\n","  <div id=\"df-5da0c2f9-4831-4ab5-aeb0-a01dd2c07fb7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>itemid</th>\n","      <th>label</th>\n","      <th>abbreviation</th>\n","      <th>linksto</th>\n","      <th>category</th>\n","      <th>unitname</th>\n","      <th>param_type</th>\n","      <th>lownormalvalue</th>\n","      <th>highnormalvalue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>220001</td>\n","      <td>Problem List</td>\n","      <td>Problem List</td>\n","      <td>chartevents</td>\n","      <td>General</td>\n","      <td>NaN</td>\n","      <td>Text</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>220003</td>\n","      <td>ICU Admission date</td>\n","      <td>ICU Admission date</td>\n","      <td>datetimeevents</td>\n","      <td>ADT</td>\n","      <td>NaN</td>\n","      <td>Date and time</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>220045</td>\n","      <td>Heart Rate</td>\n","      <td>HR</td>\n","      <td>chartevents</td>\n","      <td>Routine Vital Signs</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>220046</td>\n","      <td>Heart rate Alarm - High</td>\n","      <td>HR Alarm - High</td>\n","      <td>chartevents</td>\n","      <td>Alarms</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>220047</td>\n","      <td>Heart Rate Alarm - Low</td>\n","      <td>HR Alarm - Low</td>\n","      <td>chartevents</td>\n","      <td>Alarms</td>\n","      <td>bpm</td>\n","      <td>Numeric</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5da0c2f9-4831-4ab5-aeb0-a01dd2c07fb7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5da0c2f9-4831-4ab5-aeb0-a01dd2c07fb7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5da0c2f9-4831-4ab5-aeb0-a01dd2c07fb7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1fdd5152-575a-4c4a-a689-bee8beffe47f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1fdd5152-575a-4c4a-a689-bee8beffe47f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1fdd5152-575a-4c4a-a689-bee8beffe47f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"items_df","summary":"{\n  \"name\": \"items_df\",\n  \"rows\": 4014,\n  \"fields\": [\n    {\n      \"column\": \"itemid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2467,\n        \"min\": 220001,\n        \"max\": 230085,\n        \"num_unique_values\": 4014,\n        \"samples\": [\n          229798,\n          227618,\n          228177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3888,\n        \"samples\": [\n          \"PNC-1 Bolus (mL)\",\n          \"Tunneling Present #9\",\n          \"Impaired Skin  - Dressing Status #6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3895,\n        \"samples\": [\n          \"Pain Assessment Method (BIS)\",\n          \"ZTrach Care\",\n          \"Intubation - Details\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"linksto\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"chartevents\",\n          \"datetimeevents\",\n          \"outputevents\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 81,\n        \"samples\": [\n          \"Skin - Assessment\",\n          \"General\",\n          \"Pain/Sedation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unitname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"bpm\",\n          \"Liters\",\n          \"mcg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Date and time\",\n          \"Processes\",\n          \"Text\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lownormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.35662273210929,\n        \"min\": -2.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          6.0,\n          90.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highnormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 253.0760071306539,\n        \"min\": 8.0,\n        \"max\": 750.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          750.0,\n          36.0,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["The columns lownormalvalue and highnormal value provide expected values for a specific feature.\n","\n","These, where present, will be used."],"metadata":{"id":"tUTveBY7DxiX"}},{"cell_type":"code","source":["# For the unique labels in the patient data, extract the lownormalvalue and highnormalvalue\n","mimic_ranges = pd.merge(patient_data_df, items_df, left_on='itemid', right_on='itemid', how='left')\n","\n","# Remove the duplicate label_x and label_y column\n","mimic_ranges = mimic_ranges.drop(['label_y'], axis=1)\n","\n","# Rename the label_x column to label\n","mimic_ranges = mimic_ranges.rename(columns={'label_x': 'label'})\n","\n","# For each label, extract the lownormalvalue and highnormalvalue\n","mimic_ranges = mimic_ranges[['label', 'lownormalvalue', 'highnormalvalue']].drop_duplicates()\n","\n","# Remove any rows where both lownormalvalue and highnormalvalue are NaN\n","mimic_ranges"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"5lkgZm4rDyTR","executionInfo":{"status":"ok","timestamp":1721511167100,"user_tz":-60,"elapsed":397,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"e635f3b5-a45c-4ced-a5d4-6c5431c265a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                            label  lownormalvalue  highnormalvalue\n","0            Inspired O2 Fraction             NaN              NaN\n","1         Tidal Volume (observed)           299.0            750.0\n","2      Tidal Volume (spontaneous)           299.0            750.0\n","3                   Minute Volume             NaN             12.1\n","4             Peak Insp. Pressure             NaN              NaN\n","5                           EtCO2             NaN              NaN\n","6                Respiratory Rate             NaN              NaN\n","7     O2 saturation pulseoxymetry             NaN              NaN\n","31                Ventilator Mode             NaN              NaN\n","63           Arterial O2 pressure             NaN              NaN\n","64          Arterial CO2 Pressure             NaN              NaN\n","65                  PH (Arterial)             NaN              NaN\n","87                     Hemoglobin             NaN              NaN\n","258              Plateau Pressure             NaN             31.0\n","5290         Negative Insp. Force             NaN              NaN"],"text/html":["\n","  <div id=\"df-d3b2a279-36b1-4370-b90f-715c0ac9adfb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>lownormalvalue</th>\n","      <th>highnormalvalue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>299.0</td>\n","      <td>750.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>299.0</td>\n","      <td>750.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minute Volume</td>\n","      <td>NaN</td>\n","      <td>12.1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>EtCO2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Respiratory Rate</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>Ventilator Mode</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>PH (Arterial)</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>Hemoglobin</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>258</th>\n","      <td>Plateau Pressure</td>\n","      <td>NaN</td>\n","      <td>31.0</td>\n","    </tr>\n","    <tr>\n","      <th>5290</th>\n","      <td>Negative Insp. Force</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3b2a279-36b1-4370-b90f-715c0ac9adfb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d3b2a279-36b1-4370-b90f-715c0ac9adfb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d3b2a279-36b1-4370-b90f-715c0ac9adfb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97fc1f89-f121-4c85-b646-bfcf0a6609bf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97fc1f89-f121-4c85-b646-bfcf0a6609bf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97fc1f89-f121-4c85-b646-bfcf0a6609bf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f33ce1b4-4c00-48c4-a229-f9e4a317b5c4\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mimic_ranges')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f33ce1b4-4c00-48c4-a229-f9e4a317b5c4 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('mimic_ranges');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"mimic_ranges","summary":"{\n  \"name\": \"mimic_ranges\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Arterial O2 pressure\",\n          \"PH (Arterial)\",\n          \"Inspired O2 Fraction\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lownormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 299.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highnormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 420.6415763310884,\n        \"min\": 12.100000381469728,\n        \"max\": 750.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          750.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["The main paper (Zeng et al.) uses \"Reasonable ranges\" on the MIMIC data set in conjunction with critical care physicians.\n","\n","First we will try the method of mean+/- 3 standard deviations for the high and low normal values inclusive of the MIMIC reccommended range and see what % of data points it removes."],"metadata":{"id":"eFhq8RZ0ECQ7"}},{"cell_type":"code","source":["mimic_ranges_copy = mimic_ranges.copy()\n","train_feature_stats_copy = train_feature_stats.copy()"],"metadata":{"id":"fKacD3iyEB8V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_feature_stats.columns = ['_'.join(col).strip() for col in train_feature_stats.columns.values]\n","train_feature_stats.rename(columns={'label_': 'label'}, inplace=True)\n","train_feature_stats.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZAgDBy1-EHAb","executionInfo":{"status":"ok","timestamp":1721511249811,"user_tz":-60,"elapsed":410,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"cc28ce96-dbc2-4864-b411-64a4552eafcf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 11 entries, 0 to 10\n","Data columns (total 6 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   label            11 non-null     object \n"," 1   valuenum_min     11 non-null     float64\n"," 2   valuenum_max     11 non-null     float64\n"," 3   valuenum_mean    11 non-null     float64\n"," 4   valuenum_median  11 non-null     float64\n"," 5   valuenum_std     11 non-null     float64\n","dtypes: float64(5), object(1)\n","memory usage: 656.0+ bytes\n"]}]},{"cell_type":"code","source":["merged_ranges = pd.merge(mimic_ranges_copy, train_feature_stats, left_on='label', right_on='label')\n","merged_ranges"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"7cR5mMcGES6l","executionInfo":{"status":"ok","timestamp":1721511289562,"user_tz":-60,"elapsed":369,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"622ca201-3c73-4483-9f22-053401307cf5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          label  lownormalvalue  highnormalvalue  \\\n","0          Inspired O2 Fraction             NaN              NaN   \n","1       Tidal Volume (observed)           299.0            750.0   \n","2    Tidal Volume (spontaneous)           299.0            750.0   \n","3                 Minute Volume             NaN             12.1   \n","4           Peak Insp. Pressure             NaN              NaN   \n","5              Respiratory Rate             NaN              NaN   \n","6   O2 saturation pulseoxymetry             NaN              NaN   \n","7               Ventilator Mode             NaN              NaN   \n","8          Arterial O2 pressure             NaN              NaN   \n","9         Arterial CO2 Pressure             NaN              NaN   \n","10                PH (Arterial)             NaN              NaN   \n","\n","    valuenum_min  valuenum_max  valuenum_mean  valuenum_median  valuenum_std  \n","0            0.0        100.00      43.433712            40.00     11.918554  \n","1            0.0       1360.00     472.025328           452.00    163.021589  \n","2            0.0      52540.00     505.749019           446.00    910.968934  \n","3            0.0        777.00       8.818543             8.30     10.296240  \n","4            0.0       2523.00      14.192709            12.00     33.633063  \n","5            0.0       2325.00      19.175607            19.00     15.833371  \n","6            0.0        100.00      97.572667            98.00      3.012675  \n","7            1.0         71.00      18.618468            11.00     14.107023  \n","8           16.0        525.00     112.679409           106.00     38.317571  \n","9           16.0         89.00      41.048930            40.00      8.622495  \n","10           6.8          7.58       7.412026             7.42      0.074149  "],"text/html":["\n","  <div id=\"df-e2d43bbf-1c0a-4ed3-afee-a51f098c7ccb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>lownormalvalue</th>\n","      <th>highnormalvalue</th>\n","      <th>valuenum_min</th>\n","      <th>valuenum_max</th>\n","      <th>valuenum_mean</th>\n","      <th>valuenum_median</th>\n","      <th>valuenum_std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>100.00</td>\n","      <td>43.433712</td>\n","      <td>40.00</td>\n","      <td>11.918554</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>299.0</td>\n","      <td>750.0</td>\n","      <td>0.0</td>\n","      <td>1360.00</td>\n","      <td>472.025328</td>\n","      <td>452.00</td>\n","      <td>163.021589</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>299.0</td>\n","      <td>750.0</td>\n","      <td>0.0</td>\n","      <td>52540.00</td>\n","      <td>505.749019</td>\n","      <td>446.00</td>\n","      <td>910.968934</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minute Volume</td>\n","      <td>NaN</td>\n","      <td>12.1</td>\n","      <td>0.0</td>\n","      <td>777.00</td>\n","      <td>8.818543</td>\n","      <td>8.30</td>\n","      <td>10.296240</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>2523.00</td>\n","      <td>14.192709</td>\n","      <td>12.00</td>\n","      <td>33.633063</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Respiratory Rate</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>2325.00</td>\n","      <td>19.175607</td>\n","      <td>19.00</td>\n","      <td>15.833371</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>100.00</td>\n","      <td>97.572667</td>\n","      <td>98.00</td>\n","      <td>3.012675</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ventilator Mode</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>71.00</td>\n","      <td>18.618468</td>\n","      <td>11.00</td>\n","      <td>14.107023</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>16.0</td>\n","      <td>525.00</td>\n","      <td>112.679409</td>\n","      <td>106.00</td>\n","      <td>38.317571</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>16.0</td>\n","      <td>89.00</td>\n","      <td>41.048930</td>\n","      <td>40.00</td>\n","      <td>8.622495</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>PH (Arterial)</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>6.8</td>\n","      <td>7.58</td>\n","      <td>7.412026</td>\n","      <td>7.42</td>\n","      <td>0.074149</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2d43bbf-1c0a-4ed3-afee-a51f098c7ccb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e2d43bbf-1c0a-4ed3-afee-a51f098c7ccb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2d43bbf-1c0a-4ed3-afee-a51f098c7ccb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-21fa3e77-fa22-409c-b647-f538e6f479e1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-21fa3e77-fa22-409c-b647-f538e6f479e1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-21fa3e77-fa22-409c-b647-f538e6f479e1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_49484c91-6253-467b-a6b3-2ce60f5c3399\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_ranges')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_49484c91-6253-467b-a6b3-2ce60f5c3399 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_ranges');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_ranges","summary":"{\n  \"name\": \"merged_ranges\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Respiratory Rate\",\n          \"Inspired O2 Fraction\",\n          \"Arterial CO2 Pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lownormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 299.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          299.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highnormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 426.0267634147832,\n        \"min\": 12.100000381469728,\n        \"max\": 750.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          12.100000381469728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuenum_min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.443883639827488,\n        \"min\": 0.0,\n        \"max\": 16.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuenum_max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15630.549350249397,\n        \"min\": 7.58,\n        \"max\": 52540.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuenum_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 184.93611133367662,\n        \"min\": 7.412025948103793,\n        \"max\": 505.7490194024059,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          19.175607389740065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuenum_median\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 169.79141567335975,\n        \"min\": 7.42,\n        \"max\": 452.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          106.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valuenum_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 269.5855714932853,\n        \"min\": 0.07414877116279046,\n        \"max\": 910.9689336763713,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          15.833370845699354\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["Mean +/- 3 std range calulcation"],"metadata":{"id":"Wj6pfwlDEdBe"}},{"cell_type":"code","source":["# Create reasonable ranges\n","k = 3\n","\n","# Update lownormalvalue and highnormalvalue\n","merged_ranges['lownormalvalue'] = merged_ranges.apply(\n","    lambda row: row['lownormalvalue'] if not pd.isna(row['lownormalvalue'])\n","    else max(row['valuenum_min'], row['valuenum_mean'] - k * row['valuenum_std']),\n","    axis=1\n",")\n","\n","merged_ranges['highnormalvalue'] = merged_ranges.apply(\n","    lambda row: row['highnormalvalue'] if not pd.isna(row['highnormalvalue'])\n","    else min(row['valuenum_max'], row['valuenum_mean'] + k * row['valuenum_std']),\n","    axis=1\n",")"],"metadata":{"id":"lvQHwVyIEj5d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop the extra columns\n","merged_train_ranges = merged_ranges[['label','lownormalvalue', 'highnormalvalue']]\n","\n","# Remove Ventilator Mode as a row from the ranges\n","merged_train_ranges = merged_train_ranges[merged_train_ranges['label'] != 'Ventilator Mode']\n","\n","# Remove duplicate rows\n","merged_train_ranges"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"xXYGclGMEmBl","executionInfo":{"status":"ok","timestamp":1721511403989,"user_tz":-60,"elapsed":838,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"90b6d839-fa23-4013-f50f-adca83329641"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          label  lownormalvalue  highnormalvalue\n","0          Inspired O2 Fraction        7.678051        79.189374\n","1       Tidal Volume (observed)      299.000000       750.000000\n","2    Tidal Volume (spontaneous)      299.000000       750.000000\n","3                 Minute Volume        0.000000        12.100000\n","4           Peak Insp. Pressure        0.000000       115.091899\n","5              Respiratory Rate        0.000000        66.675720\n","6   O2 saturation pulseoxymetry       88.534643       100.000000\n","8          Arterial O2 pressure       16.000000       227.632123\n","9         Arterial CO2 Pressure       16.000000        66.916416\n","10                PH (Arterial)        7.189580         7.580000"],"text/html":["\n","  <div id=\"df-2cbc8dcc-4620-454e-a5c3-e45dc44eca7f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>lownormalvalue</th>\n","      <th>highnormalvalue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>7.678051</td>\n","      <td>79.189374</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>299.000000</td>\n","      <td>750.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>299.000000</td>\n","      <td>750.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minute Volume</td>\n","      <td>0.000000</td>\n","      <td>12.100000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>0.000000</td>\n","      <td>115.091899</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Respiratory Rate</td>\n","      <td>0.000000</td>\n","      <td>66.675720</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>88.534643</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>16.000000</td>\n","      <td>227.632123</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>16.000000</td>\n","      <td>66.916416</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>PH (Arterial)</td>\n","      <td>7.189580</td>\n","      <td>7.580000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cbc8dcc-4620-454e-a5c3-e45dc44eca7f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2cbc8dcc-4620-454e-a5c3-e45dc44eca7f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2cbc8dcc-4620-454e-a5c3-e45dc44eca7f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f057f38-c9a1-4fba-b70e-fc8af39886bc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f057f38-c9a1-4fba-b70e-fc8af39886bc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f057f38-c9a1-4fba-b70e-fc8af39886bc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ff241cf0-6378-4618-8c42-10ad8fe3b307\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_train_ranges')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ff241cf0-6378-4618-8c42-10ad8fe3b307 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_train_ranges');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_train_ranges","summary":"{\n  \"name\": \"merged_train_ranges\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Arterial CO2 Pressure\",\n          \"Tidal Volume (observed)\",\n          \"Respiratory Rate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lownormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 121.7808304970657,\n        \"min\": 0.0,\n        \"max\": 299.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          7.6780506052742865,\n          299.0,\n          7.189579634615422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highnormalvalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 287.1928505302938,\n        \"min\": 7.58,\n        \"max\": 750.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          66.91641573553102,\n          750.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["# Apply these ranges to both the train and test set\n","train_data_copy = train_data.copy()\n","test_data_copy = test_data.copy()"],"metadata":{"id":"euQHqj3QFwpN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Clinically validating these ranges with Doctor - these are reasonable and we can proceed in removing outliers outside this range and replacing them with NaNs to be later filled."],"metadata":{"id":"HGxMEa70H0cN"}},{"cell_type":"code","source":["# Function to set outliers as NaN\n","def set_outliers_to_nan(df, mimic_df):\n","    for i, row in mimic_df.iterrows():\n","        if row['label'] != 'Ventilator Mode':  # Skip Ventilator Mode\n","            feature_mask = df['label'] == row['label']\n","            df.loc[feature_mask & ((df['valuenum'] < row['lownormalvalue']) | (df['valuenum'] > row['highnormalvalue'])), 'valuenum'] = np.nan\n","    return df"],"metadata":{"id":"fX60-wKmH8-M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data = set_outliers_to_nan(train_data, merged_train_ranges)\n","test_data = set_outliers_to_nan(test_data, merged_train_ranges)"],"metadata":{"id":"dKLQMdYrIDMU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We can visualise how many data points were outliers."],"metadata":{"id":"7CTEYm92IhE1"}},{"cell_type":"code","source":["# Function to calculate the percentage of NaN values per feature\n","def calculate_nan_stats(df, label_col='label', value_col='valuenum'):\n","    stats = []\n","    for label in df[label_col].unique():\n","        feature_mask = df[label_col] == label\n","        total_points = feature_mask.sum()\n","        nan_points = df.loc[feature_mask, value_col].isna().sum()\n","        percentage_nan = (nan_points / total_points) * 100\n","        stats.append({\n","            'label': label,\n","            'total_data_points': total_points,\n","            'nan_data_points': nan_points,\n","            'percentage_nan': percentage_nan\n","        })\n","    return pd.DataFrame(stats)"],"metadata":{"id":"nuV5yN8vIl8D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_nan_stats = calculate_nan_stats(train_data)\n","test_nan_stats = calculate_nan_stats(test_data)\n","\n","train_nan_stats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"IYE3U1rkIs5o","executionInfo":{"status":"ok","timestamp":1721512426808,"user_tz":-60,"elapsed":760,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"096babf7-4b40-4032-877e-326772da80c2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          label  total_data_points  nan_data_points  \\\n","0          Inspired O2 Fraction               7920              214   \n","1       Tidal Volume (observed)               6079              843   \n","2    Tidal Volume (spontaneous)               5154              815   \n","3                 Minute Volume               6019              657   \n","4           Peak Insp. Pressure               5747                1   \n","5              Respiratory Rate              24737                5   \n","6   O2 saturation pulseoxymetry              24805              195   \n","7               Ventilator Mode               4516                0   \n","8          Arterial O2 pressure               1962               24   \n","9         Arterial CO2 Pressure               1962               26   \n","10                PH (Arterial)               2004               31   \n","\n","    percentage_nan  \n","0         2.702020  \n","1        13.867412  \n","2        15.812961  \n","3        10.915434  \n","4         0.017400  \n","5         0.020213  \n","6         0.786132  \n","7         0.000000  \n","8         1.223242  \n","9         1.325178  \n","10        1.546906  "],"text/html":["\n","  <div id=\"df-ae7e80ba-91f9-4580-bfa5-2c08d910b84f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>total_data_points</th>\n","      <th>nan_data_points</th>\n","      <th>percentage_nan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>7920</td>\n","      <td>214</td>\n","      <td>2.702020</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>6079</td>\n","      <td>843</td>\n","      <td>13.867412</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>5154</td>\n","      <td>815</td>\n","      <td>15.812961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minute Volume</td>\n","      <td>6019</td>\n","      <td>657</td>\n","      <td>10.915434</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>5747</td>\n","      <td>1</td>\n","      <td>0.017400</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Respiratory Rate</td>\n","      <td>24737</td>\n","      <td>5</td>\n","      <td>0.020213</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>24805</td>\n","      <td>195</td>\n","      <td>0.786132</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ventilator Mode</td>\n","      <td>4516</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>1962</td>\n","      <td>24</td>\n","      <td>1.223242</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>1962</td>\n","      <td>26</td>\n","      <td>1.325178</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>PH (Arterial)</td>\n","      <td>2004</td>\n","      <td>31</td>\n","      <td>1.546906</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae7e80ba-91f9-4580-bfa5-2c08d910b84f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ae7e80ba-91f9-4580-bfa5-2c08d910b84f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ae7e80ba-91f9-4580-bfa5-2c08d910b84f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f2ada3d8-9590-40e4-81d6-cde2f0dcaa57\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2ada3d8-9590-40e4-81d6-cde2f0dcaa57')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f2ada3d8-9590-40e4-81d6-cde2f0dcaa57 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7ad29e99-e780-432b-958a-6287f6020502\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_nan_stats')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7ad29e99-e780-432b-958a-6287f6020502 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_nan_stats');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_nan_stats","summary":"{\n  \"name\": \"train_nan_stats\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Respiratory Rate\",\n          \"Inspired O2 Fraction\",\n          \"Arterial CO2 Pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_data_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8387,\n        \"min\": 1962,\n        \"max\": 24805,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1962,\n          6079,\n          24737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nan_data_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 342,\n        \"min\": 0,\n        \"max\": 843,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5,\n          214,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"percentage_nan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.0308769834245695,\n        \"min\": 0.0,\n        \"max\": 15.812960807140087,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.020212636940615272,\n          2.702020202020202,\n          1.325178389398573\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["test_nan_stats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"IcGDoWRBIybT","executionInfo":{"status":"ok","timestamp":1721512448044,"user_tz":-60,"elapsed":387,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"0ac38169-4656-417a-85bd-d052106026cf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          label  total_data_points  nan_data_points  \\\n","0   O2 saturation pulseoxymetry               6271               41   \n","1          Inspired O2 Fraction               1973               47   \n","2       Tidal Volume (observed)               1444              211   \n","3    Tidal Volume (spontaneous)               1275              208   \n","4                 Minute Volume               1491              148   \n","5           Peak Insp. Pressure               1418                0   \n","6              Respiratory Rate               6359                0   \n","7               Ventilator Mode               1144                0   \n","8          Arterial O2 pressure                505                7   \n","9         Arterial CO2 Pressure                505                9   \n","10                PH (Arterial)                509               11   \n","\n","    percentage_nan  \n","0         0.653803  \n","1         2.382159  \n","2        14.612188  \n","3        16.313725  \n","4         9.926224  \n","5         0.000000  \n","6         0.000000  \n","7         0.000000  \n","8         1.386139  \n","9         1.782178  \n","10        2.161100  "],"text/html":["\n","  <div id=\"df-8ed8ca82-fcc5-4f4c-a249-834d7156e824\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>total_data_points</th>\n","      <th>nan_data_points</th>\n","      <th>percentage_nan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>O2 saturation pulseoxymetry</td>\n","      <td>6271</td>\n","      <td>41</td>\n","      <td>0.653803</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Inspired O2 Fraction</td>\n","      <td>1973</td>\n","      <td>47</td>\n","      <td>2.382159</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Tidal Volume (observed)</td>\n","      <td>1444</td>\n","      <td>211</td>\n","      <td>14.612188</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Tidal Volume (spontaneous)</td>\n","      <td>1275</td>\n","      <td>208</td>\n","      <td>16.313725</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Minute Volume</td>\n","      <td>1491</td>\n","      <td>148</td>\n","      <td>9.926224</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Peak Insp. Pressure</td>\n","      <td>1418</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Respiratory Rate</td>\n","      <td>6359</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ventilator Mode</td>\n","      <td>1144</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Arterial O2 pressure</td>\n","      <td>505</td>\n","      <td>7</td>\n","      <td>1.386139</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Arterial CO2 Pressure</td>\n","      <td>505</td>\n","      <td>9</td>\n","      <td>1.782178</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>PH (Arterial)</td>\n","      <td>509</td>\n","      <td>11</td>\n","      <td>2.161100</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ed8ca82-fcc5-4f4c-a249-834d7156e824')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8ed8ca82-fcc5-4f4c-a249-834d7156e824 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8ed8ca82-fcc5-4f4c-a249-834d7156e824');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b47e9645-3732-46fe-8470-ba3366659bd1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b47e9645-3732-46fe-8470-ba3366659bd1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b47e9645-3732-46fe-8470-ba3366659bd1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5820526d-bf92-4632-85ca-9707feac98e6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_nan_stats')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5820526d-bf92-4632-85ca-9707feac98e6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('test_nan_stats');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_nan_stats","summary":"{\n  \"name\": \"test_nan_stats\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Peak Insp. Pressure\",\n          \"O2 saturation pulseoxymetry\",\n          \"Arterial CO2 Pressure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_data_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2145,\n        \"min\": 505,\n        \"max\": 6359,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          505,\n          1973,\n          1418\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nan_data_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": 0,\n        \"max\": 211,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          47,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"percentage_nan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.1142353249142305,\n        \"min\": 0.0,\n        \"max\": 16.31372549019608,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1.782178217821782,\n          2.3821591485048152,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["# Calculate the percentage of data points removed in train set\n","total_data_points = len(train_data_copy)\n","nan_data_points = train_data['valuenum'].isna().sum()\n","percentage_nan_overall = (nan_data_points / total_data_points) * 100\n","\n","print(f\"Percentage of NaN data in train set: {percentage_nan_overall:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O1kaulEZJF6z","executionInfo":{"status":"ok","timestamp":1721512538453,"user_tz":-60,"elapsed":523,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"bf11b936-b56c-4eb0-9aad-1e8a73737478"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of NaN data in train set: 3.09%\n"]}]},{"cell_type":"code","source":["# Calculate the percentage of data points removed in test set\n","total_data_points = len(test_data_copy)\n","nan_data_points = test_data['valuenum'].isna().sum()\n","percentage_nan_overall = (nan_data_points / total_data_points) * 100\n","\n","print(f\"Percentage of NaN data in test set: {percentage_nan_overall:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6cnt-ZgZJMAb","executionInfo":{"status":"ok","timestamp":1721512564093,"user_tz":-60,"elapsed":356,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"923f4a7d-7fc7-44ea-e69f-3206d3d209eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of NaN data in test set: 2.98%\n"]}]},{"cell_type":"markdown","source":["Across both the train and test sets the feature with the most NaNs hence outliers removed were Tidal Volume.\n","\n","Features with a larger percentage of points removed indicate a larger number of outliers.\n","\n","This seems to be the case for tidal volume and Minute volume.\n","\n","Possible explanations could be:\n","\n","Physiological Variability:\n","\n","- Tidal Volume (TV): This is the volume of air moved into or out of the lungs during normal breathing. There can be significant variability among individuals based on factors like lung capacity, respiratory health, activity level, and body size.\n","\n","- Minute Volume (MV): This is the total volume of air breathed in one minute, which is a product of tidal volume and respiratory rate. Since it depends on two variables, it can exhibit even more variability.\n","\n","Measurement Errors or Data Quality Issues:\n","\n","- Instrument Calibration: Measurement devices might have calibration issues, leading to incorrect readings.\n","- Data Entry Errors: Manual data entry errors can lead to incorrect values being recorded.\n","\n","Clinical Interventions:\n","\n","- Ventilator Settings: Patients on mechanical ventilation can have widely varying tidal and minute volumes based on their clinical condition and the ventilator settings applied by healthcare providers.\n","- Therapeutic Changes: Changes in therapy, such as adjusting ventilator settings or administering certain medications, can cause abrupt changes in tidal and minute volumes.\n","\n","Acute Conditions:\n","\n","- Respiratory Diseases: Patients with conditions like ARDS (Acute Respiratory Distress Syndrome), COPD (Chronic Obstructive Pulmonary Disease), or other acute respiratory conditions can exhibit abnormal tidal and minute volumes.\n","- Acute Events: Sudden changes in a patient's condition, such as during a respiratory crisis, can lead to temporary but significant deviations from normal values."],"metadata":{"id":"dPGofvJkI2RI"}},{"cell_type":"code","source":["# Look at the distribution of Minute Volume and Tidal Volume from the original patient set\n","# Plotting histograms for Tidal Volume (observed), Tidal Volume (spontaneous), and Minute Volume\n","plt.figure(figsize=(18, 6))\n","\n","# Tidal Volume (observed)\n","plt.subplot(1, 3, 1)\n","plt.hist(patient_data_df[patient_data_df['label'] == 'Tidal Volume (observed)']['valuenum'], bins=50, color='blue', alpha=0.7)\n","plt.title('Tidal Volume (observed) Distribution')\n","plt.xlabel('Tidal Volume (observed)')\n","plt.ylabel('Frequency')\n","plt.xlim(0, 1500)\n","\n","# Tidal Volume (spontaneous)\n","plt.subplot(1, 3, 2)\n","plt.hist(patient_data_df[patient_data_df['label'] == 'Tidal Volume (spontaneous)']['valuenum'], bins=50, color='green', alpha=0.7)\n","plt.title('Tidal Volume (spontaneous) Distribution')\n","plt.xlabel('Tidal Volume (spontaneous)')\n","plt.ylabel('Frequency')\n","plt.xlim(0, 10000)\n","\n","# Minute Volume\n","plt.subplot(1, 3, 3)\n","plt.hist(patient_data_df[patient_data_df['label'] == 'Minute Volume']['valuenum'], bins=50, color='red', alpha=0.7)\n","plt.title('Minute Volume Distribution')\n","plt.xlabel('Minute Volume')\n","plt.ylabel('Frequency')\n","plt.xlim(0, 50)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":592},"id":"uhNPTNXvJUv-","executionInfo":{"status":"ok","timestamp":1721512584400,"user_tz":-60,"elapsed":1343,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"37d52abf-29f7-4bcb-daa5-462422f0fb6e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x600 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Tidal volume (observed) has a large range whereas tidal volume (spontaneous) and minute volume have values centred around a smaller range.\n","\n","Nonetheless, only a small % of data was converted to NaN (approx 3%).\n","\n","These values will be imputed during the resampling and interpolation step, rather than prior. This is to encourage contextual interpolation of time series data rather than impute first and then interpolate which would be inonsistent and redundant."],"metadata":{"id":"unPim6MfJZTL"}},{"cell_type":"code","source":["# Save the train and test data for further preprocessing\n","train_data.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/07_data_preprocessing/01_feature_set_1/preprocessing_v2/03_train_data_standard_preprocess.parquet')\n","test_data.to_parquet('/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/07_data_preprocessing/01_feature_set_1/preprocessing_v2/03_test_data_standard_preprocess.parquet')"],"metadata":{"id":"X10OPqjLL3QO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We will now move on to specific processing of the data for LSTM model input."],"metadata":{"id":"Hn8tcuroLzcg"}}]}