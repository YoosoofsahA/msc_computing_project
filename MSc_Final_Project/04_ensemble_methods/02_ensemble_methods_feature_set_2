{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyMQ1lFoM+vFCvvAo4Jh/iON"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Ensemble Methods - Feature Sert 1**\n","\n","We have now trained 6 models for each of our sets of features. These models show some performance but still lack the ideal performance required in order for them to be deployed in clinical environments.\n","\n","The purpose of creating ensemble predictions is to determine whether combining the outputs of multiple base models can achieve better performance than the individual models\n","\n","As a final experiment, we will look at implementing a few ensemble methods to see if a combination of each of the models has better predictive performance than any of the models individually.\n","\n","The potential benefits of this are:\n","- Reduction in overfitting\n","- More robust\n","- Combine diverse model strengths (LSTM, TCN look at time dependencies where as LGBM looks at aggregate values over time)\n","- Models handle different types of data (static and dynamic)\n","- Enhanced generalisation\n","- Mitigation of individual model limitations"],"metadata":{"id":"LYCt5muEP_3V"}},{"cell_type":"markdown","source":["We will need to create ensemble methods for each feature set.\n","\n","We will investigate different revelant ensemble methods:\n","- Averaging\n","- Majority voting\n","- Stacking\n","- Potentially more complex methods e.g. Boosting, Bootstrapping"],"metadata":{"id":"-RcJFbDNXGfy"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"MKs4WI3_P84o","executionInfo":{"status":"ok","timestamp":1724953672146,"user_tz":-60,"elapsed":6172,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pickle\n","import json\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"-t40qX9JXsWw","executionInfo":{"status":"ok","timestamp":1724953699707,"user_tz":-60,"elapsed":22738,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"cf6690ac-f8f8-425e-c275-29e6887ac849","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["# **Step 1 - Collate predictions from each model**"],"metadata":{"id":"f5I8qYG-wY9t"}},{"cell_type":"code","source":["# Load model predictions\n","lstm_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/01_lstm_fused_decision/dynamic_data/best_models/predictions.npy')\n","lstm_static_and_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/01_lstm_fused_decision/static_and_dynamic/best_models/experiment_1/predictions.npy')\n","tcn_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/02_tcn_fused_decision/dynamic_data/best_models/experiment_1/predictions.npy')\n","tcn_static_and_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/02_tcn_fused_decision/static_and_dynamic/best_models/experiment_1/predictions.npy')\n","lgbm_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/03_lgbm_model/dynamic_data/best_models/predictions.npy')\n","lgbm_static_and_dynamic_predictions = np.load('/content/drive/MyDrive/MSc_Final_Project/03_model_development/02_feature_set_2/03_lgbm_model/static_and_dynamic/best_model/predictions.npy')\n","\n","# Print the shapes of all predictions\n","print(f\"LSTM Dynamic Predictions Shape: {lstm_dynamic_predictions.shape}\")\n","print(f\"LSTM Static and Dynamic Predictions Shape: {lstm_static_and_dynamic_predictions.shape}\")\n","print(f\"TCN Dynamic Predictions Shape: {tcn_dynamic_predictions.shape}\")\n","print(f\"TCN Static and Dynamic Predictions Shape: {tcn_static_and_dynamic_predictions.shape}\")\n","print(f\"LGBM Dynamic Predictions Shape: {lgbm_dynamic_predictions.shape}\")\n","print(f\"LGBM Static and Dynamic Predictions Shape: {lgbm_static_and_dynamic_predictions.shape}\")"],"metadata":{"id":"lUGdAT2z2Dx1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724953719095,"user_tz":-60,"elapsed":12524,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"5581aee6-79d4-44e8-cce9-082b123d62fe"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["LSTM Dynamic Predictions Shape: (941,)\n","LSTM Static and Dynamic Predictions Shape: (941,)\n","TCN Dynamic Predictions Shape: (941,)\n","TCN Static and Dynamic Predictions Shape: (941,)\n","LGBM Dynamic Predictions Shape: (941,)\n","LGBM Static and Dynamic Predictions Shape: (941,)\n"]}]},{"cell_type":"code","source":["# Print a sample of each\n","print(\"Sample of LSTM Dynamic Predictions:\")\n","print(lstm_dynamic_predictions[:5])\n","print(\"\\nSample of LSTM Static and Dynamic Predictions:\")\n","print(lstm_static_and_dynamic_predictions[:5])\n","print(\"\\nSample of TCN Dynamic Predictions:\")\n","print(tcn_dynamic_predictions[:5])\n","print(\"\\nSample of TCN Static and Dynamic Predictions:\")\n","print(tcn_static_and_dynamic_predictions[:5])\n","print(\"\\nSample of LGBM Dynamic Predictions:\")\n","print(lgbm_dynamic_predictions[:5])\n","print(\"\\nSample of LGBM Static and Dynamic Predictions:\")\n","print(lgbm_static_and_dynamic_predictions[:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5KarolMepV6F","executionInfo":{"status":"ok","timestamp":1723104828103,"user_tz":-60,"elapsed":256,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"76ddb9c6-b942-48a5-b7cf-34b025453f64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample of LSTM Dynamic Predictions:\n","[0.50165975 0.50165975 0.50165975 0.50165975 0.50165975]\n","\n","Sample of LSTM Static and Dynamic Predictions:\n","[0.3680537  0.4040262  0.32938054 0.40845096 0.26099807]\n","\n","Sample of TCN Dynamic Predictions:\n","[0.34174404 0.6269481  0.31288752 0.34917337 0.32099697]\n","\n","Sample of TCN Static and Dynamic Predictions:\n","[0.4668919  0.5418506  0.49018762 0.44435528 0.37742504]\n","\n","Sample of LGBM Dynamic Predictions:\n","[0.92710792 0.24823893 0.18555107 0.56039047 0.53316691]\n","\n","Sample of LGBM Static and Dynamic Predictions:\n","[0.7065115  0.45061812 0.33549698 0.55397579 0.69398738]\n"]}]},{"cell_type":"code","source":["# Combine all predictions into a single array\n","all_predictions = np.vstack([\n","    lstm_dynamic_predictions,\n","    lstm_static_and_dynamic_predictions,\n","    tcn_dynamic_predictions,\n","    tcn_static_and_dynamic_predictions,\n","    lgbm_dynamic_predictions,\n","    lgbm_static_and_dynamic_predictions\n","])\n","\n","all_predictions.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KgqfLVjpvRr","executionInfo":{"status":"ok","timestamp":1724953735435,"user_tz":-60,"elapsed":510,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"5947c636-3556-4b3e-b0eb-5254ddfbb985"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6, 941)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Load the true labels for the test set\n","test_labels_path = '/content/drive/MyDrive/MSc_Final_Project/02_data_analysis/mimic/data_analysis/datasets/08_model_input_data/02_feature_set_2/01_lstm_data/dynamic_data/low_frequency_test_labels_v1.npy'\n","test_labels = np.load(test_labels_path)\n","\n","# Print the shape of the test labels\n","print(f\"Test Labels Shape: {test_labels.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EUH2UpB6o6xE","executionInfo":{"status":"ok","timestamp":1724953741154,"user_tz":-60,"elapsed":4412,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"d9462c23-5a49-4fa2-bbf6-e8b7e836d7f3"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Labels Shape: (941,)\n"]}]},{"cell_type":"code","source":["test_labels.astype(int)"],"metadata":{"collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"EdkCao4rsfY9","executionInfo":{"status":"ok","timestamp":1723104886365,"user_tz":-60,"elapsed":488,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"bfa41e4a-1bdf-44ff-dc54-2117f5f9a4a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n","       0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n","       1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0,\n","       0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,\n","       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n","       0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n","       0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n","       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n","       1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n","       0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,\n","       1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\n","       1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,\n","       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1,\n","       1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,\n","       0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,\n","       1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n","       0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1,\n","       0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n","       0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,\n","       0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n","       0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,\n","       1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1,\n","       1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1,\n","       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,\n","       0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1,\n","       0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,\n","       1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1])"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["# **Step 2 - Apply Ensemble methods**"],"metadata":{"id":"DpjOz7pnplzh"}},{"cell_type":"markdown","source":["### **Average Predictions**\n","\n","Average the probabilities for each patient and evaluate on the test labels."],"metadata":{"id":"LCMS_a3SppbF"}},{"cell_type":"code","source":["# Compute the average prediction for each sample\n","ensemble_predictions = np.mean(all_predictions, axis=0)"],"metadata":{"id":"j0vcCOIHppDW","executionInfo":{"status":"ok","timestamp":1724953743876,"user_tz":-60,"elapsed":367,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["ensemble_predictions_df = pd.DataFrame(ensemble_predictions)\n","\n","ensemble_predictions_df.to_parquet('/content/drive/MyDrive/MSc_Final_Project/04_ensemble_methods/results/fs2_avg.parquet')"],"metadata":{"id":"cdnXFoGgQV89","executionInfo":{"status":"ok","timestamp":1724953795603,"user_tz":-60,"elapsed":369,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Define standard binary classification threshold of 0.5\n","threshold = 0.5\n","\n","ensemble_predictions_binary = (ensemble_predictions >= threshold).astype(int)"],"metadata":{"id":"72lb8TQm2Dve","executionInfo":{"status":"ok","timestamp":1724953745769,"user_tz":-60,"elapsed":375,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["ensemble_predictions_binary.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UIiE7qJatTBY","executionInfo":{"status":"ok","timestamp":1723104904119,"user_tz":-60,"elapsed":245,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"e8350934-1477-4ca5-d523-1cb6d66e90c5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(941,)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix"],"metadata":{"id":"NpK9l_zYqml5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate ensemble predictions\n","def evaluate_ensemble_predictions(ensemble_predictions, test_labels):\n","    # Ensure predictions and labels are binary and of the same type\n","    ensemble_predictions = np.array(ensemble_predictions).astype(int)\n","    test_labels = np.array(test_labels).astype(int)\n","\n","    # Evaluate the ensemble prediction against the test labels\n","    accuracy = accuracy_score(test_labels, ensemble_predictions)\n","    precision = precision_score(test_labels, ensemble_predictions)\n","    recall = recall_score(test_labels, ensemble_predictions)\n","    f1 = f1_score(test_labels, ensemble_predictions)\n","    roc_auc = roc_auc_score(test_labels, ensemble_predictions)\n","\n","    # Compute confusion matrix to derive specificity\n","    tn, fp, fn, tp = confusion_matrix(test_labels, ensemble_predictions).ravel()\n","    specificity = tn / (tn + fp)\n","\n","    # Print the metrics\n","    print(f'Accuracy: {accuracy:.4f}')\n","    print(f'Precision: {precision:.4f}')\n","    print(f'Recall (Sensitivity): {recall:.4f}')\n","    print(f'F1 Score: {f1:.4f}')\n","    print(f'ROC AUC: {roc_auc:.4f}')\n","    print(f'Specificity: {specificity:.4f}')"],"metadata":{"id":"cUanmjIcqOQq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate averaging prediction\n","evaluate_ensemble_predictions(ensemble_predictions_binary, test_labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YNTMaI3Aqo3a","executionInfo":{"status":"ok","timestamp":1723104923774,"user_tz":-60,"elapsed":247,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"5f4bf4db-e540-4773-cc2e-2fdb697587f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6684\n","Precision: 0.4835\n","Recall (Sensitivity): 0.1424\n","F1 Score: 0.2200\n","ROC AUC: 0.5340\n","Specificity: 0.9256\n"]}]},{"cell_type":"markdown","source":["### **Hard voting classifier**\n","\n","Each model hard votes for a class."],"metadata":{"id":"7ebVP9CDrTtf"}},{"cell_type":"code","source":["# Ensure all predictions are binary\n","lstm_dynamic_predictions_binary = (lstm_dynamic_predictions >= threshold).astype(int)\n","lstm_static_and_dynamic_predictions_binary = (lstm_static_and_dynamic_predictions >= threshold).astype(int)\n","tcn_dynamic_predictions_binary = (tcn_dynamic_predictions >= threshold).astype(int)\n","tcn_static_and_dynamic_predictions_binary = (tcn_static_and_dynamic_predictions >= threshold).astype(int)\n","lgbm_dynamic_predictions_binary = (lgbm_dynamic_predictions >= threshold).astype(int)\n","lgbm_static_and_dynamic_predictions_binary = (lgbm_static_and_dynamic_predictions >= threshold).astype(int)"],"metadata":{"id":"2JnbKWNnr5zH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["all_predictions_binary = np.vstack([\n","    lstm_dynamic_predictions_binary,\n","    lstm_static_and_dynamic_predictions_binary,\n","    tcn_dynamic_predictions_binary,\n","    tcn_static_and_dynamic_predictions_binary,\n","    lgbm_dynamic_predictions_binary,\n","    lgbm_static_and_dynamic_predictions_binary\n","]).astype(int)"],"metadata":{"id":"RqiQzAANsD6N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply hard voting\n","ensemble_predictions_hard = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=all_predictions_binary)\n","\n","# Evaluate the ensemble predictions\n","evaluate_ensemble_predictions(ensemble_predictions_hard, test_labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HFVBG797tRus","executionInfo":{"status":"ok","timestamp":1723104934168,"user_tz":-60,"elapsed":264,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"70218308-03ed-4d92-f910-98c44aae224b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6844\n","Precision: 0.5638\n","Recall (Sensitivity): 0.1715\n","F1 Score: 0.2630\n","ROC AUC: 0.5533\n","Specificity: 0.9351\n"]}]},{"cell_type":"markdown","source":["### **Stacking**\n","\n","\n","Stacking uses a meta-model to learn how to best combine the predictions from two or more base mdoels. This allows it to harness the capabilities of a range of models.\n","\n","\n","\n","Train Base Models: Multiple base models are trained on the training data. These models can be of different types (e.g., logistic regression, random forest, SVM). **- This has already been done with LSTM, TCN and LGBM**\n","\n","Generate Meta-Features: The predictions from the base models are used to create a new dataset. Each base model's prediction for each sample becomes a feature in this new dataset. This dataset is called the meta-features.\n","\n","Train Meta-Model: A meta-model (or level-2 model) is trained on the meta-features. The goal of the meta-model is to learn how to combine the base model predictions to make the final prediction.\n","\n","Make Final Predictions: The meta-model uses the meta-features (predictions from the base models) to make the final predictions."],"metadata":{"id":"9Ojx2kpVuAGA"}},{"cell_type":"markdown","source":["For this we will use the standard simple meta-model: Logistic Regression as linear models are often used as the meta-model."],"metadata":{"id":"nOmk3OpDvJwl"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"l3VTTQknvky2","executionInfo":{"status":"ok","timestamp":1724953814787,"user_tz":-60,"elapsed":768,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Combine predictions into a feature matrix for the meta-model\n","X_meta = np.vstack([\n","    lstm_dynamic_predictions,\n","    lstm_static_and_dynamic_predictions,\n","    tcn_dynamic_predictions,\n","    tcn_static_and_dynamic_predictions,\n","    lgbm_dynamic_predictions,\n","    lgbm_dynamic_predictions\n","]).T"],"metadata":{"id":"qCiBhxyZutQC","executionInfo":{"status":"ok","timestamp":1724953816746,"user_tz":-60,"elapsed":834,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Split meta features into training and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X_meta, test_labels, test_size=0.2, random_state=42)"],"metadata":{"id":"Unbj1H5yvn7P","executionInfo":{"status":"ok","timestamp":1724953817118,"user_tz":-60,"elapsed":2,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Define the meta-model\n","meta_model = LogisticRegression()"],"metadata":{"id":"mWxgKedRvwmZ","executionInfo":{"status":"ok","timestamp":1724953818467,"user_tz":-60,"elapsed":5,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Train the meta-model\n","meta_model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"EfLY17Wav1FB","executionInfo":{"status":"ok","timestamp":1724953818467,"user_tz":-60,"elapsed":4,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"d35b4fe6-03b8-44f4-aace-67f5164f2206"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["ensemble_predfctions_stacking_prob = meta_model.predict_proba(X_val)[:, 1]"],"metadata":{"id":"Dkm5xGBiQnsW","executionInfo":{"status":"ok","timestamp":1724953834090,"user_tz":-60,"elapsed":370,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["ensemble_predfctions_stacking_prob_df = pd.DataFrame(ensemble_predfctions_stacking_prob)\n","\n","ensemble_predfctions_stacking_prob_df.to_parquet('/content/drive/MyDrive/MSc_Final_Project/04_ensemble_methods/results/fs2_stacking.parquet')"],"metadata":{"id":"cP6e4cQ6QrVO","executionInfo":{"status":"ok","timestamp":1724953876399,"user_tz":-60,"elapsed":371,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# Predict using the validation data\n","ensemble_predictions_stacking = meta_model.predict(X_val)"],"metadata":{"id":"8a7N0VSGv4gQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate on the test labels\n","evaluate_ensemble_predictions(ensemble_predictions_stacking, y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lMn6fW-6v_Mi","executionInfo":{"status":"ok","timestamp":1723104947919,"user_tz":-60,"elapsed":318,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"329fc697-4e22-46c2-cd0a-fc2d992dd6f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7037\n","Precision: 0.6842\n","Recall (Sensitivity): 0.2063\n","F1 Score: 0.3171\n","ROC AUC: 0.5794\n","Specificity: 0.9524\n"]}]},{"cell_type":"markdown","source":["### **AdaBoost**\n","\n","Boosting framework to improve the performance of the ensemble model."],"metadata":{"id":"3edy0uL7wQhk"}},{"cell_type":"code","source":["from sklearn.ensemble import AdaBoostClassifier"],"metadata":{"id":"A3IDw6FrwdpK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["adaboost_model = AdaBoostClassifier(n_estimators=50, random_state=42)"],"metadata":{"id":"qmtt96Hhwe_O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train the AdaBoost model\n","adaboost_model.fit(X_train, y_train)\n","\n","# Predict\n","ensemble_predictions_adaboost = adaboost_model.predict(X_val)"],"metadata":{"id":"wLsSGW-Fwhol"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate ensemble predictions\n","evaluate_ensemble_predictions(ensemble_predictions_adaboost, y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wTob8k7XwnlI","executionInfo":{"status":"ok","timestamp":1723104957742,"user_tz":-60,"elapsed":2,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a7ff458c-44b5-4ee3-b5ab-98b4288bc3ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6614\n","Precision: 0.4839\n","Recall (Sensitivity): 0.2381\n","F1 Score: 0.3191\n","ROC AUC: 0.5556\n","Specificity: 0.8730\n"]}]},{"cell_type":"markdown","source":["### **Bagging**\n","\n","Reduces variance and helps avoid overfitting by averaging predictions over multiple models trained on different subsets."],"metadata":{"id":"JOvBIZ6tw4IO"}},{"cell_type":"code","source":["from sklearn.ensemble import BaggingClassifier"],"metadata":{"id":"n40Dczdww7id"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bagging_model = BaggingClassifier(n_estimators=50, random_state=42)"],"metadata":{"id":"uPz7v9kBw-dK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train and predict\n","bagging_model.fit(X_train, y_train)\n","ensemble_predictions_bagging = bagging_model.predict(X_val)"],"metadata":{"id":"tzsd1ARwxBR7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate\n","evaluate_ensemble_predictions(ensemble_predictions_bagging, y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MVQJv3ofxD2K","executionInfo":{"status":"ok","timestamp":1723104969751,"user_tz":-60,"elapsed":3,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"46c81d07-e7ac-4294-9783-fdf9377540f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6349\n","Precision: 0.4250\n","Recall (Sensitivity): 0.2698\n","F1 Score: 0.3301\n","ROC AUC: 0.5437\n","Specificity: 0.8175\n"]}]},{"cell_type":"markdown","source":["### **Optimal weights for each model**\n","\n","We can tune what weights applied to the predictions for each model provides the best performance on ROC AUC basis."],"metadata":{"id":"JZGIC3sVzWaF"}},{"cell_type":"code","source":["from scipy.optimize import differential_evolution\n","from sklearn.metrics import roc_auc_score"],"metadata":{"id":"4HOPE3UNzmQ_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define the objective function to minimize (negative ROC AUC)\n","def objective(weights):\n","    # Ensure weights sum to 1\n","    weights = np.array(weights)\n","    if np.sum(weights) != 1:\n","        weights = weights / np.sum(weights)\n","\n","    # Calculate the weighted average of predictions\n","    weighted_predictions = np.average(all_predictions, axis=0, weights=weights)\n","\n","    # Calculate the negative ROC AUC\n","    return -roc_auc_score(test_labels, weighted_predictions)\n","\n","# Bounds: Each weight is between 0 and 1\n","bounds = [(0, 1)] * all_predictions.shape[0]\n","\n","# Initial guess (equal weights)\n","initial_guess = [1 / all_predictions.shape[0]] * all_predictions.shape[0]\n","\n","# Optimize weights using differential evolution\n","result = differential_evolution(objective, bounds, strategy='best1bin', maxiter=1000, popsize=15, tol=1e-6, mutation=(0.5, 1), recombination=0.7, seed=42)\n","\n","# Get the best weights\n","best_weights = result.x\n","\n","# Calculate the final weighted predictions using the best weights\n","final_weighted_predictions = np.average(all_predictions, axis=0, weights=best_weights)"],"metadata":{"id":"_c45B450zZyX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the final weighted predictions\n","final_roc_auc = roc_auc_score(test_labels, final_weighted_predictions)"],"metadata":{"id":"5YC3iNSa0Zth"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Convert weighted predictions to binary labels using a threshold of 0.5\n","final_binary_predictions = (final_weighted_predictions > 0.5).astype(int)\n","\n","final_accuracy = accuracy_score(test_labels, final_binary_predictions)\n","final_precision = precision_score(test_labels, final_binary_predictions)\n","final_recall = recall_score(test_labels, final_binary_predictions)\n","final_f1 = f1_score(test_labels, final_binary_predictions)\n","tn, fp, fn, tp = confusion_matrix(test_labels, final_binary_predictions).ravel()\n","final_specificity = tn / (tn + fp)\n","\n","# Print all evaluation metrics\n","print(f'Optimal Weights: {best_weights}')\n","print(f'Final ROC AUC: {final_roc_auc:.4f}')\n","print(f'Final Accuracy: {final_accuracy:.4f}')\n","print(f'Final Precision: {final_precision:.4f}')\n","print(f'Final Recall (Sensitivity): {final_recall:.4f}')\n","print(f'Final F1 Score: {final_f1:.4f}')\n","print(f'Final Specificity: {final_specificity:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QNi0kbLF08Yg","executionInfo":{"status":"ok","timestamp":1723105017903,"user_tz":-60,"elapsed":255,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"8a091289-dbb6-4145-94a7-8df7da077014"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimal Weights: [0.62485707 0.92276928 0.00584654 0.29326958 0.00325947 0.04336703]\n","Final ROC AUC: 0.6718\n","Final Accuracy: 0.6971\n","Final Precision: 0.6000\n","Final Recall (Sensitivity): 0.2330\n","Final F1 Score: 0.3357\n","Final Specificity: 0.9241\n"]}]}]}