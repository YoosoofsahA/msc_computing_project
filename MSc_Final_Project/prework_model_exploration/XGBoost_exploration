{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNkoQTg5uJlbvFYT3WFDH5R"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **XGBoost**\n","\n","Extreme Gradient Boosting for faster computation and handling of large data sets.\n","\n","XGB handles missing values well."],"metadata":{"id":"1wDNpsnopBBo"}},{"cell_type":"markdown","source":["**Simple XBG model**"],"metadata":{"id":"QWJe_xnWqnqI"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"lMGqa1wMk9Ti","executionInfo":{"status":"ok","timestamp":1718014579224,"user_tz":-60,"elapsed":2,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","source":["Generate data"],"metadata":{"id":"GbVnemAHpQn7"}},{"cell_type":"code","source":["# Generate synthetic data\n","X, y = make_classification(n_samples=1000, n_features=20, n_informative=15, n_redundant=5, random_state=42)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"8lF_IavOpRrq","executionInfo":{"status":"ok","timestamp":1718014587192,"user_tz":-60,"elapsed":228,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["Initialise XGB model"],"metadata":{"id":"YOtkh_6cpj29"}},{"cell_type":"code","source":["!pip install xgboost"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IVtJTyWVplia","executionInfo":{"status":"ok","timestamp":1718014622382,"user_tz":-60,"elapsed":7488,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"6a7cea74-7f9f-480a-adba-820b3c3f69c1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.11.4)\n"]}]},{"cell_type":"code","source":["from xgboost import XGBClassifier"],"metadata":{"id":"O4-j83iBpsAQ","executionInfo":{"status":"ok","timestamp":1718014637678,"user_tz":-60,"elapsed":232,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')"],"metadata":{"id":"TVQPMgQBpvyx","executionInfo":{"status":"ok","timestamp":1718014752194,"user_tz":-60,"elapsed":232,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"id":"wFYkNF_HqMMn","executionInfo":{"status":"ok","timestamp":1718014764342,"user_tz":-60,"elapsed":1718,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"91d279fe-851f-4ec1-8535-a18d90e9d6f2"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric='logloss',\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["Make predictions"],"metadata":{"id":"ed_d_8heqRVF"}},{"cell_type":"code","source":["y_pred = model.predict(X_test)"],"metadata":{"id":"N8RdLdsMqSZJ","executionInfo":{"status":"ok","timestamp":1718014799130,"user_tz":-60,"elapsed":218,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b8mnHI5vqXZf","executionInfo":{"status":"ok","timestamp":1718014827750,"user_tz":-60,"elapsed":234,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"776bfaf6-e805-44b8-a319-5f7aba079754"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 91.50%\n"]}]},{"cell_type":"markdown","source":["**XGB model with cross validation**"],"metadata":{"id":"7ae9C3aQqqzF"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"00A4ZvP3qs0H","executionInfo":{"status":"ok","timestamp":1718014937653,"user_tz":-60,"elapsed":224,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Set the random seed for reproducibility\n","np.random.seed(42)\n","\n","# Number of samples and features\n","n_samples = 1000\n","n_features = 20\n","\n","# Generate features\n","X = np.random.randn(n_samples, n_features)\n","\n","# Generate labels (binary classification)\n","# For simplicity, we'll use a linear combination of features and some noise\n","coefficients = np.random.randn(n_features)\n","linear_combination = np.dot(X, coefficients)\n","noise = np.random.normal(0, 0.1, n_samples)\n","y = (linear_combination + noise > 0).astype(int)\n","\n","# Convert to pandas DataFrame for better handling\n","X = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(n_features)])\n","y = pd.Series(y, name='target')"],"metadata":{"id":"RIxSr9vzq46v","executionInfo":{"status":"ok","timestamp":1718014946099,"user_tz":-60,"elapsed":225,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"p7HOK5wBq8Pk","executionInfo":{"status":"ok","timestamp":1718014953956,"user_tz":-60,"elapsed":240,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["Define model and hyperparameter grid"],"metadata":{"id":"3GSKnlQNq9MM"}},{"cell_type":"code","source":["model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n","\n","param_grid = {\n","    'n_estimators': [50, 100, 200],\n","    'max_depth': [3, 4, 5],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'subsample': [0.8, 1.0],\n","    'colsample_bytree': [0.8, 1.0]\n","}"],"metadata":{"id":"1Drq52Eaq_GC","executionInfo":{"status":"ok","timestamp":1718015075704,"user_tz":-60,"elapsed":4,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["Perform grid search"],"metadata":{"id":"lgcxBlSqrnIn"}},{"cell_type":"code","source":["grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='accuracy', verbose=1, n_jobs=1)\n","\n","grid_search.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"id":"rbEswrtlroRB","executionInfo":{"status":"ok","timestamp":1718015359766,"user_tz":-60,"elapsed":140340,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"91c4201b-e637-43c1-9db4-af12a9e3b708"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 108 candidates, totalling 540 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric='logloss', feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate=...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=1,\n","             param_grid={'colsample_bytree': [0.8, 1.0],\n","                         'learning_rate': [0.01, 0.1, 0.2],\n","                         'max_depth': [3, 4, 5], 'n_estimators': [50, 100, 200],\n","                         'subsample': [0.8, 1.0]},\n","             scoring='accuracy', verbose=1)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric=&#x27;logloss&#x27;, feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate=...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=1,\n","             param_grid={&#x27;colsample_bytree&#x27;: [0.8, 1.0],\n","                         &#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                         &#x27;max_depth&#x27;: [3, 4, 5], &#x27;n_estimators&#x27;: [50, 100, 200],\n","                         &#x27;subsample&#x27;: [0.8, 1.0]},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric=&#x27;logloss&#x27;, feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate=...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=1,\n","             param_grid={&#x27;colsample_bytree&#x27;: [0.8, 1.0],\n","                         &#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                         &#x27;max_depth&#x27;: [3, 4, 5], &#x27;n_estimators&#x27;: [50, 100, 200],\n","                         &#x27;subsample&#x27;: [0.8, 1.0]},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Print the best parameters and best score\n","print(\"Best Parameters: \", grid_search.best_params_)\n","print(\"Best Cross-Validation Accuracy: \", grid_search.best_score_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zxsunmPRsjle","executionInfo":{"status":"ok","timestamp":1718015383608,"user_tz":-60,"elapsed":255,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"9daa223e-3c02-4d32-f3ad-2608f76d4848"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters:  {'colsample_bytree': 1.0, 'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 200, 'subsample': 0.8}\n","Best Cross-Validation Accuracy:  0.89875\n"]}]},{"cell_type":"code","source":["best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(X_test)"],"metadata":{"id":"EktPd-SCspLl","executionInfo":{"status":"ok","timestamp":1718015424956,"user_tz":-60,"elapsed":226,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Test Accuracy: {accuracy * 100:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ue4uAPyhswaZ","executionInfo":{"status":"ok","timestamp":1718015459736,"user_tz":-60,"elapsed":4,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"20fbc1df-90c2-4428-da96-1f7c5ab94c0c"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 88.00%\n"]}]},{"cell_type":"markdown","source":["**Multi-variate XGB classification**"],"metadata":{"id":"qBMKrBcBtIz8"}},{"cell_type":"code","source":["from sklearn.datasets import make_classification\n","\n","# Generate synthetic data\n","X, y = make_classification(n_samples=1000, n_features=20, n_informative=10, n_redundant=5, n_classes=3, random_state=42, shuffle=False)\n","\n","# Convert to pandas DataFrame for better handling\n","X = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(X.shape[1])])\n","y = pd.Series(y, name='target')\n"],"metadata":{"id":"odZDNK33tLoW","executionInfo":{"status":"ok","timestamp":1718016389466,"user_tz":-60,"elapsed":259,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"5Uo-Q5YowbKw","executionInfo":{"status":"ok","timestamp":1718016394930,"user_tz":-60,"elapsed":356,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Define the XGBoost model\n","model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')"],"metadata":{"id":"1uO_hQ-Lwc4H","executionInfo":{"status":"ok","timestamp":1718016406749,"user_tz":-60,"elapsed":331,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Define the hyperparameter grid\n","param_grid = {\n","    'n_estimators': [50, 100, 200],\n","    'max_depth': [3, 4, 5],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'subsample': [0.8, 1.0],\n","    'colsample_bytree': [0.8, 1.0]\n","}"],"metadata":{"id":"zZnPxiNjwfYT","executionInfo":{"status":"ok","timestamp":1718016414010,"user_tz":-60,"elapsed":230,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, scoring='accuracy', verbose=1, n_jobs=-1)\n","\n","# Fit the grid search to the data\n","grid_search.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"id":"jyfpezg4whWa","executionInfo":{"status":"ok","timestamp":1718016660404,"user_tz":-60,"elapsed":189004,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"cc3ddb76-753b-4bf0-d78a-fe6f10b7d3bd"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 108 candidates, totalling 324 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric='mlogloss', feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=-1,\n","             param_grid={'colsample_bytree': [0.8, 1.0],\n","                         'learning_rate': [0.01, 0.1, 0.2],\n","                         'max_depth': [3, 4, 5], 'n_estimators': [50, 100, 200],\n","                         'subsample': [0.8, 1.0]},\n","             scoring='accuracy', verbose=1)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric=&#x27;mlogloss&#x27;, feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=-1,\n","             param_grid={&#x27;colsample_bytree&#x27;: [0.8, 1.0],\n","                         &#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                         &#x27;max_depth&#x27;: [3, 4, 5], &#x27;n_estimators&#x27;: [50, 100, 200],\n","                         &#x27;subsample&#x27;: [0.8, 1.0]},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=3,\n","             estimator=XGBClassifier(base_score=None, booster=None,\n","                                     callbacks=None, colsample_bylevel=None,\n","                                     colsample_bynode=None,\n","                                     colsample_bytree=None, device=None,\n","                                     early_stopping_rounds=None,\n","                                     enable_categorical=False,\n","                                     eval_metric=&#x27;mlogloss&#x27;, feature_types=None,\n","                                     gamma=None, grow_policy=None,\n","                                     importance_type=None,\n","                                     interaction_constraints=None,\n","                                     learning_rate...\n","                                     max_leaves=None, min_child_weight=None,\n","                                     missing=nan, monotone_constraints=None,\n","                                     multi_strategy=None, n_estimators=None,\n","                                     n_jobs=None, num_parallel_tree=None,\n","                                     random_state=None, ...),\n","             n_jobs=-1,\n","             param_grid={&#x27;colsample_bytree&#x27;: [0.8, 1.0],\n","                         &#x27;learning_rate&#x27;: [0.01, 0.1, 0.2],\n","                         &#x27;max_depth&#x27;: [3, 4, 5], &#x27;n_estimators&#x27;: [50, 100, 200],\n","                         &#x27;subsample&#x27;: [0.8, 1.0]},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n","              feature_types=None, gamma=None, grow_policy=None,\n","              importance_type=None, interaction_constraints=None,\n","              learning_rate=None, max_bin=None, max_cat_threshold=None,\n","              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n","              max_leaves=None, min_child_weight=None, missing=nan,\n","              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Print the best parameters and best score\n","print(\"Best Parameters: \", grid_search.best_params_)\n","print(\"Best Cross-Validation Accuracy: \", grid_search.best_score_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XacVRDnyxvSL","executionInfo":{"status":"ok","timestamp":1718016741073,"user_tz":-60,"elapsed":297,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"317bd8c8-7ea7-47d9-f5ca-abd2837fb2cf"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters:  {'colsample_bytree': 1.0, 'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 200, 'subsample': 1.0}\n","Best Cross-Validation Accuracy:  0.809997841044559\n"]}]},{"cell_type":"code","source":["# Use the best model to make predictions\n","best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(X_test)\n","\n","# Evaluate the accuracy\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Test Accuracy: {accuracy * 100:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DLvy75MuxxTa","executionInfo":{"status":"ok","timestamp":1718016751868,"user_tz":-60,"elapsed":301,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"93f58e12-b9cd-493f-f052-843e27c86735"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 78.00%\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","# Print classification report\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gmSNSpIfxz9s","executionInfo":{"status":"ok","timestamp":1718016776211,"user_tz":-60,"elapsed":233,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"ec8dbf7b-3586-46ac-cb81-09182a3904de"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      0.66      0.73        65\n","           1       0.80      0.88      0.84        76\n","           2       0.73      0.78      0.75        59\n","\n","    accuracy                           0.78       200\n","   macro avg       0.78      0.77      0.77       200\n","weighted avg       0.78      0.78      0.78       200\n","\n"]}]},{"cell_type":"markdown","source":["Analyse feature importance"],"metadata":{"id":"fpaMZrbjyAif"}},{"cell_type":"code","source":["from xgboost import plot_importance\n","import matplotlib.pyplot as plt\n","\n","\n","plt.figure(figsize=(10, 8))\n","plot_importance(best_model, importance_type='gain')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"DxeoklPcyC5M","executionInfo":{"status":"ok","timestamp":1718016850566,"user_tz":-60,"elapsed":1782,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"78bf9fae-e081-4c26-f2d7-ddaee2695a91"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Use SHAP"],"metadata":{"id":"B9Wza6_nyPLq"}},{"cell_type":"code","source":["!pip install shap"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nWIskYCCyP9E","executionInfo":{"status":"ok","timestamp":1718016888229,"user_tz":-60,"elapsed":11717,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"bf6c12a7-607e-4197-c886-a59da7eff581"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting shap\n","  Downloading shap-0.45.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (540 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m540.5/540.5 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap) (1.11.4)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap) (1.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap) (2.0.3)\n","Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap) (4.66.4)\n","Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap) (24.0)\n","Collecting slicer==0.0.8 (from shap)\n","  Downloading slicer-0.0.8-py3-none-any.whl (15 kB)\n","Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap) (0.58.1)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap) (2.2.1)\n","Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap) (0.41.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap) (2024.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap) (3.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->shap) (1.16.0)\n","Installing collected packages: slicer, shap\n","Successfully installed shap-0.45.1 slicer-0.0.8\n"]}]},{"cell_type":"code","source":["import shap\n","\n","explainer = shap.Explainer(best_model, X_train)\n","\n","shap_values = explainer(X_test)\n","\n","shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"B2uLtxqKyVfm","executionInfo":{"status":"error","timestamp":1718016960345,"user_tz":-60,"elapsed":31920,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"3fff9f53-b883-4542-d0a9-a400601cd62a"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":[" 94%|=================== | 565/600 [00:28<00:01]       "]},{"output_type":"error","ename":"TypeError","evalue":"only integer scalar arrays can be converted to a scalar index","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-dbda5e8814bf>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mshap_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/plots/_beeswarm.py\u001b[0m in \u001b[0;36msummary_legacy\u001b[0;34m(shap_values, features, feature_names, max_display, plot_type, color, axis_color, title, alpha, show, sort, color_bar, plot_size, layered_violin_max_num_bins, class_names, class_inds, color_bar_label, cmap, show_values_in_legend, auto_size_plot, use_log_scale)\u001b[0m\n\u001b[1;32m    605\u001b[0m         summary_legacy(\n\u001b[1;32m    606\u001b[0m             \u001b[0mproj_shap_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort_inds\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 607\u001b[0;31m             \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature_names\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msort_inds\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    608\u001b[0m             \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor_bar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    609\u001b[0m             \u001b[0mplot_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: only integer scalar arrays can be converted to a scalar index"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1150x660 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Need to map feature names properly"],"metadata":{"id":"B3othhfNyxfl"}},{"cell_type":"code","source":["# Ensure the feature names are correctly passed to the summary plot\n","shap.summary_plot(shap_values, X_test, feature_names=X.columns.tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"2MVmQPOfyxPD","executionInfo":{"status":"error","timestamp":1718017015041,"user_tz":-60,"elapsed":668,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"cd2c7a39-c468-4187-ab06-04b8b6dfd2df"},"execution_count":38,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"only integer scalar arrays can be converted to a scalar index","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-c856465aa5fe>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Ensure the feature names are correctly passed to the summary plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/plots/_beeswarm.py\u001b[0m in \u001b[0;36msummary_legacy\u001b[0;34m(shap_values, features, feature_names, max_display, plot_type, color, axis_color, title, alpha, show, sort, color_bar, plot_size, layered_violin_max_num_bins, class_names, class_inds, color_bar_label, cmap, show_values_in_legend, auto_size_plot, use_log_scale)\u001b[0m\n\u001b[1;32m    605\u001b[0m         summary_legacy(\n\u001b[1;32m    606\u001b[0m             \u001b[0mproj_shap_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort_inds\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 607\u001b[0;31m             \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature_names\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msort_inds\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    608\u001b[0m             \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor_bar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    609\u001b[0m             \u001b[0mplot_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: only integer scalar arrays can be converted to a scalar index"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1150x660 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAKsAAAItCAYAAABGnor1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWMElEQVR4nO3af2xV9f3H8VdbuLeYcG91HbctKzRo/DF/0FnT5uIMcblbEw0bf4luqY1ROpMuGTSbtANpOpyXGGdISB0bGXTJzIoj4pbRlLkbiJmrISk0QSositrOeC90C+ciSjtvP98/Fu++XVvoqb0tb/p8JOeP++Fz7vmcnCeXew8nzznnBBiQP9cLAKaKWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhhu9YX3/9da1Zs0ZlZWXKy8vTq6++esV9jhw5orvvvlvBYFA33XSTOjo6prFUzHe+Y7148aJWrlyp9vb2Kc1/77339OCDD+r+++9XX1+fNmzYoCeeeEKHDh3yvVjMb3lf5EGWvLw8HThwQGvXrp10zqZNm3Tw4EG99dZb2bGHH35Y58+fV3d393QPjXloQa4P0NPTo1gsNmastrZWGzZsmHSf4eFhDQ8PZ1+Pjo7qX//6l770pS8pLy8vV0vFDHHO6cKFCyorK1N+/sz9LMp5rMlkUpFIZMxYJBJROp3Wp59+qkWLFo3bJx6Pq62tLddLQ44NDg7qK1/5yoy9X85jnY6WlhY1NTVlX3uep2XLlmlwcFChUGgOV4apSKfTKi8v1+LFi2f0fXMea0lJiVKp1JixVCqlUCg04aeqJAWDQQWDwXHjoVCIWA2Z6a9sOb/PGo1GlUgkxoy99tprikajuT40rjG+Y/3444/V19envr4+Sf+5NdXX16eBgQFJ//kn/NFHH83Of/LJJ3XmzBk99dRTOnXqlF588UW9/PLL2rhx48ycAeYP59Phw4edpHFbfX29c865+vp6t3r16nH7VFZWukAg4FasWOH27t3r65ie5zlJzvM8v8vFHMjV9fpC91lnSzqdVjgclud5fGc1IFfXi2cDYAaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGdOKtb29XRUVFSosLFRNTY2OHj162fk7duzQLbfcokWLFqm8vFwbN27UpUuXprVgzGPOp87OThcIBNyePXvcyZMn3fr1611RUZFLpVITzn/ppZdcMBh0L730knvvvffcoUOHXGlpqdu4ceOUj+l5npPkPM/zu1zMgVxdL9+xVldXu8bGxuzrTCbjysrKXDwen3B+Y2Oj+8Y3vjFmrKmpyd17771TPiax2pKr6+Xra8DIyIh6e3sVi8WyY/n5+YrFYurp6Zlwn1WrVqm3tzf7VeHMmTPq6urSAw88MOlxhoeHlU6nx2zAAj+Th4aGlMlkFIlExoxHIhGdOnVqwn2++93vamhoSF//+tflnNNnn32mJ598Uj/5yU8mPU48HldbW5ufpWEeyPndgCNHjujZZ5/Viy++qGPHjumVV17RwYMHtW3btkn3aWlpked52W1wcDDXy4QBvj5Zi4uLVVBQoFQqNWY8lUqppKRkwn2efvpp1dXV6YknnpAk3Xnnnbp48aIaGhq0efNm5eeP//sSDAYVDAb9LA3zgK9P1kAgoKqqKiUSiezY6OioEomEotHohPt88skn44IsKCiQJDnn/K4X85nfX2SdnZ0uGAy6jo4O19/f7xoaGlxRUZFLJpPOOefq6upcc3Nzdn5ra6tbvHix+93vfufOnDnj/vznP7sbb7zRPfTQQ1M+JncDbMnV9fL1NUCS1q1bp3Pnzmnr1q1KJpOqrKxUd3d39kfXwMDAmE/SLVu2KC8vT1u2bNGHH36oL3/5y1qzZo1+9rOfzdTfN8wTec5d/f8Wp9NphcNheZ6nUCg018vBFeTqevFsAMwgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmDGtWNvb21VRUaHCwkLV1NTo6NGjl51//vx5NTY2qrS0VMFgUDfffLO6urqmtWDMXwv87rBv3z41NTVp165dqqmp0Y4dO1RbW6vTp09ryZIl4+aPjIzom9/8ppYsWaL9+/dr6dKl+uCDD1RUVDQT68d84nyqrq52jY2N2deZTMaVlZW5eDw+4fxf/OIXbsWKFW5kZMTvobI8z3OSnOd5034PzJ5cXS9fXwNGRkbU29urWCyWHcvPz1csFlNPT8+E+/zxj39UNBpVY2OjIpGI7rjjDj377LPKZDKTHmd4eFjpdHrMBviKdWhoSJlMRpFIZMx4JBJRMpmccJ8zZ85o//79ymQy6urq0tNPP62f//zneuaZZyY9TjweVzgczm7l5eV+lolrVM7vBoyOjmrJkiX61a9+paqqKq1bt06bN2/Wrl27Jt2npaVFnudlt8HBwVwvEwb4+oFVXFysgoICpVKpMeOpVEolJSUT7lNaWqqFCxeqoKAgO3bbbbcpmUxqZGREgUBg3D7BYFDBYNDP0jAP+PpkDQQCqqqqUiKRyI6Njo4qkUgoGo1OuM+9996rd955R6Ojo9mxv//97yotLZ0wVGBSfn+RdXZ2umAw6Do6Olx/f79raGhwRUVFLplMOuecq6urc83Nzdn5AwMDbvHixe4HP/iBO336tPvTn/7klixZ4p555pkpH5O7Abbk6nr5vs+6bt06nTt3Tlu3blUymVRlZaW6u7uzP7oGBgaUn//fD+zy8nIdOnRIGzdu1F133aWlS5fqhz/8oTZt2jRTf98wT+Q559xcL+JK0um0wuGwPM9TKBSa6+XgCnJ1vXg2AGYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmDGtWNvb21VRUaHCwkLV1NTo6NGjU9qvs7NTeXl5Wrt27XQOi3nOd6z79u1TU1OTWltbdezYMa1cuVK1tbU6e/bsZfd7//339aMf/Uj33XfftBeL+c13rC+88ILWr1+vxx57TF/96le1a9cuXXfdddqzZ8+k+2QyGX3ve99TW1ubVqxY8YUWjPnLV6wjIyPq7e1VLBb77xvk5ysWi6mnp2fS/X76059qyZIlevzxx6d0nOHhYaXT6TEb4CvWoaEhZTIZRSKRMeORSETJZHLCff7617/q17/+tXbv3j3l48TjcYXD4exWXl7uZ5m4RuX0bsCFCxdUV1en3bt3q7i4eMr7tbS0yPO87DY4OJjDVcKKBX4mFxcXq6CgQKlUasx4KpVSSUnJuPnvvvuu3n//fa1ZsyY7Njo6+p8DL1ig06dP68Ybbxy3XzAYVDAY9LM0zAO+PlkDgYCqqqqUSCSyY6Ojo0okEopGo+Pm33rrrTpx4oT6+vqy27e//W3df//96uvr4593+OLrk1WSmpqaVF9fr3vuuUfV1dXasWOHLl68qMcee0yS9Oijj2rp0qWKx+MqLCzUHXfcMWb/oqIiSRo3DlyJ71jXrVunc+fOaevWrUomk6qsrFR3d3f2R9fAwIDy8/mPMcy8POecm+tFXEk6nVY4HJbneQqFQnO9HFxBrq4XH4Ewg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscKMacXa3t6uiooKFRYWqqamRkePHp107u7du3Xffffp+uuv1/XXX69YLHbZ+cBkfMe6b98+NTU1qbW1VceOHdPKlStVW1urs2fPTjj/yJEjeuSRR3T48GH19PSovLxc3/rWt/Thhx9+4cVjnnE+VVdXu8bGxuzrTCbjysrKXDwen9L+n332mVu8eLH7zW9+M+Vjep7nJDnP8/wuF3MgV9fL1yfryMiIent7FYvFsmP5+fmKxWLq6emZ0nt88skn+ve//60bbrhh0jnDw8NKp9NjNsBXrENDQ8pkMopEImPGI5GIksnklN5j06ZNKisrGxP8/4rH4wqHw9mtvLzczzJxjZrVuwHbt29XZ2enDhw4oMLCwknntbS0yPO87DY4ODiLq8TVaoGfycXFxSooKFAqlRoznkqlVFJSctl9n3/+eW3fvl1/+ctfdNddd112bjAYVDAY9LM0zAO+PlkDgYCqqqqUSCSyY6Ojo0okEopGo5Pu99xzz2nbtm3q7u7WPffcM/3VYn7z+4uss7PTBYNB19HR4fr7+11DQ4MrKipyyWTSOedcXV2da25uzs7fvn27CwQCbv/+/e6jjz7KbhcuXJjyMbkbYEuurpfvWJ1zbufOnW7ZsmUuEAi46upq9+abb2b/bPXq1a6+vj77evny5U7SuK21tXXKxyNWW3J1vfKcc27OPtanKJ1OKxwOy/M8hUKhuV4OriBX14tnA2AGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGEGscIMYoUZxAoziBVmECvMIFaYQawwg1hhBrHCDGKFGcQKM4gVZhArzCBWmEGsMINYYQaxwoxpxdre3q6KigoVFhaqpqZGR48evez83//+97r11ltVWFioO++8U11dXdNaLOY337Hu27dPTU1Nam1t1bFjx7Ry5UrV1tbq7NmzE87/29/+pkceeUSPP/64jh8/rrVr12rt2rV66623vvDiMc84n6qrq11jY2P2dSaTcWVlZS4ej084/6GHHnIPPvjgmLGamhr3/e9/f8rH9DzPSXKe5/ldLuZArq7XAj9hj4yMqLe3Vy0tLdmx/Px8xWIx9fT0TLhPT0+PmpqaxozV1tbq1VdfnfQ4w8PDGh4ezr72PE+SlE6n/SwXc+Tz6+Scm9H39RXr0NCQMpmMIpHImPFIJKJTp05NuE8ymZxwfjKZnPQ48XhcbW1t48bLy8v9LBdz7J///KfC4fCMvZ+vWGdLS0vLmE/j8+fPa/ny5RoYGJjRk59r6XRa5eXlGhwcVCgUmuvlzBjP87Rs2TLdcMMNM/q+vmItLi5WQUGBUqnUmPFUKqWSkpIJ9ykpKfE1X5KCwaCCweC48XA4fE1d1M+FQqFr8rzy82f2zqivdwsEAqqqqlIikciOjY6OKpFIKBqNTrhPNBodM1+SXnvttUnnA5Py+4uss7PTBYNB19HR4fr7+11DQ4MrKipyyWTSOedcXV2da25uzs5/44033IIFC9zzzz/v3n77bdfa2uoWLlzoTpw4MeVjXqt3Azgvf3zH6pxzO3fudMuWLXOBQMBVV1e7N998M/tnq1evdvX19WPmv/zyy+7mm292gUDA3X777e7gwYO+jnfp0iXX2trqLl26NJ3lXrU4L3/ynJvh+wtAjvBsAMwgVphBrDCDWGHGVRPrtfrYoZ/z6ujoUF5e3pitsLBwFlc7Na+//rrWrFmjsrIy5eXlXfY5j88dOXJEd999t4LBoG666SZ1dHT4P/CM3luYps7OThcIBNyePXvcyZMn3fr1611RUZFLpVITzn/jjTdcQUGBe+6551x/f7/bsmWL73u3s8Hvee3du9eFQiH30UcfZbfP719fTbq6utzmzZvdK6+84iS5AwcOXHb+mTNn3HXXXeeamppcf3+/27lzpysoKHDd3d2+jntVxDoXjx3OBr/ntXfvXhcOh2dpdTNjKrE+9dRT7vbbbx8ztm7dOldbW+vrWHP+NeDzxw5jsVh2bCqPHf7/+dJ/HjucbP5cmM55SdLHH3+s5cuXq7y8XN/5znd08uTJ2VhuTs3U9ZrzWC/32OFkjxFO57HD2Tad87rlllu0Z88e/eEPf9Bvf/tbjY6OatWqVfrHP/4xG0vOmcmuVzqd1qeffjrl97kqHxGcr6LR6JgHfFatWqXbbrtNv/zlL7Vt27Y5XNnVYc4/WWfrscPZNp3z+l8LFy7U1772Nb3zzju5WOKsmex6hUIhLVq0aMrvM+exXquPHU7nvP5XJpPRiRMnVFpamqtlzooZu15+f/3lwlw8djgb/J5XW1ubO3TokHv33Xddb2+ve/jhh11hYaE7efLkXJ3ChC5cuOCOHz/ujh8/7iS5F154wR0/ftx98MEHzjnnmpubXV1dXXb+57eufvzjH7u3337btbe327115dzsP3Y4W/yc14YNG7JzI5GIe+CBB9yxY8fmYNWXd/jwYSdp3Pb5udTX17vVq1eP26eystIFAgG3YsUKt3fvXt/H5RFBmDHn31mBqSJWmEGsMINYYQaxwgxihRnECjOIFWYQK8wgVphBrDCDWGHG/wH9BtU8LGvejAAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Since SHAP values for multi-class classification return a list of SHAP values for each class, you need to plot them separately."],"metadata":{"id":"0KNx1Fsoy9XT"}},{"cell_type":"code","source":["# Loop through each class and plot SHAP summary plot\n","for i in range(len(shap_values)):\n","    print(f\"Class {i} SHAP Summary Plot\")\n","    shap.summary_plot(shap_values[i], X_test, feature_names=X.columns.tolist())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":501},"id":"BN-UNF3Wy9Jr","executionInfo":{"status":"error","timestamp":1718017060914,"user_tz":-60,"elapsed":245,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"cdb44d47-f239-4419-c503-9470ffca1c47"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Class 0 SHAP Summary Plot\n"]},{"output_type":"error","ename":"AssertionError","evalue":"The shape of the shap_values matrix does not match the shape of the provided data matrix.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-3de4b14364d4>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Class {i} SHAP Summary Plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/plots/_beeswarm.py\u001b[0m in \u001b[0;36msummary_legacy\u001b[0;34m(shap_values, features, feature_names, max_display, plot_type, color, axis_color, title, alpha, show, sort, color_bar, plot_size, layered_violin_max_num_bins, class_names, class_inds, color_bar_label, cmap, show_values_in_legend, auto_size_plot, use_log_scale)\u001b[0m\n\u001b[1;32m    553\u001b[0m                           \u001b[0;34m\"constant offset? Of so just pass shap_values[:,:-1].\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    554\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 555\u001b[0;31m             \u001b[0;32massert\u001b[0m \u001b[0mnum_features\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape_msg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    556\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfeature_names\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: The shape of the shap_values matrix does not match the shape of the provided data matrix."]}]},{"cell_type":"markdown","source":["The error you're encountering suggests a mismatch between the SHAP values and the feature matrix. For multi-class classification, SHAP values need to be handled differently. Let's correct this by ensuring we correctly extract and plot the SHAP values for multi-class classification."],"metadata":{"id":"CkbltNqxzIjL"}},{"cell_type":"code","source":["import shap\n","\n","# Assuming the best model is already found and fitted\n","best_model = grid_search.best_estimator_\n","\n","# Initialize the SHAP explainer\n","explainer = shap.TreeExplainer(best_model)\n"],"metadata":{"id":"wQd9EmpezItP","executionInfo":{"status":"ok","timestamp":1718017121753,"user_tz":-60,"elapsed":609,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# Calculate SHAP values\n","shap_values = explainer.shap_values(X_test)\n"],"metadata":{"id":"1yRw353vzOzw","executionInfo":{"status":"ok","timestamp":1718017131386,"user_tz":-60,"elapsed":1248,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":["For multi-class classification, SHAP values return a list where each element corresponds to a class. We'll plot the SHAP summary plot for each class separately."],"metadata":{"id":"5PxdiWWTzSdg"}},{"cell_type":"code","source":["# Loop through each class and plot SHAP summary plot\n","for i in range(len(shap_values)):\n","    print(f\"Class {i} SHAP Summary Plot\")\n","    shap.summary_plot(shap_values[i], X_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"yAetHSrDzTsI","executionInfo":{"status":"error","timestamp":1718017208490,"user_tz":-60,"elapsed":278,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"1e30fa33-189e-43e4-b122-e35a8037ec52"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Class 0 SHAP Summary Plot\n"]},{"output_type":"error","ename":"AssertionError","evalue":"The shape of the shap_values matrix does not match the shape of the provided data matrix.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-9e768b3fae1b>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Class {i} SHAP Summary Plot\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/plots/_beeswarm.py\u001b[0m in \u001b[0;36msummary_legacy\u001b[0;34m(shap_values, features, feature_names, max_display, plot_type, color, axis_color, title, alpha, show, sort, color_bar, plot_size, layered_violin_max_num_bins, class_names, class_inds, color_bar_label, cmap, show_values_in_legend, auto_size_plot, use_log_scale)\u001b[0m\n\u001b[1;32m    553\u001b[0m                           \u001b[0;34m\"constant offset? Of so just pass shap_values[:,:-1].\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    554\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 555\u001b[0;31m             \u001b[0;32massert\u001b[0m \u001b[0mnum_features\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape_msg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    556\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfeature_names\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: The shape of the shap_values matrix does not match the shape of the provided data matrix."]}]},{"cell_type":"code","source":["shap_values.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RyBL3IkZzkSH","executionInfo":{"status":"ok","timestamp":1718017223310,"user_tz":-60,"elapsed":4,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"1cab56d5-fdd8-4139-aa35-7c1a984cef28"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(200, 20, 3)"]},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","source":["# **XGB Kaggle Tutorial**\n","\n","Taken from: https://www.kaggle.com/code/robikscube/tutorial-time-series-forecasting-with-xgboost/notebook"],"metadata":{"id":"WYq9GMlGzuH6"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JX6tUc6T0A6x","executionInfo":{"status":"ok","timestamp":1718017374581,"user_tz":-60,"elapsed":16501,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"1f114149-a3e2-41f7-8ba8-634533011d3f"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np"],"metadata":{"id":"hkPJiOuz0SVu","executionInfo":{"status":"ok","timestamp":1718017415516,"user_tz":-60,"elapsed":270,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["pjme = pd.read_csv('/content/drive/MyDrive/MSc_Final_Project/model_exploration/practice_data/PJME_hourly.csv', index_col=[0], parse_dates=[0])"],"metadata":{"id":"a0t_GIkU0VyL","executionInfo":{"status":"ok","timestamp":1718017480755,"user_tz":-60,"elapsed":797,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["pjme.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9z2aSJRw0mfV","executionInfo":{"status":"ok","timestamp":1718017493198,"user_tz":-60,"elapsed":247,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"1b54ce60-5443-4b97-8a5a-ce71fb7850ca"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 145366 entries, 2002-12-31 01:00:00 to 2018-01-02 00:00:00\n","Data columns (total 1 columns):\n"," #   Column   Non-Null Count   Dtype  \n","---  ------   --------------   -----  \n"," 0   PJME_MW  145366 non-null  float64\n","dtypes: float64(1)\n","memory usage: 2.2 MB\n"]}]},{"cell_type":"code","source":["color_pal = [\"#F8766D\", \"#D39200\", \"#93AA00\", \"#00BA38\", \"#00C19F\", \"#00B9E3\", \"#619CFF\", \"#DB72FB\"]\n","_ = pjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"id":"IxQXk1tv04Ji","executionInfo":{"status":"ok","timestamp":1718017565247,"user_tz":-60,"elapsed":5973,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"467b594c-f37f-4e6a-cf6d-cb5bf4ca6f73"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Train/Test split:\n","\n","Cut off data after 2015 for test data"],"metadata":{"id":"yEbdfvca07Xh"}},{"cell_type":"code","source":["split_date = '01-Jan-2015'\n","pjme_train=pjme.loc[pjme.index <= split_date].copy()\n","pjme_test = pjme.loc[pjme.index > split_date].copy()\n","\n","\n","_ = pjme_test \\\n","    .rename(columns={'PJME_MW': 'TEST SET'}) \\\n","    .join(pjme_train.rename(columns={'PJME_MW': 'TRAINING SET'}), how='outer') \\\n","    .plot(figsize=(15,5), title='PJM East', style='.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"id":"Y35fVWcR0_I6","executionInfo":{"status":"ok","timestamp":1718017637534,"user_tz":-60,"elapsed":6439,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"45f825f5-ae69-4776-b8e7-2009936d85ba"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABNQAAAG5CAYAAABGGmmqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOydeXhU1fnHv5NASAgwYU9IAkR2ZDMREHBlKVqLC2gR2rpUbWvdl1q0rVLtr9DWvaK2ahVaRRRQUVFAEEF2EgJhh5CQZAhLSDJACASS+f1xucks99z1nDtzZ97P8/AMucu5Z2bu3Hvue77v93X5fD4fCIIgCIIgCIIgCIIgCILQRVy4O0AQBEEQBEEQBEEQBEEQToICagRBEARBEARBEARBEARhAAqoEQRBEARBEARBEARBEIQBKKBGEARBEARBEARBEARBEAaggBpBEARBEARBEARBEARBGIACagRBEARBEARBEARBEARhAAqoEQRBEARBEARBEARBEIQBKKBGEARBEARBEARBEARBEAaggBpBEARBEARBEARBEARBGIACagRBEARBEARBEARBEARhAAqoEQRBEARBhJH3338fLper8V9iYiJ69+6NBx54AEeOHGncbuXKlXC5XJg/f77ivj/88ENI2z6fD5mZmXC5XPjJT36i2Zerr746oC/+//r27cvnDQexePFiTJ8+XUjbBEEQBEEQomgW7g4QBEEQBEEQwHPPPYesrCycOXMGP/zwA958800sXrwY27dvR8uWLVX3TUxMxIcffojLL788YPn333+PsrIytGjRQnc/MjIyMGPGjJDlbrdbdxtGWLx4MWbNmkVBNYIgCIIgHAUF1AiCIAiCICKA6667DpdeeikA4J577kH79u3x0ksv4fPPP8eUKVNU9/3xj3+MTz75BK+99hqaNWsa3n344YfIyclBRUWF7n643W78/Oc/N/cmCIIgCIIgYgRK+SQIgiAIgohARo8eDQAoKirS3HbKlCk4fvw4li1b1risrq4O8+fPx9SpU7n37eDBg/jtb3+LPn36ICkpCe3bt8ett96K4uLigO3OnTuHP//5z+jVqxcSExPRvn17XH755Y39vPPOOzFr1iwACEgvJQiCIAiCiHRIoUYQBEEQBBGBFBYWAgDat2+vuW337t0xYsQIzJ07F9dddx0A4Ouvv4bX68Vtt92G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oW/fvlzbJAgizJyuZK87edi+fhAEQdhB5nCFhS4gc5jtXSEIgiAIwl5IoSaYyUO74sreHVFccRrdO7SMmGDa8ePHcfhw4MNtSkoKEhMTccstt2DUqFEYOXIkUlNTUVRUhKeeegq9e/dG3759TR0vPz8fzz77LH7xi1+gf//+SEhIwPfff4///Oc/+P3vfx+wbXV1dUjfWrdujeRklVQygiAig5bt2Ov2LgEycuzrC0EQRFggv0iCIAiCiAUooGYDae6kiAmkyYwdOzZk2dy5c3Hbbbdh/PjxmDt3LmbMmAGv14vU1FSMHj0a06dPR7Nm5k6ZjIwMdO/eHX/+859RXFwMl8vV+Pejjz4asO1dd90Vsv+MGTMwbdo0U8cmCMJGFNUaF2jV2b5+EARB2MEeRtGmPd8Aw+62ty8EQRAEQdiK4ZRPj8eDn//852jfvj2SkpIwcOBAbN68uXG9z+fDM888g7S0NCQlJWHs2LHYt29fQBuVlZX42c9+hjZt2iAlJQV33303Tp06FbDNtm3bcMUVVyAxMRGZmZn4+9//HtKXTz75BH379kViYiIGDhyIxYsXG307Ucudd96J6urqkOXdu3eHz+dT/HfbbbcBAO69916sWLECR48exdmzZ3Hw4EG899576Natm+7jBNOhQwe8+uqrKCgowMmTJ3HixAls27YNjz/+OOLimk5DVt+Ugmk+nw833XST7s+EIAgbcKcD455TXkceagRBRBunjigvr2EsJwiCIAgiajAUUKuqqsKoUaPQvHlzfP3119i5cydefPFFtG3btnGbv//973jttdfw1ltvYcOGDUhOTsb48eNx5syZxm1+9rOfYceOHVi2bBm+/PJLrFq1Cr/61a8a1584cQI/+tGP0K1bN+Tm5uIf//gHpk+fjn//+9+N26xduxZTpkzB3XffjS1btuCmm27CTTfdhO3bt1v5PAiCIAirjHoYyLoqcNngqVKwjSAIIprozZgo6DXe3n4QBEEQBGE7Lp/Pp9voYdq0aVizZg1Wr16tuN7n86FLly54/PHH8cQTTwAAvF4vOnfujPfffx+33XYbdu3ahf79+2PTpk249NJLAQDffPMNfvzjH6OsrAxdunTBm2++iT/84Q84fPgwEhISGo/92WefYffu3QCAyZMno6amBl9++WXj8S+77DIMGTIEb731lq73c+LECbjd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lTBHZZHy8irGcqeTN0eqaDl7gvQanHEgTzjqmHiMOtzpQNYVsRNElIlViweCIAiiEQqoiaRdj6YZSxlXfET4CGVmZqJXr164+eab8de//hU333xzYypkfX09Zs+eja+++grNmjVDs2bN0LJlS1RWVuouTtCjRw/ce++9mDZtmi5Vmz8zZ85sDPj506tXLwDAnj17GpfFx8ejZ8+e6NmzJ5o107YETExMxLhx4/CnP/0Ja9euxZ133olnn302YJsOHTo0tin/S0oiBQahk2g1pOdBcudw98AevB5g0UOByxY9FBHqZEtEayorYY4ug5WXpzGWO5nG37Q8nvE1/ablbAT/dRGSjUAQBEEQhFgooCYSdzow4VUpiAZIrxNeibgZvFtuuQXNmjVrTJdcvHgxTp48iS1btgSotObOnYuFCxeiurpaV7vPPPMM9u7di48++shQf4YNG4aJEydi2rRpAcsvueQS9O3bFy+88AIaGhoYexujf//+qKmhQAfBkVhV8bBSXRtxAX2utaUrYYeq/hGxwOApjOW32dsPO1D7TUdwNoJtKKXCEgRBEEQMQFU+RZN9O9BjjDSwandRxAXTAMm77KGHHsL06dPx61//Gu+++y6uv/56DB4cOMvcv39/PProo/jggw9w//33a7bbuXNnPPbYY/jHP/5huE//93//h4svvjhAdeZyufDee+9h3LhxGDVqFJ566in069cP586dw6pVq3Ds2DHEx8crtnf8+HHceuut+OUvf4lBgwahdevW2Lx5M/7+97/jxhtvDNj25MmTOHz4cMCyli1bok2bNobfBxGDsFQ81aWSh5jTfbRYsFJdZQZPicjrHzf8qzlHKyXrlJeXro/e85pg404Hbvhnk1esK06aRIzG37laRVOWPybLczDayJsTeg7Eko8aQRAEEdOQQs0OHOAtcccdd+DcuXP45z//ia+++gqTJk0K2SYuLg4333wz3n33Xd3tPvHEE2jVqpXh/vTu3Ru//OUvcebMmYDll112GXJzc9GnTx/cf//96N+/P0aOHIm5c+fi5Zdfxn333afYXqtWrTB8+HC8/PLLuPLKKzFgwAD86U9/wr333ovXX389YNtnnnkGaWlpAf+efPJJw++BiFEycoCM4aHLN7wJvDMa+FT5HHU8WlU+t82LXvVCsLeStxRRWfWPUj6JYLJvBx65YEj/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iIgUYEKNiIiIiIjkiElQdjsREVGQYEKNiIiIiIjkSO0DwOJ6m8XCVT6JiCjoMaFGRERERERyWJOBMS8DlprTEksYcO3LttuJiIiCWCPZARARERERkYnlFgLthgBn9gIJbZlMIyKiBoEJNSIiIiIiksuazEQaERE1KJzySUREREREREREpAATakRERERERERERAowoUZERERERERERKQAE2pEREREREREREQKMKFGRERERERERESkABNqRERERERERERECjChRkREREREREREpAATakRERERERERERAowoUZERERERERERKRAI9kByCSEAACUlpZKjoSIiIiIiIiIiGSy54fs+SJfTJ1QO3fuHAAgNTVVciRERERERERERBQMzp07B6vV6vM+FuFP2i1EVVdX4+jRo2jatCksFovscAJWWlqK1NRUHDp0CHFxcbLDIYNx/M2LY29uHH/z4tibG8ffvDj25sWxNzeOvzGEEDh37hxat26NsDDfXdJMXaEWFhaGlJQU2WFoLi4ujm8wE+P4mxfH3tw4/ubFsTc3jr95cezNi2Nvbhx//dVXmWbHRQmIiIiIiIiIiIgUYEKNiIiIiIiIiIhIASbUQkhUVBQeeeQRREVFyQ6FJOD4mxfH3tw4/ubFsTc3jr95cezNi2Nvbhz/4GPqRQmIiIiIiIiIiIiUYoUaERERERERERGRAkyoERERERERERERKcCEGhERERERERERkQJMqBERERERERERESnAhBoREREREREREZECTKg1IJcvX5YdAkly4MABHD58GABQVVUlORoy0q5du/DWW2/hyJEjskMhCU6ePIni4mJUV1cDgOMrhb5z587BeSF2LspuLuXl5bJDIEn27NmDPXv2AOCxv9ns2rULzz33HHbu3Ck7FJKgqKgIR48excWLFwHwmK+hYEKtAaioqMD999+P22+/HfPmzcPevXtlh0QGWrp0KTIyMnD33XcDAMLDwyVHREa4fPkyZsyYgaysLKxfvx5FRUWyQyIDVVZW4s4778SAAQMwcuRITJs2DVVVVQgL48d2qKusrMQdd9yBESNGYOzYsXj//fcBABaLRXJkZISKigrMnTsXkydPRmFhIb755hvZIZGBVq1ahQ4dOuD6668HADRq1EhyRGSEqqoqzJw5E1lZWdixYwdOnjwpOyQykP1zPz8/H9deey2u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gAEDkJmZiaeffhqAbSU/IQQyMjIwcOBA/PTTT/j4448B2Kb/N2rUCPHx8YiKisL58+dl/goUAG/j77x6t/N0/m+//Rbnz59Hx44dHbcdP37cuIBJM97G3l6ZXF1dDSEEcnNzsWTJEvTo0QOvvPIKJk2ahJiYGJSUlMBisXCBggaovvd9fHw8hgwZgsjISMdq3qKmIq1bt26IjIxkq58GzNfnvl16ejrOnj2L8PBw3HLLLY5j/quuugoVFRXYvHmzlNjJP0yoSWLfUe7btw9fffUVxo8fDwDo0KED7r33Xtx000247777sH//fgC1O91PPvkEo0aNQnR0NDZu3Ijhw4fj8ccfZylwA+Jr7O+55x7cdNNNuPfee3H8+HFUVlbin//8JwoLCx0rwDzzzDNIT093rPrmfCBOwc3fsS8qKsLUqVMxduxYLFu2DD///LPjoHvz5s3IyspC+/btpf0epI4/43///fdj3759AIDy8nK0bNkSpaWljpPsNWvWIC8vDzk5OVJ+B1LHfuGjffv2GDJkCJ555hmMGTMGq1evdlwos0/pmDFjBpKTk/GXv/wFO3fudDzHiRMn0Lp1azaoboD8GX9PF8c+/vhjDBw4EPHx8fj5558xaNAgzJgxg1N+GxB/xz4sLAznz5/H0qVLMX/+fFx11VXYvn07nnvuOQwbNgw333wzANeTcApu/ox9RUUFAGDMmDH41a9+hX//+9/46quvHMf2a9asQU5ODj/zGyCl+317Ec2JEyccx/zLly9Hbm4uevfubXj8pICkyjjT+t///udSsn3x4kXRsmVL8frrrwshhGNqX3FxsYiJiRHPPvus477nzp0TgwcPFu+9956YMWOGCA8PF5MnTxYVFRXG/hKkipKxj46OFk899ZQQQoglS5aI77//3uW5Fi1aJJ599llRXV3NKQANgNL3/dNPPy2EEOLbb78VI0aMEE2bNhV33XWXuOWWW0SLFi3E3//+dyGE4Ng3EErH/5lnnhFCCPHOO++IXr16iWHDhol//vOfYtq0aaJFixZi0aJFxv8SpIr72AtRO81j69atYsyYMWLkyJF1fvbNN9+Ia665RjRr1kzce++9YvLkySIhIUF8+umnQgi+9xsKpePvfN+qqioxduxY8eyzz4q7775bhIWFicLCQh7zNRBKx94+rsuWLRM//PCDy+NWrFghHn/8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PN1mX530/PnzWLBgAcaPH1/nuRo3bqx4+0REREQyMaFGREREFORWrVqFLVu2YO7cudiwYQOqq6vx/PPPIyzM1r3DPt3TLjIyElVVVS639ejRA1VVVThx4gT69+/vcTueHqeV3Nxc7Ny5E+3bt9fl+YmIiIiMxIQaERERURC5dOkSioqKUFVVhePHj+Pzzz/HU089hdGjR6OwsBBbt25FZWUl/vjHP+Laa6/Ft99+i0WLFrk8R3p6Os6fP4+VK1ciOzsbMTEx6NixIyZPnozCwkI8//zz6NGjB06ePImVK1eie/fuGDVqlMfHaTUV8+GHH8bo0aORlpaG66+/HmFhYdi0aRO2bt2KJ554QpNtEBERERmFixIQERERBZHPP/8cSUlJSE9Px4gRI/B///d/ePnll7F06VKEh4cjOzsbCxcuxDPPPINu3brh73//O5566imX5+jXrx/uvPNOTJo0CS1atMAf/vAHAMDbb7+NwsJC3HPPPejUqROuu+46/PDDD0hLS/P5OC0UFBTg008/xRdffIFevXqhb9++eOGFF9CmTRvNtkFERERkFIsQQsgOgoiIiIiIiIiIqKFghRoREREREREREZECTKgREREREREREREpwIQaERERERERERGRAkyoERERERERERERKcCEGhERERERERERkQJMqBERERERERERESnAhBoREREREREREZECTKgREREREREREREpwIQaERERERERERGRAkyoERERERERERERKcCEGhERERERERERkQJMqBERERERERERESnw/wH/Y3Im29q9QAAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Create time series features"],"metadata":{"id":"avfFxtAe1PnK"}},{"cell_type":"code","source":["def create_features(df, label=None):\n","    \"\"\"\n","    Creates time series features from datetime index\n","    \"\"\"\n","    df['date'] = df.index\n","    df['hour'] = df['date'].dt.hour\n","    df['dayofweek'] = df['date'].dt.dayofweek\n","    df['quarter'] = df['date'].dt.quarter\n","    df['month'] = df['date'].dt.month\n","    df['year'] = df['date'].dt.year\n","    df['dayofyear'] = df['date'].dt.dayofyear\n","    df['dayofmonth'] = df['date'].dt.day\n","\n","    X = df[['hour','dayofweek','quarter','month','year',\n","           'dayofyear','dayofmonth']]\n","    if label:\n","        y = df[label]\n","        return X, y\n","    return X"],"metadata":{"id":"ZbIhGCw21Q_o","executionInfo":{"status":"ok","timestamp":1718017776106,"user_tz":-60,"elapsed":312,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["X_train, y_train = create_features(pjme_train, label='PJME_MW')\n","X_test, y_test = create_features(pjme_test, label='PJME_MW')"],"metadata":{"id":"5VF1Dcpx1YBH","executionInfo":{"status":"ok","timestamp":1718017779252,"user_tz":-60,"elapsed":652,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":56,"outputs":[]},{"cell_type":"markdown","source":["Create XGB regressor"],"metadata":{"id":"miDCT_cL1vx3"}},{"cell_type":"code","source":["from xgboost import XGBRegressor"],"metadata":{"id":"t-x-Us7j1x-_","executionInfo":{"status":"ok","timestamp":1718017837509,"user_tz":-60,"elapsed":232,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["reg = XGBRegressor(n_estimators=10)\n","\n","reg.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)],\n","        verbose=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"9mJVXMMA184p","executionInfo":{"status":"ok","timestamp":1718017911441,"user_tz":-60,"elapsed":2774,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a5d3d9d9-10c3-4155-8c62-5ae33fac898f"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tvalidation_0-rmse:5179.02996\tvalidation_1-rmse:5359.52620\n","[1]\tvalidation_0-rmse:4374.37794\tvalidation_1-rmse:4689.54884\n","[2]\tvalidation_0-rmse:3872.95766\tvalidation_1-rmse:4284.36510\n","[3]\tvalidation_0-rmse:3569.28487\tvalidation_1-rmse:4094.21165\n","[4]\tvalidation_0-rmse:3368.78324\tvalidation_1-rmse:3967.85752\n","[5]\tvalidation_0-rmse:3242.66925\tvalidation_1-rmse:3902.02642\n","[6]\tvalidation_0-rmse:3159.90515\tvalidation_1-rmse:3845.50868\n","[7]\tvalidation_0-rmse:3086.28535\tvalidation_1-rmse:3816.38194\n","[8]\tvalidation_0-rmse:3011.58740\tvalidation_1-rmse:3794.44827\n","[9]\tvalidation_0-rmse:2974.50603\tvalidation_1-rmse:3784.81870\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=None, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=None, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, learning_rate=None, max_bin=None,\n","             max_cat_threshold=None, max_cat_to_onehot=None,\n","             max_delta_step=None, max_depth=None, max_leaves=None,\n","             min_child_weight=None, missing=nan, monotone_constraints=None,\n","             multi_strategy=None, n_estimators=10, n_jobs=None,\n","             num_parallel_tree=None, random_state=None, ...)"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=None, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=None, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, learning_rate=None, max_bin=None,\n","             max_cat_threshold=None, max_cat_to_onehot=None,\n","             max_delta_step=None, max_depth=None, max_leaves=None,\n","             min_child_weight=None, missing=nan, monotone_constraints=None,\n","             multi_strategy=None, n_estimators=10, n_jobs=None,\n","             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=None, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=None, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, learning_rate=None, max_bin=None,\n","             max_cat_threshold=None, max_cat_to_onehot=None,\n","             max_delta_step=None, max_depth=None, max_leaves=None,\n","             min_child_weight=None, missing=nan, monotone_constraints=None,\n","             multi_strategy=None, n_estimators=10, n_jobs=None,\n","             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["Look at feature importances"],"metadata":{"id":"BNIT0b-72T-H"}},{"cell_type":"code","source":["plot = plot_importance(reg, height=0.9)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"EKyHflhJ2TuT","executionInfo":{"status":"ok","timestamp":1718018263193,"user_tz":-60,"elapsed":701,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a3d322f3-b0d3-4b41-e7bc-33f56e9999b2"},"execution_count":72,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Now forecast on test set"],"metadata":{"id":"d5ypy5Jb2dLA"}},{"cell_type":"code","source":["pjme_test['MW_Prediction'] = reg.predict(X_test)\n","pjme_all = pd.concat([pjme_test, pjme_train], sort=False)"],"metadata":{"id":"MNSg7DIN2c_L","executionInfo":{"status":"ok","timestamp":1718018026084,"user_tz":-60,"elapsed":234,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["_ = pjme_all[['PJME_MW','MW_Prediction']].plot(figsize=(15, 5))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":231},"id":"LhPjGUt42r8S","executionInfo":{"status":"ok","timestamp":1718018046829,"user_tz":-60,"elapsed":5460,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"e8c4a335-2f6e-42a4-a760-26e42c2ded97"},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Check MSE metrics on test set"],"metadata":{"id":"LCQYoCX721q6"}},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","mse = mean_squared_error(y_true=pjme_test['PJME_MW'],\n","                   y_pred=pjme_test['MW_Prediction'])\n","\n","mse"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IB6_GwF621wS","executionInfo":{"status":"ok","timestamp":1718018133660,"user_tz":-60,"elapsed":717,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"4e4c909e-8f50-4bce-84f8-ebd3f2ba86ef"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["14324852.598075671"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["from math import sqrt\n","rmse = sqrt(mse)\n","rmse"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z5ITCH673GMs","executionInfo":{"status":"ok","timestamp":1718018177273,"user_tz":-60,"elapsed":3,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"39b423cb-460c-4951-f3ee-a7e84257c381"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3784.818700819852"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["mean_absolute_error(y_true=pjme_test['PJME_MW'],\n","                   y_pred=pjme_test['MW_Prediction'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"syaYV0hl3Q3U","executionInfo":{"status":"ok","timestamp":1718018201268,"user_tz":-60,"elapsed":222,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"46d684c8-0d6b-4c96-c470-63b85a507ee1"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2956.5008453249748"]},"metadata":{},"execution_count":71}]},{"cell_type":"markdown","source":["Add SHAP on top of this"],"metadata":{"id":"uFoqpyzN3fkC"}},{"cell_type":"code","source":["explainer = shap.Explainer(reg, X_train)\n","\n","shap_values = explainer(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VA-T4qpS3g6I","executionInfo":{"status":"ok","timestamp":1718018537064,"user_tz":-60,"elapsed":25063,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"86c4613d-0a35-4106-c855-7dfc846dabea"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stderr","text":[" 96%|=================== | 30289/31439 [00:24<00:00]       "]}]},{"cell_type":"code","source":["shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":368},"id":"VFpb3MBv4uYm","executionInfo":{"status":"ok","timestamp":1718018579839,"user_tz":-60,"elapsed":4819,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"7270c5de-19fd-461a-e75a-3c2bde732573"},"execution_count":75,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x430 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Extract SHAP values for the 'dayofyear' feature\n","dayofyear_shap_values = shap_values[:, X_test.columns.get_loc('dayofyear')]\n","\n","\n","# Plot SHAP values for the 'dayofyear' feature\n","shap.dependence_plot('dayofyear', shap_values.values, X_test, feature_names=X_test.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"M9Mpga3f40Pg","executionInfo":{"status":"ok","timestamp":1718018713913,"user_tz":-60,"elapsed":1361,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"ff374bb5-de13-4cb3-9121-8057f020347c"},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 750x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Other explaiability techniques **"],"metadata":{"id":"H1tHeaRa5bIY"}},{"cell_type":"code","source":["from sklearn.inspection import PartialDependenceDisplay, permutation_importance\n","\n","# Partial Dependence Plot using PartialDependenceDisplay\n","features = ['dayofyear']\n","fig, ax = plt.subplots(figsize=(10, 6))\n","disp = PartialDependenceDisplay.from_estimator(reg, X_train, features, ax=ax)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"q8jouHTQ5eGk","executionInfo":{"status":"ok","timestamp":1718018845434,"user_tz":-60,"elapsed":10667,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a046bd27-950d-453f-c959-f7923a0bbaca"},"execution_count":79,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["!pip install lime\n","import lime\n","import lime.lime_tabular\n","import matplotlib.pyplot as plt\n","from sklearn.inspection import PartialDependenceDisplay, permutation_importance\n","from sklearn.tree import DecisionTreeRegressor, plot_tree"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"Nwkpsek1516m","executionInfo":{"status":"ok","timestamp":1718018879029,"user_tz":-60,"elapsed":13538,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"3d8a6602-c37b-44e5-bab6-2954b9d9eee3"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting lime\n","  Downloading lime-0.2.0.1.tar.gz (275 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/275.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━\u001b[0m \u001b[32m256.0/275.7 kB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m275.7/275.7 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from lime) (3.7.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lime) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lime) (1.11.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from lime) (4.66.4)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.10/dist-packages (from lime) (1.2.2)\n","Requirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.10/dist-packages (from lime) (0.19.3)\n","Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (3.3)\n","Requirement already satisfied: pillow!=7.1.0,!=7.1.1,!=8.3.0,>=6.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (9.4.0)\n","Requirement already satisfied: imageio>=2.4.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2.31.6)\n","Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2024.5.22)\n","Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (1.6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (24.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (3.5.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (4.53.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.4.5)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->lime) (1.16.0)\n","Building wheels for collected packages: lime\n","  Building wheel for lime (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283835 sha256=27c593987cb40505b528cd4c9897f5be81cc60cfac59dba64801de00b832fc21\n","  Stored in directory: /root/.cache/pip/wheels/fd/a2/af/9ac0a1a85a27f314a06b39e1f492bee1547d52549a4606ed89\n","Successfully built lime\n","Installing collected packages: lime\n","Successfully installed lime-0.2.0.1\n"]}]},{"cell_type":"code","source":["# ICE Plot\n","fig, ax = plt.subplots(figsize=(10, 6))\n","disp = PartialDependenceDisplay.from_estimator(reg, X_train, features, kind='individual', ax=ax)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"UfokjBha57dm","executionInfo":{"status":"ok","timestamp":1718018902963,"user_tz":-60,"elapsed":14831,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"70f93d26-f6c9-4f44-c56b-4cadb603a972"},"execution_count":81,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 2 Axes>"],"image/png":"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VqtFRETEzS8iERHZHAsyIiLqF5qbmxEbGwu9Xo/NmzfjwIEDyMzMBAC0tbUp/Z555hls3boV58+fR3p6OhISEjBgwIBb+uyRI0ciMjISGzduRHFxMUpLS5WvSgLAuXPnkJaWhpKSEuVx5MgRnDhxArfffjtOnTqFRx99FBEREfjiiy9QXFyMd99994q5u7m5KUUeERE5Bt5lkYiI+oRhw4bBxcUFRUVFCAwMBACcOXMG//nPfzB27Fj89NNPqK+vx/Lly5UrXAcPHrxinEceeQQDBw7E+vXrsWvXLuzdu1dpu/vuu1FVVYWqqipljGPHjqGhoQFGo/Ga83vmmWewdu1aVFdXw2w2W11lGzVqFMrKyhAaGtrte4uLi9HZ2YnVq1crd03ctm3bDawOERHZK14hIyKiPkGn0yE5ORmLFi1CXl4ejh49iqSkJKWACQwMhFarxdtvv42ff/4ZO3bswGuvvXbFOM7OzkhKSsLixYsxfPhwmEwmpc1sNiM8PBzTpk3DDz/8gP3792PGjBkYO3YsRo8efc35TZ06Fb/88gs++ugj5WYeXZYsWYKNGzciLS0NpaWlOH78OLZu3YqXXnoJABAaGor29nZl7ps2bcL7779/q0tGRER2gAUZERH1GatWrcJDDz2EyZMnw2w248EHH0RUVBQAYMiQIcjIyMD27dthNBqxfPnyK25x3yU5ORltbW2YOXOm1esajQZZWVkYNGgQxowZA7PZjJCQEHz22WfXnZuHhwfi4+Oh0+kwZcoUq7bY2FhkZ2cjJycH9913H+6//368+eabCAoKAgBERkZizZo1WLFiBcLCwrB582YsW7bsJlaIiIjsjUZERO1JEBER2ZPvv/8eMTExqKqqgq+vb6+NGxMTg3vuuQfr1q3rtTGJiMixsSAjIiL6XWtrK3799VckJibCYDBg8+bNvTLumTNnkJ+fjyeeeALHjh2zuvMjERH1b7ypBxER0e+2bNmC5ORk3Hvvvdi4cWOvjTty5EicOXMGK1asYDFGRERWeIWMiIiIiIhIJbypBxERERERkUpYkBEREREREamEBRkREREREZFKWJARERERERGphAUZERERERGRSliQERERERERqYQFGRERERERkUpYkBEREREREamEBRkREREREZFK/g8FeN4GVEw6IgAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["# LIME\n","explainer = lime.lime_tabular.LimeTabularExplainer(\n","    training_data=np.array(X_train),\n","    feature_names=X_train.columns,\n","    class_names=['PJME_MW'],\n","    mode='regression'\n",")\n","i = 0  # index of the instance to explain\n","exp = explainer.explain_instance(X_test.iloc[i], reg.predict)\n","exp.show_in_notebook(show_table=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":413},"id":"ttSSeyJF6ETj","executionInfo":{"status":"ok","timestamp":1718018925989,"user_tz":-60,"elapsed":1622,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"e00ff688-1f73-4b4e-ab09-f8f2d763f5c4"},"execution_count":82,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<html>\n","        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF8\">\n","        <head><script>var lime =\n","/******/ (function(modules) { // webpackBootstrap\n","/******/ \t// The module cache\n","/******/ \tvar installedModules = {};\n","/******/\n","/******/ \t// The require function\n","/******/ \tfunction __webpack_require__(moduleId) {\n","/******/\n","/******/ \t\t// Check if module is in cache\n","/******/ \t\tif(installedModules[moduleId])\n","/******/ \t\t\treturn installedModules[moduleId].exports;\n","/******/\n","/******/ \t\t// Create a new module (and put it into the cache)\n","/******/ \t\tvar module = installedModules[moduleId] = {\n","/******/ \t\t\texports: {},\n","/******/ \t\t\tid: moduleId,\n","/******/ \t\t\tloaded: false\n","/******/ \t\t};\n","/******/\n","/******/ \t\t// Execute the module function\n","/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n","/******/\n","/******/ \t\t// Flag the module as loaded\n","/******/ \t\tmodule.loaded = true;\n","/******/\n","/******/ \t\t// Return the exports of the module\n","/******/ \t\treturn module.exports;\n","/******/ \t}\n","/******/\n","/******/\n","/******/ \t// expose the modules object (__webpack_modules__)\n","/******/ \t__webpack_require__.m = modules;\n","/******/\n","/******/ \t// expose the module cache\n","/******/ \t__webpack_require__.c = installedModules;\n","/******/\n","/******/ \t// __webpack_public_path__\n","/******/ \t__webpack_require__.p = \"\";\n","/******/\n","/******/ \t// Load entry module and return exports\n","/******/ \treturn __webpack_require__(0);\n","/******/ })\n","/************************************************************************/\n","/******/ ([\n","/* 0 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\texports.PredictedValue = exports.PredictProba = exports.Barchart = exports.Explanation = undefined;\n","\t\n","\tvar _explanation = __webpack_require__(1);\n","\t\n","\tvar _explanation2 = _interopRequireDefault(_explanation);\n","\t\n","\tvar _bar_chart = __webpack_require__(3);\n","\t\n","\tvar _bar_chart2 = _interopRequireDefault(_bar_chart);\n","\t\n","\tvar _predict_proba = __webpack_require__(6);\n","\t\n","\tvar _predict_proba2 = _interopRequireDefault(_predict_proba);\n","\t\n","\tvar _predicted_value = __webpack_require__(7);\n","\t\n","\tvar _predicted_value2 = _interopRequireDefault(_predicted_value);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tif (!global._babelPolyfill) {\n","\t  __webpack_require__(8);\n","\t}\n","\t\n","\t__webpack_require__(339);\n","\t\n","\texports.Explanation = _explanation2.default;\n","\texports.Barchart = _bar_chart2.default;\n","\texports.PredictProba = _predict_proba2.default;\n","\texports.PredictedValue = _predicted_value2.default;\n","\t//require('style-loader');\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 1 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n","\t\n","\tvar _d2 = __webpack_require__(2);\n","\t\n","\tvar _d3 = _interopRequireDefault(_d2);\n","\t\n","\tvar _bar_chart = __webpack_require__(3);\n","\t\n","\tvar _bar_chart2 = _interopRequireDefault(_bar_chart);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar Explanation = function () {\n","\t  function Explanation(class_names) {\n","\t    _classCallCheck(this, Explanation);\n","\t\n","\t    this.names = class_names;\n","\t    if (class_names.length < 10) {\n","\t      this.colors = _d3.default.scale.category10().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category10().domain((0, _lodash.range)(this.names.length));\n","\t    } else {\n","\t      this.colors = _d3.default.scale.category20().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category20().domain((0, _lodash.range)(this.names.length));\n","\t    }\n","\t  }\n","\t  // exp: [(feature-name, weight), ...]\n","\t  // label: int\n","\t  // div: d3 selection\n","\t\n","\t\n","\t  Explanation.prototype.show = function show(exp, label, div) {\n","\t    var svg = div.append('svg').style('width', '100%');\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    var names = ['NOT ' + this.names[label], this.names[label]];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t      names = this.names;\n","\t    }\n","\t    var plot = new _bar_chart2.default(svg, exp, true, names, colors, true, 10);\n","\t    svg.style('height', plot.svg_height + 'px');\n","\t  };\n","\t  // exp has all ocurrences of words, with start index and weight:\n","\t  // exp = [('word', 132, -0.13), ('word3', 111, 1.3)\n","\t\n","\t\n","\t  Explanation.prototype.show_raw_text = function show_raw_text(exp, label, raw, div) {\n","\t    var opacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n","\t\n","\t    //let colors=['#5F9EA0', this.colors(this.exp['class'])];\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t    }\n","\t    var word_lists = [[], []];\n","\t    var max_weight = -1;\n","\t    var _iteratorNormalCompletion = true;\n","\t    var _didIteratorError = false;\n","\t    var _iteratorError = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator = exp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n","\t        var _step$value = _slicedToArray(_step.value, 3),\n","\t            word = _step$value[0],\n","\t            start = _step$value[1],\n","\t            weight = _step$value[2];\n","\t\n","\t        if (weight > 0) {\n","\t          word_lists[1].push([start, start + word.length, weight]);\n","\t        } else {\n","\t          word_lists[0].push([start, start + word.length, -weight]);\n","\t        }\n","\t        max_weight = Math.max(max_weight, Math.abs(weight));\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError = true;\n","\t      _iteratorError = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion && _iterator.return) {\n","\t          _iterator.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError) {\n","\t          throw _iteratorError;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    if (!opacity) {\n","\t      max_weight = 0;\n","\t    }\n","\t    this.display_raw_text(div, raw, word_lists, colors, max_weight, true);\n","\t  };\n","\t  // exp is list of (feature_name, value, weight)\n","\t\n","\t\n","\t  Explanation.prototype.show_raw_tabular = function show_raw_tabular(exp, label, div) {\n","\t    div.classed('lime', true).classed('table_div', true);\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t    }\n","\t    var table = div.append('table');\n","\t    var thead = table.append('tr');\n","\t    thead.append('td').text('Feature');\n","\t    thead.append('td').text('Value');\n","\t    thead.style('color', 'black').style('font-size', '20px');\n","\t    var _iteratorNormalCompletion2 = true;\n","\t    var _didIteratorError2 = false;\n","\t    var _iteratorError2 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator2 = exp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n","\t        var _step2$value = _slicedToArray(_step2.value, 3),\n","\t            fname = _step2$value[0],\n","\t            value = _step2$value[1],\n","\t            weight = _step2$value[2];\n","\t\n","\t        var tr = table.append('tr');\n","\t        tr.style('border-style', 'hidden');\n","\t        tr.append('td').text(fname);\n","\t        tr.append('td').text(value);\n","\t        if (weight > 0) {\n","\t          tr.style('background-color', colors[1]);\n","\t        } else if (weight < 0) {\n","\t          tr.style('background-color', colors[0]);\n","\t        } else {\n","\t          tr.style('color', 'black');\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError2 = true;\n","\t      _iteratorError2 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n","\t          _iterator2.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError2) {\n","\t          throw _iteratorError2;\n","\t        }\n","\t      }\n","\t    }\n","\t  };\n","\t\n","\t  Explanation.prototype.hexToRgb = function hexToRgb(hex) {\n","\t    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n","\t    return result ? {\n","\t      r: parseInt(result[1], 16),\n","\t      g: parseInt(result[2], 16),\n","\t      b: parseInt(result[3], 16)\n","\t    } : null;\n","\t  };\n","\t\n","\t  Explanation.prototype.applyAlpha = function applyAlpha(hex, alpha) {\n","\t    var components = this.hexToRgb(hex);\n","\t    return 'rgba(' + components.r + \",\" + components.g + \",\" + components.b + \",\" + alpha.toFixed(3) + \")\";\n","\t  };\n","\t  // sord_lists is an array of arrays, of length (colors). if with_positions is true,\n","\t  // word_lists is an array of [start,end] positions instead\n","\t\n","\t\n","\t  Explanation.prototype.display_raw_text = function display_raw_text(div, raw_text) {\n","\t    var word_lists = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n","\t    var colors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n","\t    var max_weight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n","\t    var positions = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t\n","\t    div.classed('lime', true).classed('text_div', true);\n","\t    div.append('h3').text('Text with highlighted words');\n","\t    var highlight_tag = 'span';\n","\t    var text_span = div.append('span').style('white-space', 'pre-wrap').text(raw_text);\n","\t    var position_lists = word_lists;\n","\t    if (!positions) {\n","\t      position_lists = this.wordlists_to_positions(word_lists, raw_text);\n","\t    }\n","\t    var objects = [];\n","\t    var _iteratorNormalCompletion3 = true;\n","\t    var _didIteratorError3 = false;\n","\t    var _iteratorError3 = undefined;\n","\t\n","\t    try {\n","\t      var _loop = function _loop() {\n","\t        var i = _step3.value;\n","\t\n","\t        position_lists[i].map(function (x) {\n","\t          return objects.push({ 'label': i, 'start': x[0], 'end': x[1], 'alpha': max_weight === 0 ? 1 : x[2] / max_weight });\n","\t        });\n","\t      };\n","\t\n","\t      for (var _iterator3 = (0, _lodash.range)(position_lists.length)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n","\t        _loop();\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError3 = true;\n","\t      _iteratorError3 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n","\t          _iterator3.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError3) {\n","\t          throw _iteratorError3;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    objects = (0, _lodash.sortBy)(objects, function (x) {\n","\t      return x['start'];\n","\t    });\n","\t    var node = text_span.node().childNodes[0];\n","\t    var subtract = 0;\n","\t    var _iteratorNormalCompletion4 = true;\n","\t    var _didIteratorError4 = false;\n","\t    var _iteratorError4 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator4 = objects[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n","\t        var obj = _step4.value;\n","\t\n","\t        var word = raw_text.slice(obj.start, obj.end);\n","\t        var start = obj.start - subtract;\n","\t        var end = obj.end - subtract;\n","\t        var match = document.createElement(highlight_tag);\n","\t        match.appendChild(document.createTextNode(word));\n","\t        match.style.backgroundColor = this.applyAlpha(colors[obj.label], obj.alpha);\n","\t        var after = node.splitText(start);\n","\t        after.nodeValue = after.nodeValue.substring(word.length);\n","\t        node.parentNode.insertBefore(match, after);\n","\t        subtract += end;\n","\t        node = after;\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError4 = true;\n","\t      _iteratorError4 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n","\t          _iterator4.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError4) {\n","\t          throw _iteratorError4;\n","\t        }\n","\t      }\n","\t    }\n","\t  };\n","\t\n","\t  Explanation.prototype.wordlists_to_positions = function wordlists_to_positions(word_lists, raw_text) {\n","\t    var ret = [];\n","\t    var _iteratorNormalCompletion5 = true;\n","\t    var _didIteratorError5 = false;\n","\t    var _iteratorError5 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator5 = word_lists[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n","\t        var words = _step5.value;\n","\t\n","\t        if (words.length === 0) {\n","\t          ret.push([]);\n","\t          continue;\n","\t        }\n","\t        var re = new RegExp(\"\\\\b(\" + words.join('|') + \")\\\\b\", 'gm');\n","\t        var temp = void 0;\n","\t        var list = [];\n","\t        while ((temp = re.exec(raw_text)) !== null) {\n","\t          list.push([temp.index, temp.index + temp[0].length]);\n","\t        }\n","\t        ret.push(list);\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError5 = true;\n","\t      _iteratorError5 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n","\t          _iterator5.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError5) {\n","\t          throw _iteratorError5;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    return ret;\n","\t  };\n","\t\n","\t  return Explanation;\n","\t}();\n","\t\n","\texports.default = Explanation;\n","\n","/***/ }),\n","/* 2 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n","\t  var d3 = {\n","\t    version: \"3.5.17\"\n","\t  };\n","\t  var d3_arraySlice = [].slice, d3_array = function(list) {\n","\t    return d3_arraySlice.call(list);\n","\t  };\n","\t  var d3_document = this.document;\n","\t  function d3_documentElement(node) {\n","\t    return node && (node.ownerDocument || node.document || node).documentElement;\n","\t  }\n","\t  function d3_window(node) {\n","\t    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n","\t  }\n","\t  if (d3_document) {\n","\t    try {\n","\t      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n","\t    } catch (e) {\n","\t      d3_array = function(list) {\n","\t        var i = list.length, array = new Array(i);\n","\t        while (i--) array[i] = list[i];\n","\t        return array;\n","\t      };\n","\t    }\n","\t  }\n","\t  if (!Date.now) Date.now = function() {\n","\t    return +new Date();\n","\t  };\n","\t  if (d3_document) {\n","\t    try {\n","\t      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n","\t    } catch (error) {\n","\t      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n","\t      d3_element_prototype.setAttribute = function(name, value) {\n","\t        d3_element_setAttribute.call(this, name, value + \"\");\n","\t      };\n","\t      d3_element_prototype.setAttributeNS = function(space, local, value) {\n","\t        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n","\t      };\n","\t      d3_style_prototype.setProperty = function(name, value, priority) {\n","\t        d3_style_setProperty.call(this, name, value + \"\", priority);\n","\t      };\n","\t    }\n","\t  }\n","\t  d3.ascending = d3_ascending;\n","\t  function d3_ascending(a, b) {\n","\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n","\t  }\n","\t  d3.descending = function(a, b) {\n","\t    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n","\t  };\n","\t  d3.min = function(array, f) {\n","\t    var i = -1, n = array.length, a, b;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n","\t    }\n","\t    return a;\n","\t  };\n","\t  d3.max = function(array, f) {\n","\t    var i = -1, n = array.length, a, b;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n","\t    }\n","\t    return a;\n","\t  };\n","\t  d3.extent = function(array, f) {\n","\t    var i = -1, n = array.length, a, b, c;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = c = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null) {\n","\t        if (a > b) a = b;\n","\t        if (c < b) c = b;\n","\t      }\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = c = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n","\t        if (a > b) a = b;\n","\t        if (c < b) c = b;\n","\t      }\n","\t    }\n","\t    return [ a, c ];\n","\t  };\n","\t  function d3_number(x) {\n","\t    return x === null ? NaN : +x;\n","\t  }\n","\t  function d3_numeric(x) {\n","\t    return !isNaN(x);\n","\t  }\n","\t  d3.sum = function(array, f) {\n","\t    var s = 0, n = array.length, a, i = -1;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n","\t    }\n","\t    return s;\n","\t  };\n","\t  d3.mean = function(array, f) {\n","\t    var s = 0, n = array.length, a, i = -1, j = n;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n","\t    }\n","\t    if (j) return s / j;\n","\t  };\n","\t  d3.quantile = function(values, p) {\n","\t    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n","\t    return e ? v + e * (values[h] - v) : v;\n","\t  };\n","\t  d3.median = function(array, f) {\n","\t    var numbers = [], n = array.length, a, i = -1;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n","\t    }\n","\t    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n","\t  };\n","\t  d3.variance = function(array, f) {\n","\t    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) {\n","\t        if (d3_numeric(a = d3_number(array[i]))) {\n","\t          d = a - m;\n","\t          m += d / ++j;\n","\t          s += d * (a - m);\n","\t        }\n","\t      }\n","\t    } else {\n","\t      while (++i < n) {\n","\t        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n","\t          d = a - m;\n","\t          m += d / ++j;\n","\t          s += d * (a - m);\n","\t        }\n","\t      }\n","\t    }\n","\t    if (j > 1) return s / (j - 1);\n","\t  };\n","\t  d3.deviation = function() {\n","\t    var v = d3.variance.apply(this, arguments);\n","\t    return v ? Math.sqrt(v) : v;\n","\t  };\n","\t  function d3_bisector(compare) {\n","\t    return {\n","\t      left: function(a, x, lo, hi) {\n","\t        if (arguments.length < 3) lo = 0;\n","\t        if (arguments.length < 4) hi = a.length;\n","\t        while (lo < hi) {\n","\t          var mid = lo + hi >>> 1;\n","\t          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n","\t        }\n","\t        return lo;\n","\t      },\n","\t      right: function(a, x, lo, hi) {\n","\t        if (arguments.length < 3) lo = 0;\n","\t        if (arguments.length < 4) hi = a.length;\n","\t        while (lo < hi) {\n","\t          var mid = lo + hi >>> 1;\n","\t          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n","\t        }\n","\t        return lo;\n","\t      }\n","\t    };\n","\t  }\n","\t  var d3_bisect = d3_bisector(d3_ascending);\n","\t  d3.bisectLeft = d3_bisect.left;\n","\t  d3.bisect = d3.bisectRight = d3_bisect.right;\n","\t  d3.bisector = function(f) {\n","\t    return d3_bisector(f.length === 1 ? function(d, x) {\n","\t      return d3_ascending(f(d), x);\n","\t    } : f);\n","\t  };\n","\t  d3.shuffle = function(array, i0, i1) {\n","\t    if ((m = arguments.length) < 3) {\n","\t      i1 = array.length;\n","\t      if (m < 2) i0 = 0;\n","\t    }\n","\t    var m = i1 - i0, t, i;\n","\t    while (m) {\n","\t      i = Math.random() * m-- | 0;\n","\t      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n","\t    }\n","\t    return array;\n","\t  };\n","\t  d3.permute = function(array, indexes) {\n","\t    var i = indexes.length, permutes = new Array(i);\n","\t    while (i--) permutes[i] = array[indexes[i]];\n","\t    return permutes;\n","\t  };\n","\t  d3.pairs = function(array) {\n","\t    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n","\t    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n","\t    return pairs;\n","\t  };\n","\t  d3.transpose = function(matrix) {\n","\t    if (!(n = matrix.length)) return [];\n","\t    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n","\t      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n","\t        row[j] = matrix[j][i];\n","\t      }\n","\t    }\n","\t    return transpose;\n","\t  };\n","\t  function d3_transposeLength(d) {\n","\t    return d.length;\n","\t  }\n","\t  d3.zip = function() {\n","\t    return d3.transpose(arguments);\n","\t  };\n","\t  d3.keys = function(map) {\n","\t    var keys = [];\n","\t    for (var key in map) keys.push(key);\n","\t    return keys;\n","\t  };\n","\t  d3.values = function(map) {\n","\t    var values = [];\n","\t    for (var key in map) values.push(map[key]);\n","\t    return values;\n","\t  };\n","\t  d3.entries = function(map) {\n","\t    var entries = [];\n","\t    for (var key in map) entries.push({\n","\t      key: key,\n","\t      value: map[key]\n","\t    });\n","\t    return entries;\n","\t  };\n","\t  d3.merge = function(arrays) {\n","\t    var n = arrays.length, m, i = -1, j = 0, merged, array;\n","\t    while (++i < n) j += arrays[i].length;\n","\t    merged = new Array(j);\n","\t    while (--n >= 0) {\n","\t      array = arrays[n];\n","\t      m = array.length;\n","\t      while (--m >= 0) {\n","\t        merged[--j] = array[m];\n","\t      }\n","\t    }\n","\t    return merged;\n","\t  };\n","\t  var abs = Math.abs;\n","\t  d3.range = function(start, stop, step) {\n","\t    if (arguments.length < 3) {\n","\t      step = 1;\n","\t      if (arguments.length < 2) {\n","\t        stop = start;\n","\t        start = 0;\n","\t      }\n","\t    }\n","\t    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n","\t    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n","\t    start *= k, stop *= k, step *= k;\n","\t    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n","\t    return range;\n","\t  };\n","\t  function d3_range_integerScale(x) {\n","\t    var k = 1;\n","\t    while (x * k % 1) k *= 10;\n","\t    return k;\n","\t  }\n","\t  function d3_class(ctor, properties) {\n","\t    for (var key in properties) {\n","\t      Object.defineProperty(ctor.prototype, key, {\n","\t        value: properties[key],\n","\t        enumerable: false\n","\t      });\n","\t    }\n","\t  }\n","\t  d3.map = function(object, f) {\n","\t    var map = new d3_Map();\n","\t    if (object instanceof d3_Map) {\n","\t      object.forEach(function(key, value) {\n","\t        map.set(key, value);\n","\t      });\n","\t    } else if (Array.isArray(object)) {\n","\t      var i = -1, n = object.length, o;\n","\t      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n","\t    } else {\n","\t      for (var key in object) map.set(key, object[key]);\n","\t    }\n","\t    return map;\n","\t  };\n","\t  function d3_Map() {\n","\t    this._ = Object.create(null);\n","\t  }\n","\t  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n","\t  d3_class(d3_Map, {\n","\t    has: d3_map_has,\n","\t    get: function(key) {\n","\t      return this._[d3_map_escape(key)];\n","\t    },\n","\t    set: function(key, value) {\n","\t      return this._[d3_map_escape(key)] = value;\n","\t    },\n","\t    remove: d3_map_remove,\n","\t    keys: d3_map_keys,\n","\t    values: function() {\n","\t      var values = [];\n","\t      for (var key in this._) values.push(this._[key]);\n","\t      return values;\n","\t    },\n","\t    entries: function() {\n","\t      var entries = [];\n","\t      for (var key in this._) entries.push({\n","\t        key: d3_map_unescape(key),\n","\t        value: this._[key]\n","\t      });\n","\t      return entries;\n","\t    },\n","\t    size: d3_map_size,\n","\t    empty: d3_map_empty,\n","\t    forEach: function(f) {\n","\t      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n","\t    }\n","\t  });\n","\t  function d3_map_escape(key) {\n","\t    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n","\t  }\n","\t  function d3_map_unescape(key) {\n","\t    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n","\t  }\n","\t  function d3_map_has(key) {\n","\t    return d3_map_escape(key) in this._;\n","\t  }\n","\t  function d3_map_remove(key) {\n","\t    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n","\t  }\n","\t  function d3_map_keys() {\n","\t    var keys = [];\n","\t    for (var key in this._) keys.push(d3_map_unescape(key));\n","\t    return keys;\n","\t  }\n","\t  function d3_map_size() {\n","\t    var size = 0;\n","\t    for (var key in this._) ++size;\n","\t    return size;\n","\t  }\n","\t  function d3_map_empty() {\n","\t    for (var key in this._) return false;\n","\t    return true;\n","\t  }\n","\t  d3.nest = function() {\n","\t    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n","\t    function map(mapType, array, depth) {\n","\t      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n","\t      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n","\t      while (++i < n) {\n","\t        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n","\t          values.push(object);\n","\t        } else {\n","\t          valuesByKey.set(keyValue, [ object ]);\n","\t        }\n","\t      }\n","\t      if (mapType) {\n","\t        object = mapType();\n","\t        setter = function(keyValue, values) {\n","\t          object.set(keyValue, map(mapType, values, depth));\n","\t        };\n","\t      } else {\n","\t        object = {};\n","\t        setter = function(keyValue, values) {\n","\t          object[keyValue] = map(mapType, values, depth);\n","\t        };\n","\t      }\n","\t      valuesByKey.forEach(setter);\n","\t      return object;\n","\t    }\n","\t    function entries(map, depth) {\n","\t      if (depth >= keys.length) return map;\n","\t      var array = [], sortKey = sortKeys[depth++];\n","\t      map.forEach(function(key, keyMap) {\n","\t        array.push({\n","\t          key: key,\n","\t          values: entries(keyMap, depth)\n","\t        });\n","\t      });\n","\t      return sortKey ? array.sort(function(a, b) {\n","\t        return sortKey(a.key, b.key);\n","\t      }) : array;\n","\t    }\n","\t    nest.map = function(array, mapType) {\n","\t      return map(mapType, array, 0);\n","\t    };\n","\t    nest.entries = function(array) {\n","\t      return entries(map(d3.map, array, 0), 0);\n","\t    };\n","\t    nest.key = function(d) {\n","\t      keys.push(d);\n","\t      return nest;\n","\t    };\n","\t    nest.sortKeys = function(order) {\n","\t      sortKeys[keys.length - 1] = order;\n","\t      return nest;\n","\t    };\n","\t    nest.sortValues = function(order) {\n","\t      sortValues = order;\n","\t      return nest;\n","\t    };\n","\t    nest.rollup = function(f) {\n","\t      rollup = f;\n","\t      return nest;\n","\t    };\n","\t    return nest;\n","\t  };\n","\t  d3.set = function(array) {\n","\t    var set = new d3_Set();\n","\t    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n","\t    return set;\n","\t  };\n","\t  function d3_Set() {\n","\t    this._ = Object.create(null);\n","\t  }\n","\t  d3_class(d3_Set, {\n","\t    has: d3_map_has,\n","\t    add: function(key) {\n","\t      this._[d3_map_escape(key += \"\")] = true;\n","\t      return key;\n","\t    },\n","\t    remove: d3_map_remove,\n","\t    values: d3_map_keys,\n","\t    size: d3_map_size,\n","\t    empty: d3_map_empty,\n","\t    forEach: function(f) {\n","\t      for (var key in this._) f.call(this, d3_map_unescape(key));\n","\t    }\n","\t  });\n","\t  d3.behavior = {};\n","\t  function d3_identity(d) {\n","\t    return d;\n","\t  }\n","\t  d3.rebind = function(target, source) {\n","\t    var i = 1, n = arguments.length, method;\n","\t    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n","\t    return target;\n","\t  };\n","\t  function d3_rebind(target, source, method) {\n","\t    return function() {\n","\t      var value = method.apply(source, arguments);\n","\t      return value === source ? target : value;\n","\t    };\n","\t  }\n","\t  function d3_vendorSymbol(object, name) {\n","\t    if (name in object) return name;\n","\t    name = name.charAt(0).toUpperCase() + name.slice(1);\n","\t    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n","\t      var prefixName = d3_vendorPrefixes[i] + name;\n","\t      if (prefixName in object) return prefixName;\n","\t    }\n","\t  }\n","\t  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n","\t  function d3_noop() {}\n","\t  d3.dispatch = function() {\n","\t    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n","\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n","\t    return dispatch;\n","\t  };\n","\t  function d3_dispatch() {}\n","\t  d3_dispatch.prototype.on = function(type, listener) {\n","\t    var i = type.indexOf(\".\"), name = \"\";\n","\t    if (i >= 0) {\n","\t      name = type.slice(i + 1);\n","\t      type = type.slice(0, i);\n","\t    }\n","\t    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n","\t    if (arguments.length === 2) {\n","\t      if (listener == null) for (type in this) {\n","\t        if (this.hasOwnProperty(type)) this[type].on(name, null);\n","\t      }\n","\t      return this;\n","\t    }\n","\t  };\n","\t  function d3_dispatch_event(dispatch) {\n","\t    var listeners = [], listenerByName = new d3_Map();\n","\t    function event() {\n","\t      var z = listeners, i = -1, n = z.length, l;\n","\t      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n","\t      return dispatch;\n","\t    }\n","\t    event.on = function(name, listener) {\n","\t      var l = listenerByName.get(name), i;\n","\t      if (arguments.length < 2) return l && l.on;\n","\t      if (l) {\n","\t        l.on = null;\n","\t        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n","\t        listenerByName.remove(name);\n","\t      }\n","\t      if (listener) listeners.push(listenerByName.set(name, {\n","\t        on: listener\n","\t      }));\n","\t      return dispatch;\n","\t    };\n","\t    return event;\n","\t  }\n","\t  d3.event = null;\n","\t  function d3_eventPreventDefault() {\n","\t    d3.event.preventDefault();\n","\t  }\n","\t  function d3_eventSource() {\n","\t    var e = d3.event, s;\n","\t    while (s = e.sourceEvent) e = s;\n","\t    return e;\n","\t  }\n","\t  function d3_eventDispatch(target) {\n","\t    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n","\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n","\t    dispatch.of = function(thiz, argumentz) {\n","\t      return function(e1) {\n","\t        try {\n","\t          var e0 = e1.sourceEvent = d3.event;\n","\t          e1.target = target;\n","\t          d3.event = e1;\n","\t          dispatch[e1.type].apply(thiz, argumentz);\n","\t        } finally {\n","\t          d3.event = e0;\n","\t        }\n","\t      };\n","\t    };\n","\t    return dispatch;\n","\t  }\n","\t  d3.requote = function(s) {\n","\t    return s.replace(d3_requote_re, \"\\\\$&\");\n","\t  };\n","\t  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n","\t  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n","\t    object.__proto__ = prototype;\n","\t  } : function(object, prototype) {\n","\t    for (var property in prototype) object[property] = prototype[property];\n","\t  };\n","\t  function d3_selection(groups) {\n","\t    d3_subclass(groups, d3_selectionPrototype);\n","\t    return groups;\n","\t  }\n","\t  var d3_select = function(s, n) {\n","\t    return n.querySelector(s);\n","\t  }, d3_selectAll = function(s, n) {\n","\t    return n.querySelectorAll(s);\n","\t  }, d3_selectMatches = function(n, s) {\n","\t    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n","\t    d3_selectMatches = function(n, s) {\n","\t      return d3_selectMatcher.call(n, s);\n","\t    };\n","\t    return d3_selectMatches(n, s);\n","\t  };\n","\t  if (typeof Sizzle === \"function\") {\n","\t    d3_select = function(s, n) {\n","\t      return Sizzle(s, n)[0] || null;\n","\t    };\n","\t    d3_selectAll = Sizzle;\n","\t    d3_selectMatches = Sizzle.matchesSelector;\n","\t  }\n","\t  d3.selection = function() {\n","\t    return d3.select(d3_document.documentElement);\n","\t  };\n","\t  var d3_selectionPrototype = d3.selection.prototype = [];\n","\t  d3_selectionPrototype.select = function(selector) {\n","\t    var subgroups = [], subgroup, subnode, group, node;\n","\t    selector = d3_selection_selector(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = (group = this[j]).parentNode;\n","\t      for (var i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n","\t          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_selector(selector) {\n","\t    return typeof selector === \"function\" ? selector : function() {\n","\t      return d3_select(selector, this);\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.selectAll = function(selector) {\n","\t    var subgroups = [], subgroup, node;\n","\t    selector = d3_selection_selectorAll(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n","\t          subgroup.parentNode = node;\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_selectorAll(selector) {\n","\t    return typeof selector === \"function\" ? selector : function() {\n","\t      return d3_selectAll(selector, this);\n","\t    };\n","\t  }\n","\t  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n","\t  var d3_nsPrefix = {\n","\t    svg: \"http://www.w3.org/2000/svg\",\n","\t    xhtml: d3_nsXhtml,\n","\t    xlink: \"http://www.w3.org/1999/xlink\",\n","\t    xml: \"http://www.w3.org/XML/1998/namespace\",\n","\t    xmlns: \"http://www.w3.org/2000/xmlns/\"\n","\t  };\n","\t  d3.ns = {\n","\t    prefix: d3_nsPrefix,\n","\t    qualify: function(name) {\n","\t      var i = name.indexOf(\":\"), prefix = name;\n","\t      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n","\t      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n","\t        space: d3_nsPrefix[prefix],\n","\t        local: name\n","\t      } : name;\n","\t    }\n","\t  };\n","\t  d3_selectionPrototype.attr = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") {\n","\t        var node = this.node();\n","\t        name = d3.ns.qualify(name);\n","\t        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n","\t      }\n","\t      for (value in name) this.each(d3_selection_attr(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_attr(name, value));\n","\t  };\n","\t  function d3_selection_attr(name, value) {\n","\t    name = d3.ns.qualify(name);\n","\t    function attrNull() {\n","\t      this.removeAttribute(name);\n","\t    }\n","\t    function attrNullNS() {\n","\t      this.removeAttributeNS(name.space, name.local);\n","\t    }\n","\t    function attrConstant() {\n","\t      this.setAttribute(name, value);\n","\t    }\n","\t    function attrConstantNS() {\n","\t      this.setAttributeNS(name.space, name.local, value);\n","\t    }\n","\t    function attrFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n","\t    }\n","\t    function attrFunctionNS() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n","\t    }\n","\t    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n","\t  }\n","\t  function d3_collapse(s) {\n","\t    return s.trim().replace(/\\s+/g, \" \");\n","\t  }\n","\t  d3_selectionPrototype.classed = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") {\n","\t        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n","\t        if (value = node.classList) {\n","\t          while (++i < n) if (!value.contains(name[i])) return false;\n","\t        } else {\n","\t          value = node.getAttribute(\"class\");\n","\t          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n","\t        }\n","\t        return true;\n","\t      }\n","\t      for (value in name) this.each(d3_selection_classed(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_classed(name, value));\n","\t  };\n","\t  function d3_selection_classedRe(name) {\n","\t    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n","\t  }\n","\t  function d3_selection_classes(name) {\n","\t    return (name + \"\").trim().split(/^|\\s+/);\n","\t  }\n","\t  function d3_selection_classed(name, value) {\n","\t    name = d3_selection_classes(name).map(d3_selection_classedName);\n","\t    var n = name.length;\n","\t    function classedConstant() {\n","\t      var i = -1;\n","\t      while (++i < n) name[i](this, value);\n","\t    }\n","\t    function classedFunction() {\n","\t      var i = -1, x = value.apply(this, arguments);\n","\t      while (++i < n) name[i](this, x);\n","\t    }\n","\t    return typeof value === \"function\" ? classedFunction : classedConstant;\n","\t  }\n","\t  function d3_selection_classedName(name) {\n","\t    var re = d3_selection_classedRe(name);\n","\t    return function(node, value) {\n","\t      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n","\t      var c = node.getAttribute(\"class\") || \"\";\n","\t      if (value) {\n","\t        re.lastIndex = 0;\n","\t        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n","\t      } else {\n","\t        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n","\t      }\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.style = function(name, value, priority) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof name !== \"string\") {\n","\t        if (n < 2) value = \"\";\n","\t        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n","\t        return this;\n","\t      }\n","\t      if (n < 2) {\n","\t        var node = this.node();\n","\t        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n","\t      }\n","\t      priority = \"\";\n","\t    }\n","\t    return this.each(d3_selection_style(name, value, priority));\n","\t  };\n","\t  function d3_selection_style(name, value, priority) {\n","\t    function styleNull() {\n","\t      this.style.removeProperty(name);\n","\t    }\n","\t    function styleConstant() {\n","\t      this.style.setProperty(name, value, priority);\n","\t    }\n","\t    function styleFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n","\t    }\n","\t    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n","\t  }\n","\t  d3_selectionPrototype.property = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") return this.node()[name];\n","\t      for (value in name) this.each(d3_selection_property(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_property(name, value));\n","\t  };\n","\t  function d3_selection_property(name, value) {\n","\t    function propertyNull() {\n","\t      delete this[name];\n","\t    }\n","\t    function propertyConstant() {\n","\t      this[name] = value;\n","\t    }\n","\t    function propertyFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) delete this[name]; else this[name] = x;\n","\t    }\n","\t    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n","\t  }\n","\t  d3_selectionPrototype.text = function(value) {\n","\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n","\t      var v = value.apply(this, arguments);\n","\t      this.textContent = v == null ? \"\" : v;\n","\t    } : value == null ? function() {\n","\t      this.textContent = \"\";\n","\t    } : function() {\n","\t      this.textContent = value;\n","\t    }) : this.node().textContent;\n","\t  };\n","\t  d3_selectionPrototype.html = function(value) {\n","\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n","\t      var v = value.apply(this, arguments);\n","\t      this.innerHTML = v == null ? \"\" : v;\n","\t    } : value == null ? function() {\n","\t      this.innerHTML = \"\";\n","\t    } : function() {\n","\t      this.innerHTML = value;\n","\t    }) : this.node().innerHTML;\n","\t  };\n","\t  d3_selectionPrototype.append = function(name) {\n","\t    name = d3_selection_creator(name);\n","\t    return this.select(function() {\n","\t      return this.appendChild(name.apply(this, arguments));\n","\t    });\n","\t  };\n","\t  function d3_selection_creator(name) {\n","\t    function create() {\n","\t      var document = this.ownerDocument, namespace = this.namespaceURI;\n","\t      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n","\t    }\n","\t    function createNS() {\n","\t      return this.ownerDocument.createElementNS(name.space, name.local);\n","\t    }\n","\t    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n","\t  }\n","\t  d3_selectionPrototype.insert = function(name, before) {\n","\t    name = d3_selection_creator(name);\n","\t    before = d3_selection_selector(before);\n","\t    return this.select(function() {\n","\t      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n","\t    });\n","\t  };\n","\t  d3_selectionPrototype.remove = function() {\n","\t    return this.each(d3_selectionRemove);\n","\t  };\n","\t  function d3_selectionRemove() {\n","\t    var parent = this.parentNode;\n","\t    if (parent) parent.removeChild(this);\n","\t  }\n","\t  d3_selectionPrototype.data = function(value, key) {\n","\t    var i = -1, n = this.length, group, node;\n","\t    if (!arguments.length) {\n","\t      value = new Array(n = (group = this[0]).length);\n","\t      while (++i < n) {\n","\t        if (node = group[i]) {\n","\t          value[i] = node.__data__;\n","\t        }\n","\t      }\n","\t      return value;\n","\t    }\n","\t    function bind(group, groupData) {\n","\t      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n","\t      if (key) {\n","\t        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n","\t        for (i = -1; ++i < n; ) {\n","\t          if (node = group[i]) {\n","\t            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n","\t              exitNodes[i] = node;\n","\t            } else {\n","\t              nodeByKeyValue.set(keyValue, node);\n","\t            }\n","\t            keyValues[i] = keyValue;\n","\t          }\n","\t        }\n","\t        for (i = -1; ++i < m; ) {\n","\t          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n","\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n","\t          } else if (node !== true) {\n","\t            updateNodes[i] = node;\n","\t            node.__data__ = nodeData;\n","\t          }\n","\t          nodeByKeyValue.set(keyValue, true);\n","\t        }\n","\t        for (i = -1; ++i < n; ) {\n","\t          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n","\t            exitNodes[i] = group[i];\n","\t          }\n","\t        }\n","\t      } else {\n","\t        for (i = -1; ++i < n0; ) {\n","\t          node = group[i];\n","\t          nodeData = groupData[i];\n","\t          if (node) {\n","\t            node.__data__ = nodeData;\n","\t            updateNodes[i] = node;\n","\t          } else {\n","\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n","\t          }\n","\t        }\n","\t        for (;i < m; ++i) {\n","\t          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n","\t        }\n","\t        for (;i < n; ++i) {\n","\t          exitNodes[i] = group[i];\n","\t        }\n","\t      }\n","\t      enterNodes.update = updateNodes;\n","\t      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n","\t      enter.push(enterNodes);\n","\t      update.push(updateNodes);\n","\t      exit.push(exitNodes);\n","\t    }\n","\t    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n","\t    if (typeof value === \"function\") {\n","\t      while (++i < n) {\n","\t        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n","\t      }\n","\t    } else {\n","\t      while (++i < n) {\n","\t        bind(group = this[i], value);\n","\t      }\n","\t    }\n","\t    update.enter = function() {\n","\t      return enter;\n","\t    };\n","\t    update.exit = function() {\n","\t      return exit;\n","\t    };\n","\t    return update;\n","\t  };\n","\t  function d3_selection_dataNode(data) {\n","\t    return {\n","\t      __data__: data\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.datum = function(value) {\n","\t    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n","\t  };\n","\t  d3_selectionPrototype.filter = function(filter) {\n","\t    var subgroups = [], subgroup, group, node;\n","\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = (group = this[j]).parentNode;\n","\t      for (var i = 0, n = group.length; i < n; i++) {\n","\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n","\t          subgroup.push(node);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_filter(selector) {\n","\t    return function() {\n","\t      return d3_selectMatches(this, selector);\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.order = function() {\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n","\t        if (node = group[i]) {\n","\t          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n","\t          next = node;\n","\t        }\n","\t      }\n","\t    }\n","\t    return this;\n","\t  };\n","\t  d3_selectionPrototype.sort = function(comparator) {\n","\t    comparator = d3_selection_sortComparator.apply(this, arguments);\n","\t    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n","\t    return this.order();\n","\t  };\n","\t  function d3_selection_sortComparator(comparator) {\n","\t    if (!arguments.length) comparator = d3_ascending;\n","\t    return function(a, b) {\n","\t      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.each = function(callback) {\n","\t    return d3_selection_each(this, function(node, i, j) {\n","\t      callback.call(node, node.__data__, i, j);\n","\t    });\n","\t  };\n","\t  function d3_selection_each(groups, callback) {\n","\t    for (var j = 0, m = groups.length; j < m; j++) {\n","\t      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n","\t        if (node = group[i]) callback(node, i, j);\n","\t      }\n","\t    }\n","\t    return groups;\n","\t  }\n","\t  d3_selectionPrototype.call = function(callback) {\n","\t    var args = d3_array(arguments);\n","\t    callback.apply(args[0] = this, args);\n","\t    return this;\n","\t  };\n","\t  d3_selectionPrototype.empty = function() {\n","\t    return !this.node();\n","\t  };\n","\t  d3_selectionPrototype.node = function() {\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        var node = group[i];\n","\t        if (node) return node;\n","\t      }\n","\t    }\n","\t    return null;\n","\t  };\n","\t  d3_selectionPrototype.size = function() {\n","\t    var n = 0;\n","\t    d3_selection_each(this, function() {\n","\t      ++n;\n","\t    });\n","\t    return n;\n","\t  };\n","\t  function d3_selection_enter(selection) {\n","\t    d3_subclass(selection, d3_selection_enterPrototype);\n","\t    return selection;\n","\t  }\n","\t  var d3_selection_enterPrototype = [];\n","\t  d3.selection.enter = d3_selection_enter;\n","\t  d3.selection.enter.prototype = d3_selection_enterPrototype;\n","\t  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n","\t  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n","\t  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n","\t  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n","\t  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n","\t  d3_selection_enterPrototype.select = function(selector) {\n","\t    var subgroups = [], subgroup, subnode, upgroup, group, node;\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      upgroup = (group = this[j]).update;\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = group.parentNode;\n","\t      for (var i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n","\t          subnode.__data__ = node.__data__;\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  d3_selection_enterPrototype.insert = function(name, before) {\n","\t    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n","\t    return d3_selectionPrototype.insert.call(this, name, before);\n","\t  };\n","\t  function d3_selection_enterInsertBefore(enter) {\n","\t    var i0, j0;\n","\t    return function(d, i, j) {\n","\t      var group = enter[j].update, n = group.length, node;\n","\t      if (j != j0) j0 = j, i0 = 0;\n","\t      if (i >= i0) i0 = i + 1;\n","\t      while (!(node = group[i0]) && ++i0 < n) ;\n","\t      return node;\n","\t    };\n","\t  }\n","\t  d3.select = function(node) {\n","\t    var group;\n","\t    if (typeof node === \"string\") {\n","\t      group = [ d3_select(node, d3_document) ];\n","\t      group.parentNode = d3_document.documentElement;\n","\t    } else {\n","\t      group = [ node ];\n","\t      group.parentNode = d3_documentElement(node);\n","\t    }\n","\t    return d3_selection([ group ]);\n","\t  };\n","\t  d3.selectAll = function(nodes) {\n","\t    var group;\n","\t    if (typeof nodes === \"string\") {\n","\t      group = d3_array(d3_selectAll(nodes, d3_document));\n","\t      group.parentNode = d3_document.documentElement;\n","\t    } else {\n","\t      group = d3_array(nodes);\n","\t      group.parentNode = null;\n","\t    }\n","\t    return d3_selection([ group ]);\n","\t  };\n","\t  d3_selectionPrototype.on = function(type, listener, capture) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof type !== \"string\") {\n","\t        if (n < 2) listener = false;\n","\t        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n","\t        return this;\n","\t      }\n","\t      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n","\t      capture = false;\n","\t    }\n","\t    return this.each(d3_selection_on(type, listener, capture));\n","\t  };\n","\t  function d3_selection_on(type, listener, capture) {\n","\t    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n","\t    if (i > 0) type = type.slice(0, i);\n","\t    var filter = d3_selection_onFilters.get(type);\n","\t    if (filter) type = filter, wrap = d3_selection_onFilter;\n","\t    function onRemove() {\n","\t      var l = this[name];\n","\t      if (l) {\n","\t        this.removeEventListener(type, l, l.$);\n","\t        delete this[name];\n","\t      }\n","\t    }\n","\t    function onAdd() {\n","\t      var l = wrap(listener, d3_array(arguments));\n","\t      onRemove.call(this);\n","\t      this.addEventListener(type, this[name] = l, l.$ = capture);\n","\t      l._ = listener;\n","\t    }\n","\t    function removeAll() {\n","\t      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n","\t      for (var name in this) {\n","\t        if (match = name.match(re)) {\n","\t          var l = this[name];\n","\t          this.removeEventListener(match[1], l, l.$);\n","\t          delete this[name];\n","\t        }\n","\t      }\n","\t    }\n","\t    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n","\t  }\n","\t  var d3_selection_onFilters = d3.map({\n","\t    mouseenter: \"mouseover\",\n","\t    mouseleave: \"mouseout\"\n","\t  });\n","\t  if (d3_document) {\n","\t    d3_selection_onFilters.forEach(function(k) {\n","\t      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n","\t    });\n","\t  }\n","\t  function d3_selection_onListener(listener, argumentz) {\n","\t    return function(e) {\n","\t      var o = d3.event;\n","\t      d3.event = e;\n","\t      argumentz[0] = this.__data__;\n","\t      try {\n","\t        listener.apply(this, argumentz);\n","\t      } finally {\n","\t        d3.event = o;\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_selection_onFilter(listener, argumentz) {\n","\t    var l = d3_selection_onListener(listener, argumentz);\n","\t    return function(e) {\n","\t      var target = this, related = e.relatedTarget;\n","\t      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n","\t        l.call(target, e);\n","\t      }\n","\t    };\n","\t  }\n","\t  var d3_event_dragSelect, d3_event_dragId = 0;\n","\t  function d3_event_dragSuppress(node) {\n","\t    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n","\t    if (d3_event_dragSelect == null) {\n","\t      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n","\t    }\n","\t    if (d3_event_dragSelect) {\n","\t      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n","\t      style[d3_event_dragSelect] = \"none\";\n","\t    }\n","\t    return function(suppressClick) {\n","\t      w.on(name, null);\n","\t      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n","\t      if (suppressClick) {\n","\t        var off = function() {\n","\t          w.on(click, null);\n","\t        };\n","\t        w.on(click, function() {\n","\t          d3_eventPreventDefault();\n","\t          off();\n","\t        }, true);\n","\t        setTimeout(off, 0);\n","\t      }\n","\t    };\n","\t  }\n","\t  d3.mouse = function(container) {\n","\t    return d3_mousePoint(container, d3_eventSource());\n","\t  };\n","\t  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n","\t  function d3_mousePoint(container, e) {\n","\t    if (e.changedTouches) e = e.changedTouches[0];\n","\t    var svg = container.ownerSVGElement || container;\n","\t    if (svg.createSVGPoint) {\n","\t      var point = svg.createSVGPoint();\n","\t      if (d3_mouse_bug44083 < 0) {\n","\t        var window = d3_window(container);\n","\t        if (window.scrollX || window.scrollY) {\n","\t          svg = d3.select(\"body\").append(\"svg\").style({\n","\t            position: \"absolute\",\n","\t            top: 0,\n","\t            left: 0,\n","\t            margin: 0,\n","\t            padding: 0,\n","\t            border: \"none\"\n","\t          }, \"important\");\n","\t          var ctm = svg[0][0].getScreenCTM();\n","\t          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n","\t          svg.remove();\n","\t        }\n","\t      }\n","\t      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n","\t      point.y = e.clientY;\n","\t      point = point.matrixTransform(container.getScreenCTM().inverse());\n","\t      return [ point.x, point.y ];\n","\t    }\n","\t    var rect = container.getBoundingClientRect();\n","\t    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n","\t  }\n","\t  d3.touch = function(container, touches, identifier) {\n","\t    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n","\t    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n","\t      if ((touch = touches[i]).identifier === identifier) {\n","\t        return d3_mousePoint(container, touch);\n","\t      }\n","\t    }\n","\t  };\n","\t  d3.behavior.drag = function() {\n","\t    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n","\t    function drag() {\n","\t      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n","\t    }\n","\t    function dragstart(id, position, subject, move, end) {\n","\t      return function() {\n","\t        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n","\t        if (origin) {\n","\t          dragOffset = origin.apply(that, arguments);\n","\t          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n","\t        } else {\n","\t          dragOffset = [ 0, 0 ];\n","\t        }\n","\t        dispatch({\n","\t          type: \"dragstart\"\n","\t        });\n","\t        function moved() {\n","\t          var position1 = position(parent, dragId), dx, dy;\n","\t          if (!position1) return;\n","\t          dx = position1[0] - position0[0];\n","\t          dy = position1[1] - position0[1];\n","\t          dragged |= dx | dy;\n","\t          position0 = position1;\n","\t          dispatch({\n","\t            type: \"drag\",\n","\t            x: position1[0] + dragOffset[0],\n","\t            y: position1[1] + dragOffset[1],\n","\t            dx: dx,\n","\t            dy: dy\n","\t          });\n","\t        }\n","\t        function ended() {\n","\t          if (!position(parent, dragId)) return;\n","\t          dragSubject.on(move + dragName, null).on(end + dragName, null);\n","\t          dragRestore(dragged);\n","\t          dispatch({\n","\t            type: \"dragend\"\n","\t          });\n","\t        }\n","\t      };\n","\t    }\n","\t    drag.origin = function(x) {\n","\t      if (!arguments.length) return origin;\n","\t      origin = x;\n","\t      return drag;\n","\t    };\n","\t    return d3.rebind(drag, event, \"on\");\n","\t  };\n","\t  function d3_behavior_dragTouchId() {\n","\t    return d3.event.changedTouches[0].identifier;\n","\t  }\n","\t  d3.touches = function(container, touches) {\n","\t    if (arguments.length < 2) touches = d3_eventSource().touches;\n","\t    return touches ? d3_array(touches).map(function(touch) {\n","\t      var point = d3_mousePoint(container, touch);\n","\t      point.identifier = touch.identifier;\n","\t      return point;\n","\t    }) : [];\n","\t  };\n","\t  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n","\t  function d3_sgn(x) {\n","\t    return x > 0 ? 1 : x < 0 ? -1 : 0;\n","\t  }\n","\t  function d3_cross2d(a, b, c) {\n","\t    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n","\t  }\n","\t  function d3_acos(x) {\n","\t    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n","\t  }\n","\t  function d3_asin(x) {\n","\t    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n","\t  }\n","\t  function d3_sinh(x) {\n","\t    return ((x = Math.exp(x)) - 1 / x) / 2;\n","\t  }\n","\t  function d3_cosh(x) {\n","\t    return ((x = Math.exp(x)) + 1 / x) / 2;\n","\t  }\n","\t  function d3_tanh(x) {\n","\t    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n","\t  }\n","\t  function d3_haversin(x) {\n","\t    return (x = Math.sin(x / 2)) * x;\n","\t  }\n","\t  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n","\t  d3.interpolateZoom = function(p0, p1) {\n","\t    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n","\t    if (d2 < ε2) {\n","\t      S = Math.log(w1 / w0) / ρ;\n","\t      i = function(t) {\n","\t        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n","\t      };\n","\t    } else {\n","\t      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n","\t      S = (r1 - r0) / ρ;\n","\t      i = function(t) {\n","\t        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n","\t        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n","\t      };\n","\t    }\n","\t    i.duration = S * 1e3;\n","\t    return i;\n","\t  };\n","\t  d3.behavior.zoom = function() {\n","\t    var view = {\n","\t      x: 0,\n","\t      y: 0,\n","\t      k: 1\n","\t    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n","\t    if (!d3_behavior_zoomWheel) {\n","\t      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n","\t        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n","\t      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n","\t        return d3.event.wheelDelta;\n","\t      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n","\t        return -d3.event.detail;\n","\t      }, \"MozMousePixelScroll\");\n","\t    }\n","\t    function zoom(g) {\n","\t      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n","\t    }\n","\t    zoom.event = function(g) {\n","\t      g.each(function() {\n","\t        var dispatch = event.of(this, arguments), view1 = view;\n","\t        if (d3_transitionInheritId) {\n","\t          d3.select(this).transition().each(\"start.zoom\", function() {\n","\t            view = this.__chart__ || {\n","\t              x: 0,\n","\t              y: 0,\n","\t              k: 1\n","\t            };\n","\t            zoomstarted(dispatch);\n","\t          }).tween(\"zoom:zoom\", function() {\n","\t            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n","\t            return function(t) {\n","\t              var l = i(t), k = dx / l[2];\n","\t              this.__chart__ = view = {\n","\t                x: cx - l[0] * k,\n","\t                y: cy - l[1] * k,\n","\t                k: k\n","\t              };\n","\t              zoomed(dispatch);\n","\t            };\n","\t          }).each(\"interrupt.zoom\", function() {\n","\t            zoomended(dispatch);\n","\t          }).each(\"end.zoom\", function() {\n","\t            zoomended(dispatch);\n","\t          });\n","\t        } else {\n","\t          this.__chart__ = view;\n","\t          zoomstarted(dispatch);\n","\t          zoomed(dispatch);\n","\t          zoomended(dispatch);\n","\t        }\n","\t      });\n","\t    };\n","\t    zoom.translate = function(_) {\n","\t      if (!arguments.length) return [ view.x, view.y ];\n","\t      view = {\n","\t        x: +_[0],\n","\t        y: +_[1],\n","\t        k: view.k\n","\t      };\n","\t      rescale();\n","\t      return zoom;\n","\t    };\n","\t    zoom.scale = function(_) {\n","\t      if (!arguments.length) return view.k;\n","\t      view = {\n","\t        x: view.x,\n","\t        y: view.y,\n","\t        k: null\n","\t      };\n","\t      scaleTo(+_);\n","\t      rescale();\n","\t      return zoom;\n","\t    };\n","\t    zoom.scaleExtent = function(_) {\n","\t      if (!arguments.length) return scaleExtent;\n","\t      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.center = function(_) {\n","\t      if (!arguments.length) return center;\n","\t      center = _ && [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.size = function(_) {\n","\t      if (!arguments.length) return size;\n","\t      size = _ && [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.duration = function(_) {\n","\t      if (!arguments.length) return duration;\n","\t      duration = +_;\n","\t      return zoom;\n","\t    };\n","\t    zoom.x = function(z) {\n","\t      if (!arguments.length) return x1;\n","\t      x1 = z;\n","\t      x0 = z.copy();\n","\t      view = {\n","\t        x: 0,\n","\t        y: 0,\n","\t        k: 1\n","\t      };\n","\t      return zoom;\n","\t    };\n","\t    zoom.y = function(z) {\n","\t      if (!arguments.length) return y1;\n","\t      y1 = z;\n","\t      y0 = z.copy();\n","\t      view = {\n","\t        x: 0,\n","\t        y: 0,\n","\t        k: 1\n","\t      };\n","\t      return zoom;\n","\t    };\n","\t    function location(p) {\n","\t      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n","\t    }\n","\t    function point(l) {\n","\t      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n","\t    }\n","\t    function scaleTo(s) {\n","\t      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n","\t    }\n","\t    function translateTo(p, l) {\n","\t      l = point(l);\n","\t      view.x += p[0] - l[0];\n","\t      view.y += p[1] - l[1];\n","\t    }\n","\t    function zoomTo(that, p, l, k) {\n","\t      that.__chart__ = {\n","\t        x: view.x,\n","\t        y: view.y,\n","\t        k: view.k\n","\t      };\n","\t      scaleTo(Math.pow(2, k));\n","\t      translateTo(center0 = p, l);\n","\t      that = d3.select(that);\n","\t      if (duration > 0) that = that.transition().duration(duration);\n","\t      that.call(zoom.event);\n","\t    }\n","\t    function rescale() {\n","\t      if (x1) x1.domain(x0.range().map(function(x) {\n","\t        return (x - view.x) / view.k;\n","\t      }).map(x0.invert));\n","\t      if (y1) y1.domain(y0.range().map(function(y) {\n","\t        return (y - view.y) / view.k;\n","\t      }).map(y0.invert));\n","\t    }\n","\t    function zoomstarted(dispatch) {\n","\t      if (!zooming++) dispatch({\n","\t        type: \"zoomstart\"\n","\t      });\n","\t    }\n","\t    function zoomed(dispatch) {\n","\t      rescale();\n","\t      dispatch({\n","\t        type: \"zoom\",\n","\t        scale: view.k,\n","\t        translate: [ view.x, view.y ]\n","\t      });\n","\t    }\n","\t    function zoomended(dispatch) {\n","\t      if (!--zooming) dispatch({\n","\t        type: \"zoomend\"\n","\t      }), center0 = null;\n","\t    }\n","\t    function mousedowned() {\n","\t      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n","\t      d3_selection_interrupt.call(that);\n","\t      zoomstarted(dispatch);\n","\t      function moved() {\n","\t        dragged = 1;\n","\t        translateTo(d3.mouse(that), location0);\n","\t        zoomed(dispatch);\n","\t      }\n","\t      function ended() {\n","\t        subject.on(mousemove, null).on(mouseup, null);\n","\t        dragRestore(dragged);\n","\t        zoomended(dispatch);\n","\t      }\n","\t    }\n","\t    function touchstarted() {\n","\t      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n","\t      started();\n","\t      zoomstarted(dispatch);\n","\t      subject.on(mousedown, null).on(touchstart, started);\n","\t      function relocate() {\n","\t        var touches = d3.touches(that);\n","\t        scale0 = view.k;\n","\t        touches.forEach(function(t) {\n","\t          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n","\t        });\n","\t        return touches;\n","\t      }\n","\t      function started() {\n","\t        var target = d3.event.target;\n","\t        d3.select(target).on(touchmove, moved).on(touchend, ended);\n","\t        targets.push(target);\n","\t        var changed = d3.event.changedTouches;\n","\t        for (var i = 0, n = changed.length; i < n; ++i) {\n","\t          locations0[changed[i].identifier] = null;\n","\t        }\n","\t        var touches = relocate(), now = Date.now();\n","\t        if (touches.length === 1) {\n","\t          if (now - touchtime < 500) {\n","\t            var p = touches[0];\n","\t            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n","\t            d3_eventPreventDefault();\n","\t          }\n","\t          touchtime = now;\n","\t        } else if (touches.length > 1) {\n","\t          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n","\t          distance0 = dx * dx + dy * dy;\n","\t        }\n","\t      }\n","\t      function moved() {\n","\t        var touches = d3.touches(that), p0, l0, p1, l1;\n","\t        d3_selection_interrupt.call(that);\n","\t        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n","\t          p1 = touches[i];\n","\t          if (l1 = locations0[p1.identifier]) {\n","\t            if (l0) break;\n","\t            p0 = p1, l0 = l1;\n","\t          }\n","\t        }\n","\t        if (l1) {\n","\t          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n","\t          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n","\t          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n","\t          scaleTo(scale1 * scale0);\n","\t        }\n","\t        touchtime = null;\n","\t        translateTo(p0, l0);\n","\t        zoomed(dispatch);\n","\t      }\n","\t      function ended() {\n","\t        if (d3.event.touches.length) {\n","\t          var changed = d3.event.changedTouches;\n","\t          for (var i = 0, n = changed.length; i < n; ++i) {\n","\t            delete locations0[changed[i].identifier];\n","\t          }\n","\t          for (var identifier in locations0) {\n","\t            return void relocate();\n","\t          }\n","\t        }\n","\t        d3.selectAll(targets).on(zoomName, null);\n","\t        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n","\t        dragRestore();\n","\t        zoomended(dispatch);\n","\t      }\n","\t    }\n","\t    function mousewheeled() {\n","\t      var dispatch = event.of(this, arguments);\n","\t      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n","\t      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n","\t      mousewheelTimer = setTimeout(function() {\n","\t        mousewheelTimer = null;\n","\t        zoomended(dispatch);\n","\t      }, 50);\n","\t      d3_eventPreventDefault();\n","\t      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n","\t      translateTo(center0, translate0);\n","\t      zoomed(dispatch);\n","\t    }\n","\t    function dblclicked() {\n","\t      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n","\t      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n","\t    }\n","\t    return d3.rebind(zoom, event, \"on\");\n","\t  };\n","\t  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n","\t  d3.color = d3_color;\n","\t  function d3_color() {}\n","\t  d3_color.prototype.toString = function() {\n","\t    return this.rgb() + \"\";\n","\t  };\n","\t  d3.hsl = d3_hsl;\n","\t  function d3_hsl(h, s, l) {\n","\t    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n","\t  }\n","\t  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n","\t  d3_hslPrototype.brighter = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_hsl(this.h, this.s, this.l / k);\n","\t  };\n","\t  d3_hslPrototype.darker = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_hsl(this.h, this.s, k * this.l);\n","\t  };\n","\t  d3_hslPrototype.rgb = function() {\n","\t    return d3_hsl_rgb(this.h, this.s, this.l);\n","\t  };\n","\t  function d3_hsl_rgb(h, s, l) {\n","\t    var m1, m2;\n","\t    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n","\t    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n","\t    l = l < 0 ? 0 : l > 1 ? 1 : l;\n","\t    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n","\t    m1 = 2 * l - m2;\n","\t    function v(h) {\n","\t      if (h > 360) h -= 360; else if (h < 0) h += 360;\n","\t      if (h < 60) return m1 + (m2 - m1) * h / 60;\n","\t      if (h < 180) return m2;\n","\t      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n","\t      return m1;\n","\t    }\n","\t    function vv(h) {\n","\t      return Math.round(v(h) * 255);\n","\t    }\n","\t    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n","\t  }\n","\t  d3.hcl = d3_hcl;\n","\t  function d3_hcl(h, c, l) {\n","\t    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n","\t  }\n","\t  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n","\t  d3_hclPrototype.brighter = function(k) {\n","\t    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n","\t  };\n","\t  d3_hclPrototype.darker = function(k) {\n","\t    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n","\t  };\n","\t  d3_hclPrototype.rgb = function() {\n","\t    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n","\t  };\n","\t  function d3_hcl_lab(h, c, l) {\n","\t    if (isNaN(h)) h = 0;\n","\t    if (isNaN(c)) c = 0;\n","\t    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n","\t  }\n","\t  d3.lab = d3_lab;\n","\t  function d3_lab(l, a, b) {\n","\t    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n","\t  }\n","\t  var d3_lab_K = 18;\n","\t  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n","\t  var d3_labPrototype = d3_lab.prototype = new d3_color();\n","\t  d3_labPrototype.brighter = function(k) {\n","\t    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n","\t  };\n","\t  d3_labPrototype.darker = function(k) {\n","\t    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n","\t  };\n","\t  d3_labPrototype.rgb = function() {\n","\t    return d3_lab_rgb(this.l, this.a, this.b);\n","\t  };\n","\t  function d3_lab_rgb(l, a, b) {\n","\t    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n","\t    x = d3_lab_xyz(x) * d3_lab_X;\n","\t    y = d3_lab_xyz(y) * d3_lab_Y;\n","\t    z = d3_lab_xyz(z) * d3_lab_Z;\n","\t    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n","\t  }\n","\t  function d3_lab_hcl(l, a, b) {\n","\t    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n","\t  }\n","\t  function d3_lab_xyz(x) {\n","\t    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n","\t  }\n","\t  function d3_xyz_lab(x) {\n","\t    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n","\t  }\n","\t  function d3_xyz_rgb(r) {\n","\t    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n","\t  }\n","\t  d3.rgb = d3_rgb;\n","\t  function d3_rgb(r, g, b) {\n","\t    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n","\t  }\n","\t  function d3_rgbNumber(value) {\n","\t    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n","\t  }\n","\t  function d3_rgbString(value) {\n","\t    return d3_rgbNumber(value) + \"\";\n","\t  }\n","\t  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n","\t  d3_rgbPrototype.brighter = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    var r = this.r, g = this.g, b = this.b, i = 30;\n","\t    if (!r && !g && !b) return new d3_rgb(i, i, i);\n","\t    if (r && r < i) r = i;\n","\t    if (g && g < i) g = i;\n","\t    if (b && b < i) b = i;\n","\t    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n","\t  };\n","\t  d3_rgbPrototype.darker = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n","\t  };\n","\t  d3_rgbPrototype.hsl = function() {\n","\t    return d3_rgb_hsl(this.r, this.g, this.b);\n","\t  };\n","\t  d3_rgbPrototype.toString = function() {\n","\t    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n","\t  };\n","\t  function d3_rgb_hex(v) {\n","\t    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n","\t  }\n","\t  function d3_rgb_parse(format, rgb, hsl) {\n","\t    var r = 0, g = 0, b = 0, m1, m2, color;\n","\t    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n","\t    if (m1) {\n","\t      m2 = m1[2].split(\",\");\n","\t      switch (m1[1]) {\n","\t       case \"hsl\":\n","\t        {\n","\t          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n","\t        }\n","\t\n","\t       case \"rgb\":\n","\t        {\n","\t          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n","\t        }\n","\t      }\n","\t    }\n","\t    if (color = d3_rgb_names.get(format)) {\n","\t      return rgb(color.r, color.g, color.b);\n","\t    }\n","\t    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n","\t      if (format.length === 4) {\n","\t        r = (color & 3840) >> 4;\n","\t        r = r >> 4 | r;\n","\t        g = color & 240;\n","\t        g = g >> 4 | g;\n","\t        b = color & 15;\n","\t        b = b << 4 | b;\n","\t      } else if (format.length === 7) {\n","\t        r = (color & 16711680) >> 16;\n","\t        g = (color & 65280) >> 8;\n","\t        b = color & 255;\n","\t      }\n","\t    }\n","\t    return rgb(r, g, b);\n","\t  }\n","\t  function d3_rgb_hsl(r, g, b) {\n","\t    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n","\t    if (d) {\n","\t      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n","\t      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n","\t      h *= 60;\n","\t    } else {\n","\t      h = NaN;\n","\t      s = l > 0 && l < 1 ? 0 : h;\n","\t    }\n","\t    return new d3_hsl(h, s, l);\n","\t  }\n","\t  function d3_rgb_lab(r, g, b) {\n","\t    r = d3_rgb_xyz(r);\n","\t    g = d3_rgb_xyz(g);\n","\t    b = d3_rgb_xyz(b);\n","\t    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n","\t    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n","\t  }\n","\t  function d3_rgb_xyz(r) {\n","\t    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n","\t  }\n","\t  function d3_rgb_parseNumber(c) {\n","\t    var f = parseFloat(c);\n","\t    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n","\t  }\n","\t  var d3_rgb_names = d3.map({\n","\t    aliceblue: 15792383,\n","\t    antiquewhite: 16444375,\n","\t    aqua: 65535,\n","\t    aquamarine: 8388564,\n","\t    azure: 15794175,\n","\t    beige: 16119260,\n","\t    bisque: 16770244,\n","\t    black: 0,\n","\t    blanchedalmond: 16772045,\n","\t    blue: 255,\n","\t    blueviolet: 9055202,\n","\t    brown: 10824234,\n","\t    burlywood: 14596231,\n","\t    cadetblue: 6266528,\n","\t    chartreuse: 8388352,\n","\t    chocolate: 13789470,\n","\t    coral: 16744272,\n","\t    cornflowerblue: 6591981,\n","\t    cornsilk: 16775388,\n","\t    crimson: 14423100,\n","\t    cyan: 65535,\n","\t    darkblue: 139,\n","\t    darkcyan: 35723,\n","\t    darkgoldenrod: 12092939,\n","\t    darkgray: 11119017,\n","\t    darkgreen: 25600,\n","\t    darkgrey: 11119017,\n","\t    darkkhaki: 12433259,\n","\t    darkmagenta: 9109643,\n","\t    darkolivegreen: 5597999,\n","\t    darkorange: 16747520,\n","\t    darkorchid: 10040012,\n","\t    darkred: 9109504,\n","\t    darksalmon: 15308410,\n","\t    darkseagreen: 9419919,\n","\t    darkslateblue: 4734347,\n","\t    darkslategray: 3100495,\n","\t    darkslategrey: 3100495,\n","\t    darkturquoise: 52945,\n","\t    darkviolet: 9699539,\n","\t    deeppink: 16716947,\n","\t    deepskyblue: 49151,\n","\t    dimgray: 6908265,\n","\t    dimgrey: 6908265,\n","\t    dodgerblue: 2003199,\n","\t    firebrick: 11674146,\n","\t    floralwhite: 16775920,\n","\t    forestgreen: 2263842,\n","\t    fuchsia: 16711935,\n","\t    gainsboro: 14474460,\n","\t    ghostwhite: 16316671,\n","\t    gold: 16766720,\n","\t    goldenrod: 14329120,\n","\t    gray: 8421504,\n","\t    green: 32768,\n","\t    greenyellow: 11403055,\n","\t    grey: 8421504,\n","\t    honeydew: 15794160,\n","\t    hotpink: 16738740,\n","\t    indianred: 13458524,\n","\t    indigo: 4915330,\n","\t    ivory: 16777200,\n","\t    khaki: 15787660,\n","\t    lavender: 15132410,\n","\t    lavenderblush: 16773365,\n","\t    lawngreen: 8190976,\n","\t    lemonchiffon: 16775885,\n","\t    lightblue: 11393254,\n","\t    lightcoral: 15761536,\n","\t    lightcyan: 14745599,\n","\t    lightgoldenrodyellow: 16448210,\n","\t    lightgray: 13882323,\n","\t    lightgreen: 9498256,\n","\t    lightgrey: 13882323,\n","\t    lightpink: 16758465,\n","\t    lightsalmon: 16752762,\n","\t    lightseagreen: 2142890,\n","\t    lightskyblue: 8900346,\n","\t    lightslategray: 7833753,\n","\t    lightslategrey: 7833753,\n","\t    lightsteelblue: 11584734,\n","\t    lightyellow: 16777184,\n","\t    lime: 65280,\n","\t    limegreen: 3329330,\n","\t    linen: 16445670,\n","\t    magenta: 16711935,\n","\t    maroon: 8388608,\n","\t    mediumaquamarine: 6737322,\n","\t    mediumblue: 205,\n","\t    mediumorchid: 12211667,\n","\t    mediumpurple: 9662683,\n","\t    mediumseagreen: 3978097,\n","\t    mediumslateblue: 8087790,\n","\t    mediumspringgreen: 64154,\n","\t    mediumturquoise: 4772300,\n","\t    mediumvioletred: 13047173,\n","\t    midnightblue: 1644912,\n","\t    mintcream: 16121850,\n","\t    mistyrose: 16770273,\n","\t    moccasin: 16770229,\n","\t    navajowhite: 16768685,\n","\t    navy: 128,\n","\t    oldlace: 16643558,\n","\t    olive: 8421376,\n","\t    olivedrab: 7048739,\n","\t    orange: 16753920,\n","\t    orangered: 16729344,\n","\t    orchid: 14315734,\n","\t    palegoldenrod: 15657130,\n","\t    palegreen: 10025880,\n","\t    paleturquoise: 11529966,\n","\t    palevioletred: 14381203,\n","\t    papayawhip: 16773077,\n","\t    peachpuff: 16767673,\n","\t    peru: 13468991,\n","\t    pink: 16761035,\n","\t    plum: 14524637,\n","\t    powderblue: 11591910,\n","\t    purple: 8388736,\n","\t    rebeccapurple: 6697881,\n","\t    red: 16711680,\n","\t    rosybrown: 12357519,\n","\t    royalblue: 4286945,\n","\t    saddlebrown: 9127187,\n","\t    salmon: 16416882,\n","\t    sandybrown: 16032864,\n","\t    seagreen: 3050327,\n","\t    seashell: 16774638,\n","\t    sienna: 10506797,\n","\t    silver: 12632256,\n","\t    skyblue: 8900331,\n","\t    slateblue: 6970061,\n","\t    slategray: 7372944,\n","\t    slategrey: 7372944,\n","\t    snow: 16775930,\n","\t    springgreen: 65407,\n","\t    steelblue: 4620980,\n","\t    tan: 13808780,\n","\t    teal: 32896,\n","\t    thistle: 14204888,\n","\t    tomato: 16737095,\n","\t    turquoise: 4251856,\n","\t    violet: 15631086,\n","\t    wheat: 16113331,\n","\t    white: 16777215,\n","\t    whitesmoke: 16119285,\n","\t    yellow: 16776960,\n","\t    yellowgreen: 10145074\n","\t  });\n","\t  d3_rgb_names.forEach(function(key, value) {\n","\t    d3_rgb_names.set(key, d3_rgbNumber(value));\n","\t  });\n","\t  function d3_functor(v) {\n","\t    return typeof v === \"function\" ? v : function() {\n","\t      return v;\n","\t    };\n","\t  }\n","\t  d3.functor = d3_functor;\n","\t  d3.xhr = d3_xhrType(d3_identity);\n","\t  function d3_xhrType(response) {\n","\t    return function(url, mimeType, callback) {\n","\t      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n","\t      mimeType = null;\n","\t      return d3_xhr(url, mimeType, response, callback);\n","\t    };\n","\t  }\n","\t  function d3_xhr(url, mimeType, response, callback) {\n","\t    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n","\t    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n","\t    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n","\t      request.readyState > 3 && respond();\n","\t    };\n","\t    function respond() {\n","\t      var status = request.status, result;\n","\t      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n","\t        try {\n","\t          result = response.call(xhr, request);\n","\t        } catch (e) {\n","\t          dispatch.error.call(xhr, e);\n","\t          return;\n","\t        }\n","\t        dispatch.load.call(xhr, result);\n","\t      } else {\n","\t        dispatch.error.call(xhr, request);\n","\t      }\n","\t    }\n","\t    request.onprogress = function(event) {\n","\t      var o = d3.event;\n","\t      d3.event = event;\n","\t      try {\n","\t        dispatch.progress.call(xhr, request);\n","\t      } finally {\n","\t        d3.event = o;\n","\t      }\n","\t    };\n","\t    xhr.header = function(name, value) {\n","\t      name = (name + \"\").toLowerCase();\n","\t      if (arguments.length < 2) return headers[name];\n","\t      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n","\t      return xhr;\n","\t    };\n","\t    xhr.mimeType = function(value) {\n","\t      if (!arguments.length) return mimeType;\n","\t      mimeType = value == null ? null : value + \"\";\n","\t      return xhr;\n","\t    };\n","\t    xhr.responseType = function(value) {\n","\t      if (!arguments.length) return responseType;\n","\t      responseType = value;\n","\t      return xhr;\n","\t    };\n","\t    xhr.response = function(value) {\n","\t      response = value;\n","\t      return xhr;\n","\t    };\n","\t    [ \"get\", \"post\" ].forEach(function(method) {\n","\t      xhr[method] = function() {\n","\t        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n","\t      };\n","\t    });\n","\t    xhr.send = function(method, data, callback) {\n","\t      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n","\t      request.open(method, url, true);\n","\t      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n","\t      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n","\t      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n","\t      if (responseType != null) request.responseType = responseType;\n","\t      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n","\t        callback(null, request);\n","\t      });\n","\t      dispatch.beforesend.call(xhr, request);\n","\t      request.send(data == null ? null : data);\n","\t      return xhr;\n","\t    };\n","\t    xhr.abort = function() {\n","\t      request.abort();\n","\t      return xhr;\n","\t    };\n","\t    d3.rebind(xhr, dispatch, \"on\");\n","\t    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n","\t  }\n","\t  function d3_xhr_fixCallback(callback) {\n","\t    return callback.length === 1 ? function(error, request) {\n","\t      callback(error == null ? request : null);\n","\t    } : callback;\n","\t  }\n","\t  function d3_xhrHasResponse(request) {\n","\t    var type = request.responseType;\n","\t    return type && type !== \"text\" ? request.response : request.responseText;\n","\t  }\n","\t  d3.dsv = function(delimiter, mimeType) {\n","\t    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n","\t    function dsv(url, row, callback) {\n","\t      if (arguments.length < 3) callback = row, row = null;\n","\t      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n","\t      xhr.row = function(_) {\n","\t        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n","\t      };\n","\t      return xhr;\n","\t    }\n","\t    function response(request) {\n","\t      return dsv.parse(request.responseText);\n","\t    }\n","\t    function typedResponse(f) {\n","\t      return function(request) {\n","\t        return dsv.parse(request.responseText, f);\n","\t      };\n","\t    }\n","\t    dsv.parse = function(text, f) {\n","\t      var o;\n","\t      return dsv.parseRows(text, function(row, i) {\n","\t        if (o) return o(row, i - 1);\n","\t        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n","\t          return JSON.stringify(name) + \": d[\" + i + \"]\";\n","\t        }).join(\",\") + \"}\");\n","\t        o = f ? function(row, i) {\n","\t          return f(a(row), i);\n","\t        } : a;\n","\t      });\n","\t    };\n","\t    dsv.parseRows = function(text, f) {\n","\t      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n","\t      function token() {\n","\t        if (I >= N) return EOF;\n","\t        if (eol) return eol = false, EOL;\n","\t        var j = I;\n","\t        if (text.charCodeAt(j) === 34) {\n","\t          var i = j;\n","\t          while (i++ < N) {\n","\t            if (text.charCodeAt(i) === 34) {\n","\t              if (text.charCodeAt(i + 1) !== 34) break;\n","\t              ++i;\n","\t            }\n","\t          }\n","\t          I = i + 2;\n","\t          var c = text.charCodeAt(i + 1);\n","\t          if (c === 13) {\n","\t            eol = true;\n","\t            if (text.charCodeAt(i + 2) === 10) ++I;\n","\t          } else if (c === 10) {\n","\t            eol = true;\n","\t          }\n","\t          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n","\t        }\n","\t        while (I < N) {\n","\t          var c = text.charCodeAt(I++), k = 1;\n","\t          if (c === 10) eol = true; else if (c === 13) {\n","\t            eol = true;\n","\t            if (text.charCodeAt(I) === 10) ++I, ++k;\n","\t          } else if (c !== delimiterCode) continue;\n","\t          return text.slice(j, I - k);\n","\t        }\n","\t        return text.slice(j);\n","\t      }\n","\t      while ((t = token()) !== EOF) {\n","\t        var a = [];\n","\t        while (t !== EOL && t !== EOF) {\n","\t          a.push(t);\n","\t          t = token();\n","\t        }\n","\t        if (f && (a = f(a, n++)) == null) continue;\n","\t        rows.push(a);\n","\t      }\n","\t      return rows;\n","\t    };\n","\t    dsv.format = function(rows) {\n","\t      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n","\t      var fieldSet = new d3_Set(), fields = [];\n","\t      rows.forEach(function(row) {\n","\t        for (var field in row) {\n","\t          if (!fieldSet.has(field)) {\n","\t            fields.push(fieldSet.add(field));\n","\t          }\n","\t        }\n","\t      });\n","\t      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n","\t        return fields.map(function(field) {\n","\t          return formatValue(row[field]);\n","\t        }).join(delimiter);\n","\t      })).join(\"\\n\");\n","\t    };\n","\t    dsv.formatRows = function(rows) {\n","\t      return rows.map(formatRow).join(\"\\n\");\n","\t    };\n","\t    function formatRow(row) {\n","\t      return row.map(formatValue).join(delimiter);\n","\t    }\n","\t    function formatValue(text) {\n","\t      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n","\t    }\n","\t    return dsv;\n","\t  };\n","\t  d3.csv = d3.dsv(\",\", \"text/csv\");\n","\t  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n","\t  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n","\t    setTimeout(callback, 17);\n","\t  };\n","\t  d3.timer = function() {\n","\t    d3_timer.apply(this, arguments);\n","\t  };\n","\t  function d3_timer(callback, delay, then) {\n","\t    var n = arguments.length;\n","\t    if (n < 2) delay = 0;\n","\t    if (n < 3) then = Date.now();\n","\t    var time = then + delay, timer = {\n","\t      c: callback,\n","\t      t: time,\n","\t      n: null\n","\t    };\n","\t    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n","\t    d3_timer_queueTail = timer;\n","\t    if (!d3_timer_interval) {\n","\t      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n","\t      d3_timer_interval = 1;\n","\t      d3_timer_frame(d3_timer_step);\n","\t    }\n","\t    return timer;\n","\t  }\n","\t  function d3_timer_step() {\n","\t    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n","\t    if (delay > 24) {\n","\t      if (isFinite(delay)) {\n","\t        clearTimeout(d3_timer_timeout);\n","\t        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n","\t      }\n","\t      d3_timer_interval = 0;\n","\t    } else {\n","\t      d3_timer_interval = 1;\n","\t      d3_timer_frame(d3_timer_step);\n","\t    }\n","\t  }\n","\t  d3.timer.flush = function() {\n","\t    d3_timer_mark();\n","\t    d3_timer_sweep();\n","\t  };\n","\t  function d3_timer_mark() {\n","\t    var now = Date.now(), timer = d3_timer_queueHead;\n","\t    while (timer) {\n","\t      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n","\t      timer = timer.n;\n","\t    }\n","\t    return now;\n","\t  }\n","\t  function d3_timer_sweep() {\n","\t    var t0, t1 = d3_timer_queueHead, time = Infinity;\n","\t    while (t1) {\n","\t      if (t1.c) {\n","\t        if (t1.t < time) time = t1.t;\n","\t        t1 = (t0 = t1).n;\n","\t      } else {\n","\t        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n","\t      }\n","\t    }\n","\t    d3_timer_queueTail = t0;\n","\t    return time;\n","\t  }\n","\t  function d3_format_precision(x, p) {\n","\t    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n","\t  }\n","\t  d3.round = function(x, n) {\n","\t    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n","\t  };\n","\t  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n","\t  d3.formatPrefix = function(value, precision) {\n","\t    var i = 0;\n","\t    if (value = +value) {\n","\t      if (value < 0) value *= -1;\n","\t      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n","\t      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n","\t      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n","\t    }\n","\t    return d3_formatPrefixes[8 + i / 3];\n","\t  };\n","\t  function d3_formatPrefix(d, i) {\n","\t    var k = Math.pow(10, abs(8 - i) * 3);\n","\t    return {\n","\t      scale: i > 8 ? function(d) {\n","\t        return d / k;\n","\t      } : function(d) {\n","\t        return d * k;\n","\t      },\n","\t      symbol: d\n","\t    };\n","\t  }\n","\t  function d3_locale_numberFormat(locale) {\n","\t    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n","\t      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n","\t      while (i > 0 && g > 0) {\n","\t        if (length + g + 1 > width) g = Math.max(1, width - length);\n","\t        t.push(value.substring(i -= g, i + g));\n","\t        if ((length += g + 1) > width) break;\n","\t        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n","\t      }\n","\t      return t.reverse().join(locale_thousands);\n","\t    } : d3_identity;\n","\t    return function(specifier) {\n","\t      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n","\t      if (precision) precision = +precision.substring(1);\n","\t      if (zfill || fill === \"0\" && align === \"=\") {\n","\t        zfill = fill = \"0\";\n","\t        align = \"=\";\n","\t      }\n","\t      switch (type) {\n","\t       case \"n\":\n","\t        comma = true;\n","\t        type = \"g\";\n","\t        break;\n","\t\n","\t       case \"%\":\n","\t        scale = 100;\n","\t        suffix = \"%\";\n","\t        type = \"f\";\n","\t        break;\n","\t\n","\t       case \"p\":\n","\t        scale = 100;\n","\t        suffix = \"%\";\n","\t        type = \"r\";\n","\t        break;\n","\t\n","\t       case \"b\":\n","\t       case \"o\":\n","\t       case \"x\":\n","\t       case \"X\":\n","\t        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n","\t\n","\t       case \"c\":\n","\t        exponent = false;\n","\t\n","\t       case \"d\":\n","\t        integer = true;\n","\t        precision = 0;\n","\t        break;\n","\t\n","\t       case \"s\":\n","\t        scale = -1;\n","\t        type = \"r\";\n","\t        break;\n","\t      }\n","\t      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n","\t      if (type == \"r\" && !precision) type = \"g\";\n","\t      if (precision != null) {\n","\t        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n","\t      }\n","\t      type = d3_format_types.get(type) || d3_format_typeDefault;\n","\t      var zcomma = zfill && comma;\n","\t      return function(value) {\n","\t        var fullSuffix = suffix;\n","\t        if (integer && value % 1) return \"\";\n","\t        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n","\t        if (scale < 0) {\n","\t          var unit = d3.formatPrefix(value, precision);\n","\t          value = unit.scale(value);\n","\t          fullSuffix = unit.symbol + suffix;\n","\t        } else {\n","\t          value *= scale;\n","\t        }\n","\t        value = type(value, precision);\n","\t        var i = value.lastIndexOf(\".\"), before, after;\n","\t        if (i < 0) {\n","\t          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n","\t          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n","\t        } else {\n","\t          before = value.substring(0, i);\n","\t          after = locale_decimal + value.substring(i + 1);\n","\t        }\n","\t        if (!zfill && comma) before = formatGroup(before, Infinity);\n","\t        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n","\t        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n","\t        negative += prefix;\n","\t        value = before + after;\n","\t        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n","\t      };\n","\t    };\n","\t  }\n","\t  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n","\t  var d3_format_types = d3.map({\n","\t    b: function(x) {\n","\t      return x.toString(2);\n","\t    },\n","\t    c: function(x) {\n","\t      return String.fromCharCode(x);\n","\t    },\n","\t    o: function(x) {\n","\t      return x.toString(8);\n","\t    },\n","\t    x: function(x) {\n","\t      return x.toString(16);\n","\t    },\n","\t    X: function(x) {\n","\t      return x.toString(16).toUpperCase();\n","\t    },\n","\t    g: function(x, p) {\n","\t      return x.toPrecision(p);\n","\t    },\n","\t    e: function(x, p) {\n","\t      return x.toExponential(p);\n","\t    },\n","\t    f: function(x, p) {\n","\t      return x.toFixed(p);\n","\t    },\n","\t    r: function(x, p) {\n","\t      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n","\t    }\n","\t  });\n","\t  function d3_format_typeDefault(x) {\n","\t    return x + \"\";\n","\t  }\n","\t  var d3_time = d3.time = {}, d3_date = Date;\n","\t  function d3_date_utc() {\n","\t    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n","\t  }\n","\t  d3_date_utc.prototype = {\n","\t    getDate: function() {\n","\t      return this._.getUTCDate();\n","\t    },\n","\t    getDay: function() {\n","\t      return this._.getUTCDay();\n","\t    },\n","\t    getFullYear: function() {\n","\t      return this._.getUTCFullYear();\n","\t    },\n","\t    getHours: function() {\n","\t      return this._.getUTCHours();\n","\t    },\n","\t    getMilliseconds: function() {\n","\t      return this._.getUTCMilliseconds();\n","\t    },\n","\t    getMinutes: function() {\n","\t      return this._.getUTCMinutes();\n","\t    },\n","\t    getMonth: function() {\n","\t      return this._.getUTCMonth();\n","\t    },\n","\t    getSeconds: function() {\n","\t      return this._.getUTCSeconds();\n","\t    },\n","\t    getTime: function() {\n","\t      return this._.getTime();\n","\t    },\n","\t    getTimezoneOffset: function() {\n","\t      return 0;\n","\t    },\n","\t    valueOf: function() {\n","\t      return this._.valueOf();\n","\t    },\n","\t    setDate: function() {\n","\t      d3_time_prototype.setUTCDate.apply(this._, arguments);\n","\t    },\n","\t    setDay: function() {\n","\t      d3_time_prototype.setUTCDay.apply(this._, arguments);\n","\t    },\n","\t    setFullYear: function() {\n","\t      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n","\t    },\n","\t    setHours: function() {\n","\t      d3_time_prototype.setUTCHours.apply(this._, arguments);\n","\t    },\n","\t    setMilliseconds: function() {\n","\t      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n","\t    },\n","\t    setMinutes: function() {\n","\t      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n","\t    },\n","\t    setMonth: function() {\n","\t      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n","\t    },\n","\t    setSeconds: function() {\n","\t      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n","\t    },\n","\t    setTime: function() {\n","\t      d3_time_prototype.setTime.apply(this._, arguments);\n","\t    }\n","\t  };\n","\t  var d3_time_prototype = Date.prototype;\n","\t  function d3_time_interval(local, step, number) {\n","\t    function round(date) {\n","\t      var d0 = local(date), d1 = offset(d0, 1);\n","\t      return date - d0 < d1 - date ? d0 : d1;\n","\t    }\n","\t    function ceil(date) {\n","\t      step(date = local(new d3_date(date - 1)), 1);\n","\t      return date;\n","\t    }\n","\t    function offset(date, k) {\n","\t      step(date = new d3_date(+date), k);\n","\t      return date;\n","\t    }\n","\t    function range(t0, t1, dt) {\n","\t      var time = ceil(t0), times = [];\n","\t      if (dt > 1) {\n","\t        while (time < t1) {\n","\t          if (!(number(time) % dt)) times.push(new Date(+time));\n","\t          step(time, 1);\n","\t        }\n","\t      } else {\n","\t        while (time < t1) times.push(new Date(+time)), step(time, 1);\n","\t      }\n","\t      return times;\n","\t    }\n","\t    function range_utc(t0, t1, dt) {\n","\t      try {\n","\t        d3_date = d3_date_utc;\n","\t        var utc = new d3_date_utc();\n","\t        utc._ = t0;\n","\t        return range(utc, t1, dt);\n","\t      } finally {\n","\t        d3_date = Date;\n","\t      }\n","\t    }\n","\t    local.floor = local;\n","\t    local.round = round;\n","\t    local.ceil = ceil;\n","\t    local.offset = offset;\n","\t    local.range = range;\n","\t    var utc = local.utc = d3_time_interval_utc(local);\n","\t    utc.floor = utc;\n","\t    utc.round = d3_time_interval_utc(round);\n","\t    utc.ceil = d3_time_interval_utc(ceil);\n","\t    utc.offset = d3_time_interval_utc(offset);\n","\t    utc.range = range_utc;\n","\t    return local;\n","\t  }\n","\t  function d3_time_interval_utc(method) {\n","\t    return function(date, k) {\n","\t      try {\n","\t        d3_date = d3_date_utc;\n","\t        var utc = new d3_date_utc();\n","\t        utc._ = date;\n","\t        return method(utc, k)._;\n","\t      } finally {\n","\t        d3_date = Date;\n","\t      }\n","\t    };\n","\t  }\n","\t  d3_time.year = d3_time_interval(function(date) {\n","\t    date = d3_time.day(date);\n","\t    date.setMonth(0, 1);\n","\t    return date;\n","\t  }, function(date, offset) {\n","\t    date.setFullYear(date.getFullYear() + offset);\n","\t  }, function(date) {\n","\t    return date.getFullYear();\n","\t  });\n","\t  d3_time.years = d3_time.year.range;\n","\t  d3_time.years.utc = d3_time.year.utc.range;\n","\t  d3_time.day = d3_time_interval(function(date) {\n","\t    var day = new d3_date(2e3, 0);\n","\t    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n","\t    return day;\n","\t  }, function(date, offset) {\n","\t    date.setDate(date.getDate() + offset);\n","\t  }, function(date) {\n","\t    return date.getDate() - 1;\n","\t  });\n","\t  d3_time.days = d3_time.day.range;\n","\t  d3_time.days.utc = d3_time.day.utc.range;\n","\t  d3_time.dayOfYear = function(date) {\n","\t    var year = d3_time.year(date);\n","\t    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n","\t  };\n","\t  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n","\t    i = 7 - i;\n","\t    var interval = d3_time[day] = d3_time_interval(function(date) {\n","\t      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n","\t      return date;\n","\t    }, function(date, offset) {\n","\t      date.setDate(date.getDate() + Math.floor(offset) * 7);\n","\t    }, function(date) {\n","\t      var day = d3_time.year(date).getDay();\n","\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n","\t    });\n","\t    d3_time[day + \"s\"] = interval.range;\n","\t    d3_time[day + \"s\"].utc = interval.utc.range;\n","\t    d3_time[day + \"OfYear\"] = function(date) {\n","\t      var day = d3_time.year(date).getDay();\n","\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n","\t    };\n","\t  });\n","\t  d3_time.week = d3_time.sunday;\n","\t  d3_time.weeks = d3_time.sunday.range;\n","\t  d3_time.weeks.utc = d3_time.sunday.utc.range;\n","\t  d3_time.weekOfYear = d3_time.sundayOfYear;\n","\t  function d3_locale_timeFormat(locale) {\n","\t    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n","\t    function d3_time_format(template) {\n","\t      var n = template.length;\n","\t      function format(date) {\n","\t        var string = [], i = -1, j = 0, c, p, f;\n","\t        while (++i < n) {\n","\t          if (template.charCodeAt(i) === 37) {\n","\t            string.push(template.slice(j, i));\n","\t            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n","\t            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n","\t            string.push(c);\n","\t            j = i + 1;\n","\t          }\n","\t        }\n","\t        string.push(template.slice(j, i));\n","\t        return string.join(\"\");\n","\t      }\n","\t      format.parse = function(string) {\n","\t        var d = {\n","\t          y: 1900,\n","\t          m: 0,\n","\t          d: 1,\n","\t          H: 0,\n","\t          M: 0,\n","\t          S: 0,\n","\t          L: 0,\n","\t          Z: null\n","\t        }, i = d3_time_parse(d, template, string, 0);\n","\t        if (i != string.length) return null;\n","\t        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n","\t        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n","\t        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n","\t          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n","\t          date.setFullYear(d.y, 0, 1);\n","\t          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n","\t        } else date.setFullYear(d.y, d.m, d.d);\n","\t        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n","\t        return localZ ? date._ : date;\n","\t      };\n","\t      format.toString = function() {\n","\t        return template;\n","\t      };\n","\t      return format;\n","\t    }\n","\t    function d3_time_parse(date, template, string, j) {\n","\t      var c, p, t, i = 0, n = template.length, m = string.length;\n","\t      while (i < n) {\n","\t        if (j >= m) return -1;\n","\t        c = template.charCodeAt(i++);\n","\t        if (c === 37) {\n","\t          t = template.charAt(i++);\n","\t          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n","\t          if (!p || (j = p(date, string, j)) < 0) return -1;\n","\t        } else if (c != string.charCodeAt(j++)) {\n","\t          return -1;\n","\t        }\n","\t      }\n","\t      return j;\n","\t    }\n","\t    d3_time_format.utc = function(template) {\n","\t      var local = d3_time_format(template);\n","\t      function format(date) {\n","\t        try {\n","\t          d3_date = d3_date_utc;\n","\t          var utc = new d3_date();\n","\t          utc._ = date;\n","\t          return local(utc);\n","\t        } finally {\n","\t          d3_date = Date;\n","\t        }\n","\t      }\n","\t      format.parse = function(string) {\n","\t        try {\n","\t          d3_date = d3_date_utc;\n","\t          var date = local.parse(string);\n","\t          return date && date._;\n","\t        } finally {\n","\t          d3_date = Date;\n","\t        }\n","\t      };\n","\t      format.toString = local.toString;\n","\t      return format;\n","\t    };\n","\t    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n","\t    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n","\t    locale_periods.forEach(function(p, i) {\n","\t      d3_time_periodLookup.set(p.toLowerCase(), i);\n","\t    });\n","\t    var d3_time_formats = {\n","\t      a: function(d) {\n","\t        return locale_shortDays[d.getDay()];\n","\t      },\n","\t      A: function(d) {\n","\t        return locale_days[d.getDay()];\n","\t      },\n","\t      b: function(d) {\n","\t        return locale_shortMonths[d.getMonth()];\n","\t      },\n","\t      B: function(d) {\n","\t        return locale_months[d.getMonth()];\n","\t      },\n","\t      c: d3_time_format(locale_dateTime),\n","\t      d: function(d, p) {\n","\t        return d3_time_formatPad(d.getDate(), p, 2);\n","\t      },\n","\t      e: function(d, p) {\n","\t        return d3_time_formatPad(d.getDate(), p, 2);\n","\t      },\n","\t      H: function(d, p) {\n","\t        return d3_time_formatPad(d.getHours(), p, 2);\n","\t      },\n","\t      I: function(d, p) {\n","\t        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n","\t      },\n","\t      j: function(d, p) {\n","\t        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n","\t      },\n","\t      L: function(d, p) {\n","\t        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n","\t      },\n","\t      m: function(d, p) {\n","\t        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n","\t      },\n","\t      M: function(d, p) {\n","\t        return d3_time_formatPad(d.getMinutes(), p, 2);\n","\t      },\n","\t      p: function(d) {\n","\t        return locale_periods[+(d.getHours() >= 12)];\n","\t      },\n","\t      S: function(d, p) {\n","\t        return d3_time_formatPad(d.getSeconds(), p, 2);\n","\t      },\n","\t      U: function(d, p) {\n","\t        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n","\t      },\n","\t      w: function(d) {\n","\t        return d.getDay();\n","\t      },\n","\t      W: function(d, p) {\n","\t        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n","\t      },\n","\t      x: d3_time_format(locale_date),\n","\t      X: d3_time_format(locale_time),\n","\t      y: function(d, p) {\n","\t        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n","\t      },\n","\t      Y: function(d, p) {\n","\t        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n","\t      },\n","\t      Z: d3_time_zone,\n","\t      \"%\": function() {\n","\t        return \"%\";\n","\t      }\n","\t    };\n","\t    var d3_time_parsers = {\n","\t      a: d3_time_parseWeekdayAbbrev,\n","\t      A: d3_time_parseWeekday,\n","\t      b: d3_time_parseMonthAbbrev,\n","\t      B: d3_time_parseMonth,\n","\t      c: d3_time_parseLocaleFull,\n","\t      d: d3_time_parseDay,\n","\t      e: d3_time_parseDay,\n","\t      H: d3_time_parseHour24,\n","\t      I: d3_time_parseHour24,\n","\t      j: d3_time_parseDayOfYear,\n","\t      L: d3_time_parseMilliseconds,\n","\t      m: d3_time_parseMonthNumber,\n","\t      M: d3_time_parseMinutes,\n","\t      p: d3_time_parseAmPm,\n","\t      S: d3_time_parseSeconds,\n","\t      U: d3_time_parseWeekNumberSunday,\n","\t      w: d3_time_parseWeekdayNumber,\n","\t      W: d3_time_parseWeekNumberMonday,\n","\t      x: d3_time_parseLocaleDate,\n","\t      X: d3_time_parseLocaleTime,\n","\t      y: d3_time_parseYear,\n","\t      Y: d3_time_parseFullYear,\n","\t      Z: d3_time_parseZone,\n","\t      \"%\": d3_time_parseLiteralPercent\n","\t    };\n","\t    function d3_time_parseWeekdayAbbrev(date, string, i) {\n","\t      d3_time_dayAbbrevRe.lastIndex = 0;\n","\t      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n","\t      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseWeekday(date, string, i) {\n","\t      d3_time_dayRe.lastIndex = 0;\n","\t      var n = d3_time_dayRe.exec(string.slice(i));\n","\t      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseMonthAbbrev(date, string, i) {\n","\t      d3_time_monthAbbrevRe.lastIndex = 0;\n","\t      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n","\t      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseMonth(date, string, i) {\n","\t      d3_time_monthRe.lastIndex = 0;\n","\t      var n = d3_time_monthRe.exec(string.slice(i));\n","\t      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseLocaleFull(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseLocaleDate(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseLocaleTime(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseAmPm(date, string, i) {\n","\t      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n","\t      return n == null ? -1 : (date.p = n, i);\n","\t    }\n","\t    return d3_time_format;\n","\t  }\n","\t  var d3_time_formatPads = {\n","\t    \"-\": \"\",\n","\t    _: \" \",\n","\t    \"0\": \"0\"\n","\t  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n","\t  function d3_time_formatPad(value, fill, width) {\n","\t    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n","\t    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n","\t  }\n","\t  function d3_time_formatRe(names) {\n","\t    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n","\t  }\n","\t  function d3_time_formatLookup(names) {\n","\t    var map = new d3_Map(), i = -1, n = names.length;\n","\t    while (++i < n) map.set(names[i].toLowerCase(), i);\n","\t    return map;\n","\t  }\n","\t  function d3_time_parseWeekdayNumber(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n","\t    return n ? (date.w = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseWeekNumberSunday(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i));\n","\t    return n ? (date.U = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseWeekNumberMonday(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i));\n","\t    return n ? (date.W = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseFullYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n","\t    return n ? (date.y = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseZone(date, string, i) {\n","\t    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n","\t    i + 5) : -1;\n","\t  }\n","\t  function d3_time_expandYear(d) {\n","\t    return d + (d > 68 ? 1900 : 2e3);\n","\t  }\n","\t  function d3_time_parseMonthNumber(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseDay(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.d = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseDayOfYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n","\t    return n ? (date.j = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseHour24(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.H = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseMinutes(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.M = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseSeconds(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.S = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseMilliseconds(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n","\t    return n ? (date.L = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_zone(d) {\n","\t    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n","\t    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n","\t  }\n","\t  function d3_time_parseLiteralPercent(date, string, i) {\n","\t    d3_time_percentRe.lastIndex = 0;\n","\t    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n","\t    return n ? i + n[0].length : -1;\n","\t  }\n","\t  function d3_time_formatMulti(formats) {\n","\t    var n = formats.length, i = -1;\n","\t    while (++i < n) formats[i][0] = this(formats[i][0]);\n","\t    return function(date) {\n","\t      var i = 0, f = formats[i];\n","\t      while (!f[1](date)) f = formats[++i];\n","\t      return f[0](date);\n","\t    };\n","\t  }\n","\t  d3.locale = function(locale) {\n","\t    return {\n","\t      numberFormat: d3_locale_numberFormat(locale),\n","\t      timeFormat: d3_locale_timeFormat(locale)\n","\t    };\n","\t  };\n","\t  var d3_locale_enUS = d3.locale({\n","\t    decimal: \".\",\n","\t    thousands: \",\",\n","\t    grouping: [ 3 ],\n","\t    currency: [ \"$\", \"\" ],\n","\t    dateTime: \"%a %b %e %X %Y\",\n","\t    date: \"%m/%d/%Y\",\n","\t    time: \"%H:%M:%S\",\n","\t    periods: [ \"AM\", \"PM\" ],\n","\t    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n","\t    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n","\t    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n","\t    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n","\t  });\n","\t  d3.format = d3_locale_enUS.numberFormat;\n","\t  d3.geo = {};\n","\t  function d3_adder() {}\n","\t  d3_adder.prototype = {\n","\t    s: 0,\n","\t    t: 0,\n","\t    add: function(y) {\n","\t      d3_adderSum(y, this.t, d3_adderTemp);\n","\t      d3_adderSum(d3_adderTemp.s, this.s, this);\n","\t      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n","\t    },\n","\t    reset: function() {\n","\t      this.s = this.t = 0;\n","\t    },\n","\t    valueOf: function() {\n","\t      return this.s;\n","\t    }\n","\t  };\n","\t  var d3_adderTemp = new d3_adder();\n","\t  function d3_adderSum(a, b, o) {\n","\t    var x = o.s = a + b, bv = x - a, av = x - bv;\n","\t    o.t = a - av + (b - bv);\n","\t  }\n","\t  d3.geo.stream = function(object, listener) {\n","\t    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n","\t      d3_geo_streamObjectType[object.type](object, listener);\n","\t    } else {\n","\t      d3_geo_streamGeometry(object, listener);\n","\t    }\n","\t  };\n","\t  function d3_geo_streamGeometry(geometry, listener) {\n","\t    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n","\t      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n","\t    }\n","\t  }\n","\t  var d3_geo_streamObjectType = {\n","\t    Feature: function(feature, listener) {\n","\t      d3_geo_streamGeometry(feature.geometry, listener);\n","\t    },\n","\t    FeatureCollection: function(object, listener) {\n","\t      var features = object.features, i = -1, n = features.length;\n","\t      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n","\t    }\n","\t  };\n","\t  var d3_geo_streamGeometryType = {\n","\t    Sphere: function(object, listener) {\n","\t      listener.sphere();\n","\t    },\n","\t    Point: function(object, listener) {\n","\t      object = object.coordinates;\n","\t      listener.point(object[0], object[1], object[2]);\n","\t    },\n","\t    MultiPoint: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n","\t    },\n","\t    LineString: function(object, listener) {\n","\t      d3_geo_streamLine(object.coordinates, listener, 0);\n","\t    },\n","\t    MultiLineString: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n","\t    },\n","\t    Polygon: function(object, listener) {\n","\t      d3_geo_streamPolygon(object.coordinates, listener);\n","\t    },\n","\t    MultiPolygon: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n","\t    },\n","\t    GeometryCollection: function(object, listener) {\n","\t      var geometries = object.geometries, i = -1, n = geometries.length;\n","\t      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n","\t    }\n","\t  };\n","\t  function d3_geo_streamLine(coordinates, listener, closed) {\n","\t    var i = -1, n = coordinates.length - closed, coordinate;\n","\t    listener.lineStart();\n","\t    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n","\t    listener.lineEnd();\n","\t  }\n","\t  function d3_geo_streamPolygon(coordinates, listener) {\n","\t    var i = -1, n = coordinates.length;\n","\t    listener.polygonStart();\n","\t    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n","\t    listener.polygonEnd();\n","\t  }\n","\t  d3.geo.area = function(object) {\n","\t    d3_geo_areaSum = 0;\n","\t    d3.geo.stream(object, d3_geo_area);\n","\t    return d3_geo_areaSum;\n","\t  };\n","\t  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n","\t  var d3_geo_area = {\n","\t    sphere: function() {\n","\t      d3_geo_areaSum += 4 * π;\n","\t    },\n","\t    point: d3_noop,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: function() {\n","\t      d3_geo_areaRingSum.reset();\n","\t      d3_geo_area.lineStart = d3_geo_areaRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      var area = 2 * d3_geo_areaRingSum;\n","\t      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n","\t      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n","\t    }\n","\t  };\n","\t  function d3_geo_areaRingStart() {\n","\t    var λ00, φ00, λ0, cosφ0, sinφ0;\n","\t    d3_geo_area.point = function(λ, φ) {\n","\t      d3_geo_area.point = nextPoint;\n","\t      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n","\t      sinφ0 = Math.sin(φ);\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      φ = φ * d3_radians / 2 + π / 4;\n","\t      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n","\t      d3_geo_areaRingSum.add(Math.atan2(v, u));\n","\t      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n","\t    }\n","\t    d3_geo_area.lineEnd = function() {\n","\t      nextPoint(λ00, φ00);\n","\t    };\n","\t  }\n","\t  function d3_geo_cartesian(spherical) {\n","\t    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n","\t    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n","\t  }\n","\t  function d3_geo_cartesianDot(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n","\t  }\n","\t  function d3_geo_cartesianCross(a, b) {\n","\t    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n","\t  }\n","\t  function d3_geo_cartesianAdd(a, b) {\n","\t    a[0] += b[0];\n","\t    a[1] += b[1];\n","\t    a[2] += b[2];\n","\t  }\n","\t  function d3_geo_cartesianScale(vector, k) {\n","\t    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n","\t  }\n","\t  function d3_geo_cartesianNormalize(d) {\n","\t    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n","\t    d[0] /= l;\n","\t    d[1] /= l;\n","\t    d[2] /= l;\n","\t  }\n","\t  function d3_geo_spherical(cartesian) {\n","\t    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n","\t  }\n","\t  function d3_geo_sphericalEqual(a, b) {\n","\t    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n","\t  }\n","\t  d3.geo.bounds = function() {\n","\t    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n","\t    var bound = {\n","\t      point: point,\n","\t      lineStart: lineStart,\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        bound.point = ringPoint;\n","\t        bound.lineStart = ringStart;\n","\t        bound.lineEnd = ringEnd;\n","\t        dλSum = 0;\n","\t        d3_geo_area.polygonStart();\n","\t      },\n","\t      polygonEnd: function() {\n","\t        d3_geo_area.polygonEnd();\n","\t        bound.point = point;\n","\t        bound.lineStart = lineStart;\n","\t        bound.lineEnd = lineEnd;\n","\t        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n","\t        range[0] = λ0, range[1] = λ1;\n","\t      }\n","\t    };\n","\t    function point(λ, φ) {\n","\t      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n","\t      if (φ < φ0) φ0 = φ;\n","\t      if (φ > φ1) φ1 = φ;\n","\t    }\n","\t    function linePoint(λ, φ) {\n","\t      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n","\t      if (p0) {\n","\t        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n","\t        d3_geo_cartesianNormalize(inflection);\n","\t        inflection = d3_geo_spherical(inflection);\n","\t        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n","\t        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n","\t          var φi = inflection[1] * d3_degrees;\n","\t          if (φi > φ1) φ1 = φi;\n","\t        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n","\t          var φi = -inflection[1] * d3_degrees;\n","\t          if (φi < φ0) φ0 = φi;\n","\t        } else {\n","\t          if (φ < φ0) φ0 = φ;\n","\t          if (φ > φ1) φ1 = φ;\n","\t        }\n","\t        if (antimeridian) {\n","\t          if (λ < λ_) {\n","\t            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n","\t          } else {\n","\t            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n","\t          }\n","\t        } else {\n","\t          if (λ1 >= λ0) {\n","\t            if (λ < λ0) λ0 = λ;\n","\t            if (λ > λ1) λ1 = λ;\n","\t          } else {\n","\t            if (λ > λ_) {\n","\t              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n","\t            } else {\n","\t              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n","\t            }\n","\t          }\n","\t        }\n","\t      } else {\n","\t        point(λ, φ);\n","\t      }\n","\t      p0 = p, λ_ = λ;\n","\t    }\n","\t    function lineStart() {\n","\t      bound.point = linePoint;\n","\t    }\n","\t    function lineEnd() {\n","\t      range[0] = λ0, range[1] = λ1;\n","\t      bound.point = point;\n","\t      p0 = null;\n","\t    }\n","\t    function ringPoint(λ, φ) {\n","\t      if (p0) {\n","\t        var dλ = λ - λ_;\n","\t        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n","\t      } else λ__ = λ, φ__ = φ;\n","\t      d3_geo_area.point(λ, φ);\n","\t      linePoint(λ, φ);\n","\t    }\n","\t    function ringStart() {\n","\t      d3_geo_area.lineStart();\n","\t    }\n","\t    function ringEnd() {\n","\t      ringPoint(λ__, φ__);\n","\t      d3_geo_area.lineEnd();\n","\t      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n","\t      range[0] = λ0, range[1] = λ1;\n","\t      p0 = null;\n","\t    }\n","\t    function angle(λ0, λ1) {\n","\t      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n","\t    }\n","\t    function compareRanges(a, b) {\n","\t      return a[0] - b[0];\n","\t    }\n","\t    function withinRange(x, range) {\n","\t      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n","\t    }\n","\t    return function(feature) {\n","\t      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n","\t      ranges = [];\n","\t      d3.geo.stream(feature, bound);\n","\t      var n = ranges.length;\n","\t      if (n) {\n","\t        ranges.sort(compareRanges);\n","\t        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n","\t          b = ranges[i];\n","\t          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n","\t            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n","\t            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n","\t          } else {\n","\t            merged.push(a = b);\n","\t          }\n","\t        }\n","\t        var best = -Infinity, dλ;\n","\t        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n","\t          b = merged[i];\n","\t          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n","\t        }\n","\t      }\n","\t      ranges = range = null;\n","\t      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n","\t    };\n","\t  }();\n","\t  d3.geo.centroid = function(object) {\n","\t    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n","\t    d3.geo.stream(object, d3_geo_centroid);\n","\t    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n","\t    if (m < ε2) {\n","\t      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n","\t      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n","\t      m = x * x + y * y + z * z;\n","\t      if (m < ε2) return [ NaN, NaN ];\n","\t    }\n","\t    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n","\t  };\n","\t  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n","\t  var d3_geo_centroid = {\n","\t    sphere: d3_noop,\n","\t    point: d3_geo_centroidPoint,\n","\t    lineStart: d3_geo_centroidLineStart,\n","\t    lineEnd: d3_geo_centroidLineEnd,\n","\t    polygonStart: function() {\n","\t      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n","\t    }\n","\t  };\n","\t  function d3_geo_centroidPoint(λ, φ) {\n","\t    λ *= d3_radians;\n","\t    var cosφ = Math.cos(φ *= d3_radians);\n","\t    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n","\t  }\n","\t  function d3_geo_centroidPointXYZ(x, y, z) {\n","\t    ++d3_geo_centroidW0;\n","\t    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n","\t    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n","\t    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n","\t  }\n","\t  function d3_geo_centroidLineStart() {\n","\t    var x0, y0, z0;\n","\t    d3_geo_centroid.point = function(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians);\n","\t      x0 = cosφ * Math.cos(λ);\n","\t      y0 = cosφ * Math.sin(λ);\n","\t      z0 = Math.sin(φ);\n","\t      d3_geo_centroid.point = nextPoint;\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n","\t      d3_geo_centroidW1 += w;\n","\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n","\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n","\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    }\n","\t  }\n","\t  function d3_geo_centroidLineEnd() {\n","\t    d3_geo_centroid.point = d3_geo_centroidPoint;\n","\t  }\n","\t  function d3_geo_centroidRingStart() {\n","\t    var λ00, φ00, x0, y0, z0;\n","\t    d3_geo_centroid.point = function(λ, φ) {\n","\t      λ00 = λ, φ00 = φ;\n","\t      d3_geo_centroid.point = nextPoint;\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians);\n","\t      x0 = cosφ * Math.cos(λ);\n","\t      y0 = cosφ * Math.sin(λ);\n","\t      z0 = Math.sin(φ);\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    };\n","\t    d3_geo_centroid.lineEnd = function() {\n","\t      nextPoint(λ00, φ00);\n","\t      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n","\t      d3_geo_centroid.point = d3_geo_centroidPoint;\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n","\t      d3_geo_centroidX2 += v * cx;\n","\t      d3_geo_centroidY2 += v * cy;\n","\t      d3_geo_centroidZ2 += v * cz;\n","\t      d3_geo_centroidW1 += w;\n","\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n","\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n","\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    }\n","\t  }\n","\t  function d3_geo_compose(a, b) {\n","\t    function compose(x, y) {\n","\t      return x = a(x, y), b(x[0], x[1]);\n","\t    }\n","\t    if (a.invert && b.invert) compose.invert = function(x, y) {\n","\t      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n","\t    };\n","\t    return compose;\n","\t  }\n","\t  function d3_true() {\n","\t    return true;\n","\t  }\n","\t  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n","\t    var subject = [], clip = [];\n","\t    segments.forEach(function(segment) {\n","\t      if ((n = segment.length - 1) <= 0) return;\n","\t      var n, p0 = segment[0], p1 = segment[n];\n","\t      if (d3_geo_sphericalEqual(p0, p1)) {\n","\t        listener.lineStart();\n","\t        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n","\t        listener.lineEnd();\n","\t        return;\n","\t      }\n","\t      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n","\t      a.o = b;\n","\t      subject.push(a);\n","\t      clip.push(b);\n","\t      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n","\t      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n","\t      a.o = b;\n","\t      subject.push(a);\n","\t      clip.push(b);\n","\t    });\n","\t    clip.sort(compare);\n","\t    d3_geo_clipPolygonLinkCircular(subject);\n","\t    d3_geo_clipPolygonLinkCircular(clip);\n","\t    if (!subject.length) return;\n","\t    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n","\t      clip[i].e = entry = !entry;\n","\t    }\n","\t    var start = subject[0], points, point;\n","\t    while (1) {\n","\t      var current = start, isSubject = true;\n","\t      while (current.v) if ((current = current.n) === start) return;\n","\t      points = current.z;\n","\t      listener.lineStart();\n","\t      do {\n","\t        current.v = current.o.v = true;\n","\t        if (current.e) {\n","\t          if (isSubject) {\n","\t            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n","\t          } else {\n","\t            interpolate(current.x, current.n.x, 1, listener);\n","\t          }\n","\t          current = current.n;\n","\t        } else {\n","\t          if (isSubject) {\n","\t            points = current.p.z;\n","\t            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n","\t          } else {\n","\t            interpolate(current.x, current.p.x, -1, listener);\n","\t          }\n","\t          current = current.p;\n","\t        }\n","\t        current = current.o;\n","\t        points = current.z;\n","\t        isSubject = !isSubject;\n","\t      } while (!current.v);\n","\t      listener.lineEnd();\n","\t    }\n","\t  }\n","\t  function d3_geo_clipPolygonLinkCircular(array) {\n","\t    if (!(n = array.length)) return;\n","\t    var n, i = 0, a = array[0], b;\n","\t    while (++i < n) {\n","\t      a.n = b = array[i];\n","\t      b.p = a;\n","\t      a = b;\n","\t    }\n","\t    a.n = b = array[0];\n","\t    b.p = a;\n","\t  }\n","\t  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n","\t    this.x = point;\n","\t    this.z = points;\n","\t    this.o = other;\n","\t    this.e = entry;\n","\t    this.v = false;\n","\t    this.n = this.p = null;\n","\t  }\n","\t  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n","\t    return function(rotate, listener) {\n","\t      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n","\t      var clip = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          clip.point = pointRing;\n","\t          clip.lineStart = ringStart;\n","\t          clip.lineEnd = ringEnd;\n","\t          segments = [];\n","\t          polygon = [];\n","\t        },\n","\t        polygonEnd: function() {\n","\t          clip.point = point;\n","\t          clip.lineStart = lineStart;\n","\t          clip.lineEnd = lineEnd;\n","\t          segments = d3.merge(segments);\n","\t          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n","\t          if (segments.length) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n","\t          } else if (clipStartInside) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            listener.lineStart();\n","\t            interpolate(null, null, 1, listener);\n","\t            listener.lineEnd();\n","\t          }\n","\t          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n","\t          segments = polygon = null;\n","\t        },\n","\t        sphere: function() {\n","\t          listener.polygonStart();\n","\t          listener.lineStart();\n","\t          interpolate(null, null, 1, listener);\n","\t          listener.lineEnd();\n","\t          listener.polygonEnd();\n","\t        }\n","\t      };\n","\t      function point(λ, φ) {\n","\t        var point = rotate(λ, φ);\n","\t        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n","\t      }\n","\t      function pointLine(λ, φ) {\n","\t        var point = rotate(λ, φ);\n","\t        line.point(point[0], point[1]);\n","\t      }\n","\t      function lineStart() {\n","\t        clip.point = pointLine;\n","\t        line.lineStart();\n","\t      }\n","\t      function lineEnd() {\n","\t        clip.point = point;\n","\t        line.lineEnd();\n","\t      }\n","\t      var segments;\n","\t      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n","\t      function pointRing(λ, φ) {\n","\t        ring.push([ λ, φ ]);\n","\t        var point = rotate(λ, φ);\n","\t        ringListener.point(point[0], point[1]);\n","\t      }\n","\t      function ringStart() {\n","\t        ringListener.lineStart();\n","\t        ring = [];\n","\t      }\n","\t      function ringEnd() {\n","\t        pointRing(ring[0][0], ring[0][1]);\n","\t        ringListener.lineEnd();\n","\t        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n","\t        ring.pop();\n","\t        polygon.push(ring);\n","\t        ring = null;\n","\t        if (!n) return;\n","\t        if (clean & 1) {\n","\t          segment = ringSegments[0];\n","\t          var n = segment.length - 1, i = -1, point;\n","\t          if (n > 0) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            listener.lineStart();\n","\t            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n","\t            listener.lineEnd();\n","\t          }\n","\t          return;\n","\t        }\n","\t        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n","\t        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n","\t      }\n","\t      return clip;\n","\t    };\n","\t  }\n","\t  function d3_geo_clipSegmentLength1(segment) {\n","\t    return segment.length > 1;\n","\t  }\n","\t  function d3_geo_clipBufferListener() {\n","\t    var lines = [], line;\n","\t    return {\n","\t      lineStart: function() {\n","\t        lines.push(line = []);\n","\t      },\n","\t      point: function(λ, φ) {\n","\t        line.push([ λ, φ ]);\n","\t      },\n","\t      lineEnd: d3_noop,\n","\t      buffer: function() {\n","\t        var buffer = lines;\n","\t        lines = [];\n","\t        line = null;\n","\t        return buffer;\n","\t      },\n","\t      rejoin: function() {\n","\t        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_clipSort(a, b) {\n","\t    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n","\t  }\n","\t  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n","\t  function d3_geo_clipAntimeridianLine(listener) {\n","\t    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n","\t    return {\n","\t      lineStart: function() {\n","\t        listener.lineStart();\n","\t        clean = 1;\n","\t      },\n","\t      point: function(λ1, φ1) {\n","\t        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n","\t        if (abs(dλ - π) < ε) {\n","\t          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n","\t          listener.point(sλ0, φ0);\n","\t          listener.lineEnd();\n","\t          listener.lineStart();\n","\t          listener.point(sλ1, φ0);\n","\t          listener.point(λ1, φ0);\n","\t          clean = 0;\n","\t        } else if (sλ0 !== sλ1 && dλ >= π) {\n","\t          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n","\t          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n","\t          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n","\t          listener.point(sλ0, φ0);\n","\t          listener.lineEnd();\n","\t          listener.lineStart();\n","\t          listener.point(sλ1, φ0);\n","\t          clean = 0;\n","\t        }\n","\t        listener.point(λ0 = λ1, φ0 = φ1);\n","\t        sλ0 = sλ1;\n","\t      },\n","\t      lineEnd: function() {\n","\t        listener.lineEnd();\n","\t        λ0 = φ0 = NaN;\n","\t      },\n","\t      clean: function() {\n","\t        return 2 - clean;\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n","\t    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n","\t    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n","\t  }\n","\t  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n","\t    var φ;\n","\t    if (from == null) {\n","\t      φ = direction * halfπ;\n","\t      listener.point(-π, φ);\n","\t      listener.point(0, φ);\n","\t      listener.point(π, φ);\n","\t      listener.point(π, 0);\n","\t      listener.point(π, -φ);\n","\t      listener.point(0, -φ);\n","\t      listener.point(-π, -φ);\n","\t      listener.point(-π, 0);\n","\t      listener.point(-π, φ);\n","\t    } else if (abs(from[0] - to[0]) > ε) {\n","\t      var s = from[0] < to[0] ? π : -π;\n","\t      φ = direction * s / 2;\n","\t      listener.point(-s, φ);\n","\t      listener.point(0, φ);\n","\t      listener.point(s, φ);\n","\t    } else {\n","\t      listener.point(to[0], to[1]);\n","\t    }\n","\t  }\n","\t  function d3_geo_pointInPolygon(point, polygon) {\n","\t    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n","\t    d3_geo_areaRingSum.reset();\n","\t    for (var i = 0, n = polygon.length; i < n; ++i) {\n","\t      var ring = polygon[i], m = ring.length;\n","\t      if (!m) continue;\n","\t      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n","\t      while (true) {\n","\t        if (j === m) j = 0;\n","\t        point = ring[j];\n","\t        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n","\t        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n","\t        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n","\t        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n","\t          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n","\t          d3_geo_cartesianNormalize(arc);\n","\t          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n","\t          d3_geo_cartesianNormalize(intersection);\n","\t          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n","\t          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n","\t            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n","\t          }\n","\t        }\n","\t        if (!j++) break;\n","\t        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n","\t      }\n","\t    }\n","\t    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n","\t  }\n","\t  function d3_geo_clipCircle(radius) {\n","\t    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n","\t    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n","\t    function visible(λ, φ) {\n","\t      return Math.cos(λ) * Math.cos(φ) > cr;\n","\t    }\n","\t    function clipLine(listener) {\n","\t      var point0, c0, v0, v00, clean;\n","\t      return {\n","\t        lineStart: function() {\n","\t          v00 = v0 = false;\n","\t          clean = 1;\n","\t        },\n","\t        point: function(λ, φ) {\n","\t          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n","\t          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n","\t          if (v !== v0) {\n","\t            point2 = intersect(point0, point1);\n","\t            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n","\t              point1[0] += ε;\n","\t              point1[1] += ε;\n","\t              v = visible(point1[0], point1[1]);\n","\t            }\n","\t          }\n","\t          if (v !== v0) {\n","\t            clean = 0;\n","\t            if (v) {\n","\t              listener.lineStart();\n","\t              point2 = intersect(point1, point0);\n","\t              listener.point(point2[0], point2[1]);\n","\t            } else {\n","\t              point2 = intersect(point0, point1);\n","\t              listener.point(point2[0], point2[1]);\n","\t              listener.lineEnd();\n","\t            }\n","\t            point0 = point2;\n","\t          } else if (notHemisphere && point0 && smallRadius ^ v) {\n","\t            var t;\n","\t            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n","\t              clean = 0;\n","\t              if (smallRadius) {\n","\t                listener.lineStart();\n","\t                listener.point(t[0][0], t[0][1]);\n","\t                listener.point(t[1][0], t[1][1]);\n","\t                listener.lineEnd();\n","\t              } else {\n","\t                listener.point(t[1][0], t[1][1]);\n","\t                listener.lineEnd();\n","\t                listener.lineStart();\n","\t                listener.point(t[0][0], t[0][1]);\n","\t              }\n","\t            }\n","\t          }\n","\t          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n","\t            listener.point(point1[0], point1[1]);\n","\t          }\n","\t          point0 = point1, v0 = v, c0 = c;\n","\t        },\n","\t        lineEnd: function() {\n","\t          if (v0) listener.lineEnd();\n","\t          point0 = null;\n","\t        },\n","\t        clean: function() {\n","\t          return clean | (v00 && v0) << 1;\n","\t        }\n","\t      };\n","\t    }\n","\t    function intersect(a, b, two) {\n","\t      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n","\t      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n","\t      if (!determinant) return !two && a;\n","\t      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n","\t      d3_geo_cartesianAdd(A, B);\n","\t      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n","\t      if (t2 < 0) return;\n","\t      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n","\t      d3_geo_cartesianAdd(q, A);\n","\t      q = d3_geo_spherical(q);\n","\t      if (!two) return q;\n","\t      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n","\t      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n","\t      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n","\t      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n","\t      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n","\t        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n","\t        d3_geo_cartesianAdd(q1, A);\n","\t        return [ q, d3_geo_spherical(q1) ];\n","\t      }\n","\t    }\n","\t    function code(λ, φ) {\n","\t      var r = smallRadius ? radius : π - radius, code = 0;\n","\t      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n","\t      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n","\t      return code;\n","\t    }\n","\t  }\n","\t  function d3_geom_clipLine(x0, y0, x1, y1) {\n","\t    return function(line) {\n","\t      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n","\t      r = x0 - ax;\n","\t      if (!dx && r > 0) return;\n","\t      r /= dx;\n","\t      if (dx < 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      } else if (dx > 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      }\n","\t      r = x1 - ax;\n","\t      if (!dx && r < 0) return;\n","\t      r /= dx;\n","\t      if (dx < 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      } else if (dx > 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      }\n","\t      r = y0 - ay;\n","\t      if (!dy && r > 0) return;\n","\t      r /= dy;\n","\t      if (dy < 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      } else if (dy > 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      }\n","\t      r = y1 - ay;\n","\t      if (!dy && r < 0) return;\n","\t      r /= dy;\n","\t      if (dy < 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      } else if (dy > 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      }\n","\t      if (t0 > 0) line.a = {\n","\t        x: ax + t0 * dx,\n","\t        y: ay + t0 * dy\n","\t      };\n","\t      if (t1 < 1) line.b = {\n","\t        x: ax + t1 * dx,\n","\t        y: ay + t1 * dy\n","\t      };\n","\t      return line;\n","\t    };\n","\t  }\n","\t  var d3_geo_clipExtentMAX = 1e9;\n","\t  d3.geo.clipExtent = function() {\n","\t    var x0, y0, x1, y1, stream, clip, clipExtent = {\n","\t      stream: function(output) {\n","\t        if (stream) stream.valid = false;\n","\t        stream = clip(output);\n","\t        stream.valid = true;\n","\t        return stream;\n","\t      },\n","\t      extent: function(_) {\n","\t        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n","\t        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n","\t        if (stream) stream.valid = false, stream = null;\n","\t        return clipExtent;\n","\t      }\n","\t    };\n","\t    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n","\t  };\n","\t  function d3_geo_clipExtent(x0, y0, x1, y1) {\n","\t    return function(listener) {\n","\t      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n","\t      var clip = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          listener = bufferListener;\n","\t          segments = [];\n","\t          polygon = [];\n","\t          clean = true;\n","\t        },\n","\t        polygonEnd: function() {\n","\t          listener = listener_;\n","\t          segments = d3.merge(segments);\n","\t          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n","\t          if (inside || visible) {\n","\t            listener.polygonStart();\n","\t            if (inside) {\n","\t              listener.lineStart();\n","\t              interpolate(null, null, 1, listener);\n","\t              listener.lineEnd();\n","\t            }\n","\t            if (visible) {\n","\t              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n","\t            }\n","\t            listener.polygonEnd();\n","\t          }\n","\t          segments = polygon = ring = null;\n","\t        }\n","\t      };\n","\t      function insidePolygon(p) {\n","\t        var wn = 0, n = polygon.length, y = p[1];\n","\t        for (var i = 0; i < n; ++i) {\n","\t          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n","\t            b = v[j];\n","\t            if (a[1] <= y) {\n","\t              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n","\t            } else {\n","\t              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n","\t            }\n","\t            a = b;\n","\t          }\n","\t        }\n","\t        return wn !== 0;\n","\t      }\n","\t      function interpolate(from, to, direction, listener) {\n","\t        var a = 0, a1 = 0;\n","\t        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n","\t          do {\n","\t            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n","\t          } while ((a = (a + direction + 4) % 4) !== a1);\n","\t        } else {\n","\t          listener.point(to[0], to[1]);\n","\t        }\n","\t      }\n","\t      function pointVisible(x, y) {\n","\t        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n","\t      }\n","\t      function point(x, y) {\n","\t        if (pointVisible(x, y)) listener.point(x, y);\n","\t      }\n","\t      var x__, y__, v__, x_, y_, v_, first, clean;\n","\t      function lineStart() {\n","\t        clip.point = linePoint;\n","\t        if (polygon) polygon.push(ring = []);\n","\t        first = true;\n","\t        v_ = false;\n","\t        x_ = y_ = NaN;\n","\t      }\n","\t      function lineEnd() {\n","\t        if (segments) {\n","\t          linePoint(x__, y__);\n","\t          if (v__ && v_) bufferListener.rejoin();\n","\t          segments.push(bufferListener.buffer());\n","\t        }\n","\t        clip.point = point;\n","\t        if (v_) listener.lineEnd();\n","\t      }\n","\t      function linePoint(x, y) {\n","\t        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n","\t        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n","\t        var v = pointVisible(x, y);\n","\t        if (polygon) ring.push([ x, y ]);\n","\t        if (first) {\n","\t          x__ = x, y__ = y, v__ = v;\n","\t          first = false;\n","\t          if (v) {\n","\t            listener.lineStart();\n","\t            listener.point(x, y);\n","\t          }\n","\t        } else {\n","\t          if (v && v_) listener.point(x, y); else {\n","\t            var l = {\n","\t              a: {\n","\t                x: x_,\n","\t                y: y_\n","\t              },\n","\t              b: {\n","\t                x: x,\n","\t                y: y\n","\t              }\n","\t            };\n","\t            if (clipLine(l)) {\n","\t              if (!v_) {\n","\t                listener.lineStart();\n","\t                listener.point(l.a.x, l.a.y);\n","\t              }\n","\t              listener.point(l.b.x, l.b.y);\n","\t              if (!v) listener.lineEnd();\n","\t              clean = false;\n","\t            } else if (v) {\n","\t              listener.lineStart();\n","\t              listener.point(x, y);\n","\t              clean = false;\n","\t            }\n","\t          }\n","\t        }\n","\t        x_ = x, y_ = y, v_ = v;\n","\t      }\n","\t      return clip;\n","\t    };\n","\t    function corner(p, direction) {\n","\t      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n","\t    }\n","\t    function compare(a, b) {\n","\t      return comparePoints(a.x, b.x);\n","\t    }\n","\t    function comparePoints(a, b) {\n","\t      var ca = corner(a, 1), cb = corner(b, 1);\n","\t      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n","\t    }\n","\t  }\n","\t  function d3_geo_conic(projectAt) {\n","\t    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n","\t    p.parallels = function(_) {\n","\t      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n","\t      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n","\t    };\n","\t    return p;\n","\t  }\n","\t  function d3_geo_conicEqualArea(φ0, φ1) {\n","\t    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n","\t    function forward(λ, φ) {\n","\t      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n","\t      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = ρ0 - y;\n","\t      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicEqualArea = function() {\n","\t    return d3_geo_conic(d3_geo_conicEqualArea);\n","\t  }).raw = d3_geo_conicEqualArea;\n","\t  d3.geo.albers = function() {\n","\t    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n","\t  };\n","\t  d3.geo.albersUsa = function() {\n","\t    var lower48 = d3.geo.albers();\n","\t    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n","\t    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n","\t    var point, pointStream = {\n","\t      point: function(x, y) {\n","\t        point = [ x, y ];\n","\t      }\n","\t    }, lower48Point, alaskaPoint, hawaiiPoint;\n","\t    function albersUsa(coordinates) {\n","\t      var x = coordinates[0], y = coordinates[1];\n","\t      point = null;\n","\t      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n","\t      return point;\n","\t    }\n","\t    albersUsa.invert = function(coordinates) {\n","\t      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n","\t      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n","\t    };\n","\t    albersUsa.stream = function(stream) {\n","\t      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n","\t      return {\n","\t        point: function(x, y) {\n","\t          lower48Stream.point(x, y);\n","\t          alaskaStream.point(x, y);\n","\t          hawaiiStream.point(x, y);\n","\t        },\n","\t        sphere: function() {\n","\t          lower48Stream.sphere();\n","\t          alaskaStream.sphere();\n","\t          hawaiiStream.sphere();\n","\t        },\n","\t        lineStart: function() {\n","\t          lower48Stream.lineStart();\n","\t          alaskaStream.lineStart();\n","\t          hawaiiStream.lineStart();\n","\t        },\n","\t        lineEnd: function() {\n","\t          lower48Stream.lineEnd();\n","\t          alaskaStream.lineEnd();\n","\t          hawaiiStream.lineEnd();\n","\t        },\n","\t        polygonStart: function() {\n","\t          lower48Stream.polygonStart();\n","\t          alaskaStream.polygonStart();\n","\t          hawaiiStream.polygonStart();\n","\t        },\n","\t        polygonEnd: function() {\n","\t          lower48Stream.polygonEnd();\n","\t          alaskaStream.polygonEnd();\n","\t          hawaiiStream.polygonEnd();\n","\t        }\n","\t      };\n","\t    };\n","\t    albersUsa.precision = function(_) {\n","\t      if (!arguments.length) return lower48.precision();\n","\t      lower48.precision(_);\n","\t      alaska.precision(_);\n","\t      hawaii.precision(_);\n","\t      return albersUsa;\n","\t    };\n","\t    albersUsa.scale = function(_) {\n","\t      if (!arguments.length) return lower48.scale();\n","\t      lower48.scale(_);\n","\t      alaska.scale(_ * .35);\n","\t      hawaii.scale(_);\n","\t      return albersUsa.translate(lower48.translate());\n","\t    };\n","\t    albersUsa.translate = function(_) {\n","\t      if (!arguments.length) return lower48.translate();\n","\t      var k = lower48.scale(), x = +_[0], y = +_[1];\n","\t      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n","\t      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n","\t      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n","\t      return albersUsa;\n","\t    };\n","\t    return albersUsa.scale(1070);\n","\t  };\n","\t  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n","\t    point: d3_noop,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: function() {\n","\t      d3_geo_pathAreaPolygon = 0;\n","\t      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n","\t      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n","\t    }\n","\t  };\n","\t  function d3_geo_pathAreaRingStart() {\n","\t    var x00, y00, x0, y0;\n","\t    d3_geo_pathArea.point = function(x, y) {\n","\t      d3_geo_pathArea.point = nextPoint;\n","\t      x00 = x0 = x, y00 = y0 = y;\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n","\t      x0 = x, y0 = y;\n","\t    }\n","\t    d3_geo_pathArea.lineEnd = function() {\n","\t      nextPoint(x00, y00);\n","\t    };\n","\t  }\n","\t  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n","\t  var d3_geo_pathBounds = {\n","\t    point: d3_geo_pathBoundsPoint,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: d3_noop,\n","\t    polygonEnd: d3_noop\n","\t  };\n","\t  function d3_geo_pathBoundsPoint(x, y) {\n","\t    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n","\t    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n","\t    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n","\t    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n","\t  }\n","\t  function d3_geo_pathBuffer() {\n","\t    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n","\t    var stream = {\n","\t      point: point,\n","\t      lineStart: function() {\n","\t        stream.point = pointLineStart;\n","\t      },\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        stream.lineEnd = lineEndPolygon;\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.lineEnd = lineEnd;\n","\t        stream.point = point;\n","\t      },\n","\t      pointRadius: function(_) {\n","\t        pointCircle = d3_geo_pathBufferCircle(_);\n","\t        return stream;\n","\t      },\n","\t      result: function() {\n","\t        if (buffer.length) {\n","\t          var result = buffer.join(\"\");\n","\t          buffer = [];\n","\t          return result;\n","\t        }\n","\t      }\n","\t    };\n","\t    function point(x, y) {\n","\t      buffer.push(\"M\", x, \",\", y, pointCircle);\n","\t    }\n","\t    function pointLineStart(x, y) {\n","\t      buffer.push(\"M\", x, \",\", y);\n","\t      stream.point = pointLine;\n","\t    }\n","\t    function pointLine(x, y) {\n","\t      buffer.push(\"L\", x, \",\", y);\n","\t    }\n","\t    function lineEnd() {\n","\t      stream.point = point;\n","\t    }\n","\t    function lineEndPolygon() {\n","\t      buffer.push(\"Z\");\n","\t    }\n","\t    return stream;\n","\t  }\n","\t  function d3_geo_pathBufferCircle(radius) {\n","\t    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n","\t  }\n","\t  var d3_geo_pathCentroid = {\n","\t    point: d3_geo_pathCentroidPoint,\n","\t    lineStart: d3_geo_pathCentroidLineStart,\n","\t    lineEnd: d3_geo_pathCentroidLineEnd,\n","\t    polygonStart: function() {\n","\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n","\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n","\t      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n","\t    }\n","\t  };\n","\t  function d3_geo_pathCentroidPoint(x, y) {\n","\t    d3_geo_centroidX0 += x;\n","\t    d3_geo_centroidY0 += y;\n","\t    ++d3_geo_centroidZ0;\n","\t  }\n","\t  function d3_geo_pathCentroidLineStart() {\n","\t    var x0, y0;\n","\t    d3_geo_pathCentroid.point = function(x, y) {\n","\t      d3_geo_pathCentroid.point = nextPoint;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n","\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n","\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n","\t      d3_geo_centroidZ1 += z;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    }\n","\t  }\n","\t  function d3_geo_pathCentroidLineEnd() {\n","\t    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n","\t  }\n","\t  function d3_geo_pathCentroidRingStart() {\n","\t    var x00, y00, x0, y0;\n","\t    d3_geo_pathCentroid.point = function(x, y) {\n","\t      d3_geo_pathCentroid.point = nextPoint;\n","\t      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n","\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n","\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n","\t      d3_geo_centroidZ1 += z;\n","\t      z = y0 * x - x0 * y;\n","\t      d3_geo_centroidX2 += z * (x0 + x);\n","\t      d3_geo_centroidY2 += z * (y0 + y);\n","\t      d3_geo_centroidZ2 += z * 3;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    }\n","\t    d3_geo_pathCentroid.lineEnd = function() {\n","\t      nextPoint(x00, y00);\n","\t    };\n","\t  }\n","\t  function d3_geo_pathContext(context) {\n","\t    var pointRadius = 4.5;\n","\t    var stream = {\n","\t      point: point,\n","\t      lineStart: function() {\n","\t        stream.point = pointLineStart;\n","\t      },\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        stream.lineEnd = lineEndPolygon;\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.lineEnd = lineEnd;\n","\t        stream.point = point;\n","\t      },\n","\t      pointRadius: function(_) {\n","\t        pointRadius = _;\n","\t        return stream;\n","\t      },\n","\t      result: d3_noop\n","\t    };\n","\t    function point(x, y) {\n","\t      context.moveTo(x + pointRadius, y);\n","\t      context.arc(x, y, pointRadius, 0, τ);\n","\t    }\n","\t    function pointLineStart(x, y) {\n","\t      context.moveTo(x, y);\n","\t      stream.point = pointLine;\n","\t    }\n","\t    function pointLine(x, y) {\n","\t      context.lineTo(x, y);\n","\t    }\n","\t    function lineEnd() {\n","\t      stream.point = point;\n","\t    }\n","\t    function lineEndPolygon() {\n","\t      context.closePath();\n","\t    }\n","\t    return stream;\n","\t  }\n","\t  function d3_geo_resample(project) {\n","\t    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n","\t    function resample(stream) {\n","\t      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n","\t    }\n","\t    function resampleNone(stream) {\n","\t      return d3_geo_transformPoint(stream, function(x, y) {\n","\t        x = project(x, y);\n","\t        stream.point(x[0], x[1]);\n","\t      });\n","\t    }\n","\t    function resampleRecursive(stream) {\n","\t      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n","\t      var resample = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          stream.polygonStart();\n","\t          resample.lineStart = ringStart;\n","\t        },\n","\t        polygonEnd: function() {\n","\t          stream.polygonEnd();\n","\t          resample.lineStart = lineStart;\n","\t        }\n","\t      };\n","\t      function point(x, y) {\n","\t        x = project(x, y);\n","\t        stream.point(x[0], x[1]);\n","\t      }\n","\t      function lineStart() {\n","\t        x0 = NaN;\n","\t        resample.point = linePoint;\n","\t        stream.lineStart();\n","\t      }\n","\t      function linePoint(λ, φ) {\n","\t        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n","\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n","\t        stream.point(x0, y0);\n","\t      }\n","\t      function lineEnd() {\n","\t        resample.point = point;\n","\t        stream.lineEnd();\n","\t      }\n","\t      function ringStart() {\n","\t        lineStart();\n","\t        resample.point = ringPoint;\n","\t        resample.lineEnd = ringEnd;\n","\t      }\n","\t      function ringPoint(λ, φ) {\n","\t        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n","\t        resample.point = linePoint;\n","\t      }\n","\t      function ringEnd() {\n","\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n","\t        resample.lineEnd = lineEnd;\n","\t        lineEnd();\n","\t      }\n","\t      return resample;\n","\t    }\n","\t    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n","\t      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n","\t      if (d2 > 4 * δ2 && depth--) {\n","\t        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n","\t        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n","\t          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n","\t          stream.point(x2, y2);\n","\t          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n","\t        }\n","\t      }\n","\t    }\n","\t    resample.precision = function(_) {\n","\t      if (!arguments.length) return Math.sqrt(δ2);\n","\t      maxDepth = (δ2 = _ * _) > 0 && 16;\n","\t      return resample;\n","\t    };\n","\t    return resample;\n","\t  }\n","\t  d3.geo.path = function() {\n","\t    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n","\t    function path(object) {\n","\t      if (object) {\n","\t        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n","\t        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n","\t        d3.geo.stream(object, cacheStream);\n","\t      }\n","\t      return contextStream.result();\n","\t    }\n","\t    path.area = function(object) {\n","\t      d3_geo_pathAreaSum = 0;\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n","\t      return d3_geo_pathAreaSum;\n","\t    };\n","\t    path.centroid = function(object) {\n","\t      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n","\t      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n","\t    };\n","\t    path.bounds = function(object) {\n","\t      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n","\t      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n","\t    };\n","\t    path.projection = function(_) {\n","\t      if (!arguments.length) return projection;\n","\t      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n","\t      return reset();\n","\t    };\n","\t    path.context = function(_) {\n","\t      if (!arguments.length) return context;\n","\t      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n","\t      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n","\t      return reset();\n","\t    };\n","\t    path.pointRadius = function(_) {\n","\t      if (!arguments.length) return pointRadius;\n","\t      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n","\t      return path;\n","\t    };\n","\t    function reset() {\n","\t      cacheStream = null;\n","\t      return path;\n","\t    }\n","\t    return path.projection(d3.geo.albersUsa()).context(null);\n","\t  };\n","\t  function d3_geo_pathProjectStream(project) {\n","\t    var resample = d3_geo_resample(function(x, y) {\n","\t      return project([ x * d3_degrees, y * d3_degrees ]);\n","\t    });\n","\t    return function(stream) {\n","\t      return d3_geo_projectionRadians(resample(stream));\n","\t    };\n","\t  }\n","\t  d3.geo.transform = function(methods) {\n","\t    return {\n","\t      stream: function(stream) {\n","\t        var transform = new d3_geo_transform(stream);\n","\t        for (var k in methods) transform[k] = methods[k];\n","\t        return transform;\n","\t      }\n","\t    };\n","\t  };\n","\t  function d3_geo_transform(stream) {\n","\t    this.stream = stream;\n","\t  }\n","\t  d3_geo_transform.prototype = {\n","\t    point: function(x, y) {\n","\t      this.stream.point(x, y);\n","\t    },\n","\t    sphere: function() {\n","\t      this.stream.sphere();\n","\t    },\n","\t    lineStart: function() {\n","\t      this.stream.lineStart();\n","\t    },\n","\t    lineEnd: function() {\n","\t      this.stream.lineEnd();\n","\t    },\n","\t    polygonStart: function() {\n","\t      this.stream.polygonStart();\n","\t    },\n","\t    polygonEnd: function() {\n","\t      this.stream.polygonEnd();\n","\t    }\n","\t  };\n","\t  function d3_geo_transformPoint(stream, point) {\n","\t    return {\n","\t      point: point,\n","\t      sphere: function() {\n","\t        stream.sphere();\n","\t      },\n","\t      lineStart: function() {\n","\t        stream.lineStart();\n","\t      },\n","\t      lineEnd: function() {\n","\t        stream.lineEnd();\n","\t      },\n","\t      polygonStart: function() {\n","\t        stream.polygonStart();\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.polygonEnd();\n","\t      }\n","\t    };\n","\t  }\n","\t  d3.geo.projection = d3_geo_projection;\n","\t  d3.geo.projectionMutator = d3_geo_projectionMutator;\n","\t  function d3_geo_projection(project) {\n","\t    return d3_geo_projectionMutator(function() {\n","\t      return project;\n","\t    })();\n","\t  }\n","\t  function d3_geo_projectionMutator(projectAt) {\n","\t    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n","\t      x = project(x, y);\n","\t      return [ x[0] * k + δx, δy - x[1] * k ];\n","\t    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n","\t    function projection(point) {\n","\t      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n","\t      return [ point[0] * k + δx, δy - point[1] * k ];\n","\t    }\n","\t    function invert(point) {\n","\t      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n","\t      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n","\t    }\n","\t    projection.stream = function(output) {\n","\t      if (stream) stream.valid = false;\n","\t      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n","\t      stream.valid = true;\n","\t      return stream;\n","\t    };\n","\t    projection.clipAngle = function(_) {\n","\t      if (!arguments.length) return clipAngle;\n","\t      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n","\t      return invalidate();\n","\t    };\n","\t    projection.clipExtent = function(_) {\n","\t      if (!arguments.length) return clipExtent;\n","\t      clipExtent = _;\n","\t      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n","\t      return invalidate();\n","\t    };\n","\t    projection.scale = function(_) {\n","\t      if (!arguments.length) return k;\n","\t      k = +_;\n","\t      return reset();\n","\t    };\n","\t    projection.translate = function(_) {\n","\t      if (!arguments.length) return [ x, y ];\n","\t      x = +_[0];\n","\t      y = +_[1];\n","\t      return reset();\n","\t    };\n","\t    projection.center = function(_) {\n","\t      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n","\t      λ = _[0] % 360 * d3_radians;\n","\t      φ = _[1] % 360 * d3_radians;\n","\t      return reset();\n","\t    };\n","\t    projection.rotate = function(_) {\n","\t      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n","\t      δλ = _[0] % 360 * d3_radians;\n","\t      δφ = _[1] % 360 * d3_radians;\n","\t      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n","\t      return reset();\n","\t    };\n","\t    d3.rebind(projection, projectResample, \"precision\");\n","\t    function reset() {\n","\t      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n","\t      var center = project(λ, φ);\n","\t      δx = x - center[0] * k;\n","\t      δy = y + center[1] * k;\n","\t      return invalidate();\n","\t    }\n","\t    function invalidate() {\n","\t      if (stream) stream.valid = false, stream = null;\n","\t      return projection;\n","\t    }\n","\t    return function() {\n","\t      project = projectAt.apply(this, arguments);\n","\t      projection.invert = project.invert && invert;\n","\t      return reset();\n","\t    };\n","\t  }\n","\t  function d3_geo_projectionRadians(stream) {\n","\t    return d3_geo_transformPoint(stream, function(x, y) {\n","\t      stream.point(x * d3_radians, y * d3_radians);\n","\t    });\n","\t  }\n","\t  function d3_geo_equirectangular(λ, φ) {\n","\t    return [ λ, φ ];\n","\t  }\n","\t  (d3.geo.equirectangular = function() {\n","\t    return d3_geo_projection(d3_geo_equirectangular);\n","\t  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n","\t  d3.geo.rotation = function(rotate) {\n","\t    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n","\t    function forward(coordinates) {\n","\t      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n","\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n","\t    }\n","\t    forward.invert = function(coordinates) {\n","\t      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n","\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n","\t    };\n","\t    return forward;\n","\t  };\n","\t  function d3_geo_identityRotation(λ, φ) {\n","\t    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n","\t  }\n","\t  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n","\t  function d3_geo_rotation(δλ, δφ, δγ) {\n","\t    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n","\t  }\n","\t  function d3_geo_forwardRotationλ(δλ) {\n","\t    return function(λ, φ) {\n","\t      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n","\t    };\n","\t  }\n","\t  function d3_geo_rotationλ(δλ) {\n","\t    var rotation = d3_geo_forwardRotationλ(δλ);\n","\t    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n","\t    return rotation;\n","\t  }\n","\t  function d3_geo_rotationφγ(δφ, δγ) {\n","\t    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n","\t    function rotation(λ, φ) {\n","\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n","\t      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n","\t    }\n","\t    rotation.invert = function(λ, φ) {\n","\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n","\t      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n","\t    };\n","\t    return rotation;\n","\t  }\n","\t  d3.geo.circle = function() {\n","\t    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n","\t    function circle() {\n","\t      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n","\t      interpolate(null, null, 1, {\n","\t        point: function(x, y) {\n","\t          ring.push(x = rotate(x, y));\n","\t          x[0] *= d3_degrees, x[1] *= d3_degrees;\n","\t        }\n","\t      });\n","\t      return {\n","\t        type: \"Polygon\",\n","\t        coordinates: [ ring ]\n","\t      };\n","\t    }\n","\t    circle.origin = function(x) {\n","\t      if (!arguments.length) return origin;\n","\t      origin = x;\n","\t      return circle;\n","\t    };\n","\t    circle.angle = function(x) {\n","\t      if (!arguments.length) return angle;\n","\t      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n","\t      return circle;\n","\t    };\n","\t    circle.precision = function(_) {\n","\t      if (!arguments.length) return precision;\n","\t      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n","\t      return circle;\n","\t    };\n","\t    return circle.angle(90);\n","\t  };\n","\t  function d3_geo_circleInterpolate(radius, precision) {\n","\t    var cr = Math.cos(radius), sr = Math.sin(radius);\n","\t    return function(from, to, direction, listener) {\n","\t      var step = direction * precision;\n","\t      if (from != null) {\n","\t        from = d3_geo_circleAngle(cr, from);\n","\t        to = d3_geo_circleAngle(cr, to);\n","\t        if (direction > 0 ? from < to : from > to) from += direction * τ;\n","\t      } else {\n","\t        from = radius + direction * τ;\n","\t        to = radius - .5 * step;\n","\t      }\n","\t      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n","\t        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_circleAngle(cr, point) {\n","\t    var a = d3_geo_cartesian(point);\n","\t    a[0] -= cr;\n","\t    d3_geo_cartesianNormalize(a);\n","\t    var angle = d3_acos(-a[1]);\n","\t    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n","\t  }\n","\t  d3.geo.distance = function(a, b) {\n","\t    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n","\t    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n","\t  };\n","\t  d3.geo.graticule = function() {\n","\t    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n","\t    function graticule() {\n","\t      return {\n","\t        type: \"MultiLineString\",\n","\t        coordinates: lines()\n","\t      };\n","\t    }\n","\t    function lines() {\n","\t      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n","\t        return abs(x % DX) > ε;\n","\t      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n","\t        return abs(y % DY) > ε;\n","\t      }).map(y));\n","\t    }\n","\t    graticule.lines = function() {\n","\t      return lines().map(function(coordinates) {\n","\t        return {\n","\t          type: \"LineString\",\n","\t          coordinates: coordinates\n","\t        };\n","\t      });\n","\t    };\n","\t    graticule.outline = function() {\n","\t      return {\n","\t        type: \"Polygon\",\n","\t        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n","\t      };\n","\t    };\n","\t    graticule.extent = function(_) {\n","\t      if (!arguments.length) return graticule.minorExtent();\n","\t      return graticule.majorExtent(_).minorExtent(_);\n","\t    };\n","\t    graticule.majorExtent = function(_) {\n","\t      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n","\t      X0 = +_[0][0], X1 = +_[1][0];\n","\t      Y0 = +_[0][1], Y1 = +_[1][1];\n","\t      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n","\t      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n","\t      return graticule.precision(precision);\n","\t    };\n","\t    graticule.minorExtent = function(_) {\n","\t      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n","\t      x0 = +_[0][0], x1 = +_[1][0];\n","\t      y0 = +_[0][1], y1 = +_[1][1];\n","\t      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n","\t      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n","\t      return graticule.precision(precision);\n","\t    };\n","\t    graticule.step = function(_) {\n","\t      if (!arguments.length) return graticule.minorStep();\n","\t      return graticule.majorStep(_).minorStep(_);\n","\t    };\n","\t    graticule.majorStep = function(_) {\n","\t      if (!arguments.length) return [ DX, DY ];\n","\t      DX = +_[0], DY = +_[1];\n","\t      return graticule;\n","\t    };\n","\t    graticule.minorStep = function(_) {\n","\t      if (!arguments.length) return [ dx, dy ];\n","\t      dx = +_[0], dy = +_[1];\n","\t      return graticule;\n","\t    };\n","\t    graticule.precision = function(_) {\n","\t      if (!arguments.length) return precision;\n","\t      precision = +_;\n","\t      x = d3_geo_graticuleX(y0, y1, 90);\n","\t      y = d3_geo_graticuleY(x0, x1, precision);\n","\t      X = d3_geo_graticuleX(Y0, Y1, 90);\n","\t      Y = d3_geo_graticuleY(X0, X1, precision);\n","\t      return graticule;\n","\t    };\n","\t    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n","\t  };\n","\t  function d3_geo_graticuleX(y0, y1, dy) {\n","\t    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n","\t    return function(x) {\n","\t      return y.map(function(y) {\n","\t        return [ x, y ];\n","\t      });\n","\t    };\n","\t  }\n","\t  function d3_geo_graticuleY(x0, x1, dx) {\n","\t    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n","\t    return function(y) {\n","\t      return x.map(function(x) {\n","\t        return [ x, y ];\n","\t      });\n","\t    };\n","\t  }\n","\t  function d3_source(d) {\n","\t    return d.source;\n","\t  }\n","\t  function d3_target(d) {\n","\t    return d.target;\n","\t  }\n","\t  d3.geo.greatArc = function() {\n","\t    var source = d3_source, source_, target = d3_target, target_;\n","\t    function greatArc() {\n","\t      return {\n","\t        type: \"LineString\",\n","\t        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n","\t      };\n","\t    }\n","\t    greatArc.distance = function() {\n","\t      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n","\t    };\n","\t    greatArc.source = function(_) {\n","\t      if (!arguments.length) return source;\n","\t      source = _, source_ = typeof _ === \"function\" ? null : _;\n","\t      return greatArc;\n","\t    };\n","\t    greatArc.target = function(_) {\n","\t      if (!arguments.length) return target;\n","\t      target = _, target_ = typeof _ === \"function\" ? null : _;\n","\t      return greatArc;\n","\t    };\n","\t    greatArc.precision = function() {\n","\t      return arguments.length ? greatArc : 0;\n","\t    };\n","\t    return greatArc;\n","\t  };\n","\t  d3.geo.interpolate = function(source, target) {\n","\t    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n","\t  };\n","\t  function d3_geo_interpolate(x0, y0, x1, y1) {\n","\t    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n","\t    var interpolate = d ? function(t) {\n","\t      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n","\t      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n","\t    } : function() {\n","\t      return [ x0 * d3_degrees, y0 * d3_degrees ];\n","\t    };\n","\t    interpolate.distance = d;\n","\t    return interpolate;\n","\t  }\n","\t  d3.geo.length = function(object) {\n","\t    d3_geo_lengthSum = 0;\n","\t    d3.geo.stream(object, d3_geo_length);\n","\t    return d3_geo_lengthSum;\n","\t  };\n","\t  var d3_geo_lengthSum;\n","\t  var d3_geo_length = {\n","\t    sphere: d3_noop,\n","\t    point: d3_noop,\n","\t    lineStart: d3_geo_lengthLineStart,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: d3_noop,\n","\t    polygonEnd: d3_noop\n","\t  };\n","\t  function d3_geo_lengthLineStart() {\n","\t    var λ0, sinφ0, cosφ0;\n","\t    d3_geo_length.point = function(λ, φ) {\n","\t      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n","\t      d3_geo_length.point = nextPoint;\n","\t    };\n","\t    d3_geo_length.lineEnd = function() {\n","\t      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n","\t      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n","\t      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n","\t    }\n","\t  }\n","\t  function d3_geo_azimuthal(scale, angle) {\n","\t    function azimuthal(λ, φ) {\n","\t      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n","\t      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n","\t    }\n","\t    azimuthal.invert = function(x, y) {\n","\t      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n","\t      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n","\t    };\n","\t    return azimuthal;\n","\t  }\n","\t  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return Math.sqrt(2 / (1 + cosλcosφ));\n","\t  }, function(ρ) {\n","\t    return 2 * Math.asin(ρ / 2);\n","\t  });\n","\t  (d3.geo.azimuthalEqualArea = function() {\n","\t    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n","\t  }).raw = d3_geo_azimuthalEqualArea;\n","\t  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    var c = Math.acos(cosλcosφ);\n","\t    return c && c / Math.sin(c);\n","\t  }, d3_identity);\n","\t  (d3.geo.azimuthalEquidistant = function() {\n","\t    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n","\t  }).raw = d3_geo_azimuthalEquidistant;\n","\t  function d3_geo_conicConformal(φ0, φ1) {\n","\t    var cosφ0 = Math.cos(φ0), t = function(φ) {\n","\t      return Math.tan(π / 4 + φ / 2);\n","\t    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n","\t    if (!n) return d3_geo_mercator;\n","\t    function forward(λ, φ) {\n","\t      if (F > 0) {\n","\t        if (φ < -halfπ + ε) φ = -halfπ + ε;\n","\t      } else {\n","\t        if (φ > halfπ - ε) φ = halfπ - ε;\n","\t      }\n","\t      var ρ = F / Math.pow(t(φ), n);\n","\t      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n","\t      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicConformal = function() {\n","\t    return d3_geo_conic(d3_geo_conicConformal);\n","\t  }).raw = d3_geo_conicConformal;\n","\t  function d3_geo_conicEquidistant(φ0, φ1) {\n","\t    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n","\t    if (abs(n) < ε) return d3_geo_equirectangular;\n","\t    function forward(λ, φ) {\n","\t      var ρ = G - φ;\n","\t      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = G - y;\n","\t      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicEquidistant = function() {\n","\t    return d3_geo_conic(d3_geo_conicEquidistant);\n","\t  }).raw = d3_geo_conicEquidistant;\n","\t  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return 1 / cosλcosφ;\n","\t  }, Math.atan);\n","\t  (d3.geo.gnomonic = function() {\n","\t    return d3_geo_projection(d3_geo_gnomonic);\n","\t  }).raw = d3_geo_gnomonic;\n","\t  function d3_geo_mercator(λ, φ) {\n","\t    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n","\t  }\n","\t  d3_geo_mercator.invert = function(x, y) {\n","\t    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n","\t  };\n","\t  function d3_geo_mercatorProjection(project) {\n","\t    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n","\t    m.scale = function() {\n","\t      var v = scale.apply(m, arguments);\n","\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n","\t    };\n","\t    m.translate = function() {\n","\t      var v = translate.apply(m, arguments);\n","\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n","\t    };\n","\t    m.clipExtent = function(_) {\n","\t      var v = clipExtent.apply(m, arguments);\n","\t      if (v === m) {\n","\t        if (clipAuto = _ == null) {\n","\t          var k = π * scale(), t = translate();\n","\t          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n","\t        }\n","\t      } else if (clipAuto) {\n","\t        v = null;\n","\t      }\n","\t      return v;\n","\t    };\n","\t    return m.clipExtent(null);\n","\t  }\n","\t  (d3.geo.mercator = function() {\n","\t    return d3_geo_mercatorProjection(d3_geo_mercator);\n","\t  }).raw = d3_geo_mercator;\n","\t  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n","\t    return 1;\n","\t  }, Math.asin);\n","\t  (d3.geo.orthographic = function() {\n","\t    return d3_geo_projection(d3_geo_orthographic);\n","\t  }).raw = d3_geo_orthographic;\n","\t  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return 1 / (1 + cosλcosφ);\n","\t  }, function(ρ) {\n","\t    return 2 * Math.atan(ρ);\n","\t  });\n","\t  (d3.geo.stereographic = function() {\n","\t    return d3_geo_projection(d3_geo_stereographic);\n","\t  }).raw = d3_geo_stereographic;\n","\t  function d3_geo_transverseMercator(λ, φ) {\n","\t    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n","\t  }\n","\t  d3_geo_transverseMercator.invert = function(x, y) {\n","\t    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n","\t  };\n","\t  (d3.geo.transverseMercator = function() {\n","\t    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n","\t    projection.center = function(_) {\n","\t      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n","\t    };\n","\t    projection.rotate = function(_) {\n","\t      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n","\t      [ _[0], _[1], _[2] - 90 ]);\n","\t    };\n","\t    return rotate([ 0, 0, 90 ]);\n","\t  }).raw = d3_geo_transverseMercator;\n","\t  d3.geom = {};\n","\t  function d3_geom_pointX(d) {\n","\t    return d[0];\n","\t  }\n","\t  function d3_geom_pointY(d) {\n","\t    return d[1];\n","\t  }\n","\t  d3.geom.hull = function(vertices) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY;\n","\t    if (arguments.length) return hull(vertices);\n","\t    function hull(data) {\n","\t      if (data.length < 3) return [];\n","\t      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n","\t      for (i = 0; i < n; i++) {\n","\t        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n","\t      }\n","\t      points.sort(d3_geom_hullOrder);\n","\t      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n","\t      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n","\t      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n","\t      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n","\t      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n","\t      return polygon;\n","\t    }\n","\t    hull.x = function(_) {\n","\t      return arguments.length ? (x = _, hull) : x;\n","\t    };\n","\t    hull.y = function(_) {\n","\t      return arguments.length ? (y = _, hull) : y;\n","\t    };\n","\t    return hull;\n","\t  };\n","\t  function d3_geom_hullUpper(points) {\n","\t    var n = points.length, hull = [ 0, 1 ], hs = 2;\n","\t    for (var i = 2; i < n; i++) {\n","\t      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n","\t      hull[hs++] = i;\n","\t    }\n","\t    return hull.slice(0, hs);\n","\t  }\n","\t  function d3_geom_hullOrder(a, b) {\n","\t    return a[0] - b[0] || a[1] - b[1];\n","\t  }\n","\t  d3.geom.polygon = function(coordinates) {\n","\t    d3_subclass(coordinates, d3_geom_polygonPrototype);\n","\t    return coordinates;\n","\t  };\n","\t  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n","\t  d3_geom_polygonPrototype.area = function() {\n","\t    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n","\t    while (++i < n) {\n","\t      a = b;\n","\t      b = this[i];\n","\t      area += a[1] * b[0] - a[0] * b[1];\n","\t    }\n","\t    return area * .5;\n","\t  };\n","\t  d3_geom_polygonPrototype.centroid = function(k) {\n","\t    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n","\t    if (!arguments.length) k = -1 / (6 * this.area());\n","\t    while (++i < n) {\n","\t      a = b;\n","\t      b = this[i];\n","\t      c = a[0] * b[1] - b[0] * a[1];\n","\t      x += (a[0] + b[0]) * c;\n","\t      y += (a[1] + b[1]) * c;\n","\t    }\n","\t    return [ x * k, y * k ];\n","\t  };\n","\t  d3_geom_polygonPrototype.clip = function(subject) {\n","\t    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n","\t    while (++i < n) {\n","\t      input = subject.slice();\n","\t      subject.length = 0;\n","\t      b = this[i];\n","\t      c = input[(m = input.length - closed) - 1];\n","\t      j = -1;\n","\t      while (++j < m) {\n","\t        d = input[j];\n","\t        if (d3_geom_polygonInside(d, a, b)) {\n","\t          if (!d3_geom_polygonInside(c, a, b)) {\n","\t            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n","\t          }\n","\t          subject.push(d);\n","\t        } else if (d3_geom_polygonInside(c, a, b)) {\n","\t          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n","\t        }\n","\t        c = d;\n","\t      }\n","\t      if (closed) subject.push(subject[0]);\n","\t      a = b;\n","\t    }\n","\t    return subject;\n","\t  };\n","\t  function d3_geom_polygonInside(p, a, b) {\n","\t    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n","\t  }\n","\t  function d3_geom_polygonIntersect(c, d, a, b) {\n","\t    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n","\t    return [ x1 + ua * x21, y1 + ua * y21 ];\n","\t  }\n","\t  function d3_geom_polygonClosed(coordinates) {\n","\t    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n","\t    return !(a[0] - b[0] || a[1] - b[1]);\n","\t  }\n","\t  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n","\t  function d3_geom_voronoiBeach() {\n","\t    d3_geom_voronoiRedBlackNode(this);\n","\t    this.edge = this.site = this.circle = null;\n","\t  }\n","\t  function d3_geom_voronoiCreateBeach(site) {\n","\t    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n","\t    beach.site = site;\n","\t    return beach;\n","\t  }\n","\t  function d3_geom_voronoiDetachBeach(beach) {\n","\t    d3_geom_voronoiDetachCircle(beach);\n","\t    d3_geom_voronoiBeaches.remove(beach);\n","\t    d3_geom_voronoiBeachPool.push(beach);\n","\t    d3_geom_voronoiRedBlackNode(beach);\n","\t  }\n","\t  function d3_geom_voronoiRemoveBeach(beach) {\n","\t    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n","\t      x: x,\n","\t      y: y\n","\t    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n","\t    d3_geom_voronoiDetachBeach(beach);\n","\t    var lArc = previous;\n","\t    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n","\t      previous = lArc.P;\n","\t      disappearing.unshift(lArc);\n","\t      d3_geom_voronoiDetachBeach(lArc);\n","\t      lArc = previous;\n","\t    }\n","\t    disappearing.unshift(lArc);\n","\t    d3_geom_voronoiDetachCircle(lArc);\n","\t    var rArc = next;\n","\t    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n","\t      next = rArc.N;\n","\t      disappearing.push(rArc);\n","\t      d3_geom_voronoiDetachBeach(rArc);\n","\t      rArc = next;\n","\t    }\n","\t    disappearing.push(rArc);\n","\t    d3_geom_voronoiDetachCircle(rArc);\n","\t    var nArcs = disappearing.length, iArc;\n","\t    for (iArc = 1; iArc < nArcs; ++iArc) {\n","\t      rArc = disappearing[iArc];\n","\t      lArc = disappearing[iArc - 1];\n","\t      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n","\t    }\n","\t    lArc = disappearing[0];\n","\t    rArc = disappearing[nArcs - 1];\n","\t    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n","\t    d3_geom_voronoiAttachCircle(lArc);\n","\t    d3_geom_voronoiAttachCircle(rArc);\n","\t  }\n","\t  function d3_geom_voronoiAddBeach(site) {\n","\t    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n","\t    while (node) {\n","\t      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n","\t      if (dxl > ε) node = node.L; else {\n","\t        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n","\t        if (dxr > ε) {\n","\t          if (!node.R) {\n","\t            lArc = node;\n","\t            break;\n","\t          }\n","\t          node = node.R;\n","\t        } else {\n","\t          if (dxl > -ε) {\n","\t            lArc = node.P;\n","\t            rArc = node;\n","\t          } else if (dxr > -ε) {\n","\t            lArc = node;\n","\t            rArc = node.N;\n","\t          } else {\n","\t            lArc = rArc = node;\n","\t          }\n","\t          break;\n","\t        }\n","\t      }\n","\t    }\n","\t    var newArc = d3_geom_voronoiCreateBeach(site);\n","\t    d3_geom_voronoiBeaches.insert(lArc, newArc);\n","\t    if (!lArc && !rArc) return;\n","\t    if (lArc === rArc) {\n","\t      d3_geom_voronoiDetachCircle(lArc);\n","\t      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n","\t      d3_geom_voronoiBeaches.insert(newArc, rArc);\n","\t      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n","\t      d3_geom_voronoiAttachCircle(lArc);\n","\t      d3_geom_voronoiAttachCircle(rArc);\n","\t      return;\n","\t    }\n","\t    if (!rArc) {\n","\t      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n","\t      return;\n","\t    }\n","\t    d3_geom_voronoiDetachCircle(lArc);\n","\t    d3_geom_voronoiDetachCircle(rArc);\n","\t    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n","\t      x: (cy * hb - by * hc) / d + ax,\n","\t      y: (bx * hc - cx * hb) / d + ay\n","\t    };\n","\t    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n","\t    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n","\t    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n","\t    d3_geom_voronoiAttachCircle(lArc);\n","\t    d3_geom_voronoiAttachCircle(rArc);\n","\t  }\n","\t  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n","\t    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n","\t    if (!pby2) return rfocx;\n","\t    var lArc = arc.P;\n","\t    if (!lArc) return -Infinity;\n","\t    site = lArc.site;\n","\t    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n","\t    if (!plby2) return lfocx;\n","\t    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n","\t    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n","\t    return (rfocx + lfocx) / 2;\n","\t  }\n","\t  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n","\t    var rArc = arc.N;\n","\t    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n","\t    var site = arc.site;\n","\t    return site.y === directrix ? site.x : Infinity;\n","\t  }\n","\t  function d3_geom_voronoiCell(site) {\n","\t    this.site = site;\n","\t    this.edges = [];\n","\t  }\n","\t  d3_geom_voronoiCell.prototype.prepare = function() {\n","\t    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n","\t    while (iHalfEdge--) {\n","\t      edge = halfEdges[iHalfEdge].edge;\n","\t      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n","\t    }\n","\t    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n","\t    return halfEdges.length;\n","\t  };\n","\t  function d3_geom_voronoiCloseCells(extent) {\n","\t    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n","\t    while (iCell--) {\n","\t      cell = cells[iCell];\n","\t      if (!cell || !cell.prepare()) continue;\n","\t      halfEdges = cell.edges;\n","\t      nHalfEdges = halfEdges.length;\n","\t      iHalfEdge = 0;\n","\t      while (iHalfEdge < nHalfEdges) {\n","\t        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n","\t        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n","\t        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n","\t          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n","\t            x: x0,\n","\t            y: abs(x2 - x0) < ε ? y2 : y1\n","\t          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n","\t            x: abs(y2 - y1) < ε ? x2 : x1,\n","\t            y: y1\n","\t          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n","\t            x: x1,\n","\t            y: abs(x2 - x1) < ε ? y2 : y0\n","\t          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n","\t            x: abs(y2 - y0) < ε ? x2 : x0,\n","\t            y: y0\n","\t          } : null), cell.site, null));\n","\t          ++nHalfEdges;\n","\t        }\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n","\t    return b.angle - a.angle;\n","\t  }\n","\t  function d3_geom_voronoiCircle() {\n","\t    d3_geom_voronoiRedBlackNode(this);\n","\t    this.x = this.y = this.arc = this.site = this.cy = null;\n","\t  }\n","\t  function d3_geom_voronoiAttachCircle(arc) {\n","\t    var lArc = arc.P, rArc = arc.N;\n","\t    if (!lArc || !rArc) return;\n","\t    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n","\t    if (lSite === rSite) return;\n","\t    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n","\t    var d = 2 * (ax * cy - ay * cx);\n","\t    if (d >= -ε2) return;\n","\t    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n","\t    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n","\t    circle.arc = arc;\n","\t    circle.site = cSite;\n","\t    circle.x = x + bx;\n","\t    circle.y = cy + Math.sqrt(x * x + y * y);\n","\t    circle.cy = cy;\n","\t    arc.circle = circle;\n","\t    var before = null, node = d3_geom_voronoiCircles._;\n","\t    while (node) {\n","\t      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n","\t        if (node.L) node = node.L; else {\n","\t          before = node.P;\n","\t          break;\n","\t        }\n","\t      } else {\n","\t        if (node.R) node = node.R; else {\n","\t          before = node;\n","\t          break;\n","\t        }\n","\t      }\n","\t    }\n","\t    d3_geom_voronoiCircles.insert(before, circle);\n","\t    if (!before) d3_geom_voronoiFirstCircle = circle;\n","\t  }\n","\t  function d3_geom_voronoiDetachCircle(arc) {\n","\t    var circle = arc.circle;\n","\t    if (circle) {\n","\t      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n","\t      d3_geom_voronoiCircles.remove(circle);\n","\t      d3_geom_voronoiCirclePool.push(circle);\n","\t      d3_geom_voronoiRedBlackNode(circle);\n","\t      arc.circle = null;\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiClipEdges(extent) {\n","\t    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n","\t    while (i--) {\n","\t      e = edges[i];\n","\t      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n","\t        e.a = e.b = null;\n","\t        edges.splice(i, 1);\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiConnectEdge(edge, extent) {\n","\t    var vb = edge.b;\n","\t    if (vb) return true;\n","\t    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n","\t    if (ry === ly) {\n","\t      if (fx < x0 || fx >= x1) return;\n","\t      if (lx > rx) {\n","\t        if (!va) va = {\n","\t          x: fx,\n","\t          y: y0\n","\t        }; else if (va.y >= y1) return;\n","\t        vb = {\n","\t          x: fx,\n","\t          y: y1\n","\t        };\n","\t      } else {\n","\t        if (!va) va = {\n","\t          x: fx,\n","\t          y: y1\n","\t        }; else if (va.y < y0) return;\n","\t        vb = {\n","\t          x: fx,\n","\t          y: y0\n","\t        };\n","\t      }\n","\t    } else {\n","\t      fm = (lx - rx) / (ry - ly);\n","\t      fb = fy - fm * fx;\n","\t      if (fm < -1 || fm > 1) {\n","\t        if (lx > rx) {\n","\t          if (!va) va = {\n","\t            x: (y0 - fb) / fm,\n","\t            y: y0\n","\t          }; else if (va.y >= y1) return;\n","\t          vb = {\n","\t            x: (y1 - fb) / fm,\n","\t            y: y1\n","\t          };\n","\t        } else {\n","\t          if (!va) va = {\n","\t            x: (y1 - fb) / fm,\n","\t            y: y1\n","\t          }; else if (va.y < y0) return;\n","\t          vb = {\n","\t            x: (y0 - fb) / fm,\n","\t            y: y0\n","\t          };\n","\t        }\n","\t      } else {\n","\t        if (ly < ry) {\n","\t          if (!va) va = {\n","\t            x: x0,\n","\t            y: fm * x0 + fb\n","\t          }; else if (va.x >= x1) return;\n","\t          vb = {\n","\t            x: x1,\n","\t            y: fm * x1 + fb\n","\t          };\n","\t        } else {\n","\t          if (!va) va = {\n","\t            x: x1,\n","\t            y: fm * x1 + fb\n","\t          }; else if (va.x < x0) return;\n","\t          vb = {\n","\t            x: x0,\n","\t            y: fm * x0 + fb\n","\t          };\n","\t        }\n","\t      }\n","\t    }\n","\t    edge.a = va;\n","\t    edge.b = vb;\n","\t    return true;\n","\t  }\n","\t  function d3_geom_voronoiEdge(lSite, rSite) {\n","\t    this.l = lSite;\n","\t    this.r = rSite;\n","\t    this.a = this.b = null;\n","\t  }\n","\t  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n","\t    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n","\t    d3_geom_voronoiEdges.push(edge);\n","\t    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n","\t    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n","\t    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n","\t    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n","\t    return edge;\n","\t  }\n","\t  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n","\t    var edge = new d3_geom_voronoiEdge(lSite, null);\n","\t    edge.a = va;\n","\t    edge.b = vb;\n","\t    d3_geom_voronoiEdges.push(edge);\n","\t    return edge;\n","\t  }\n","\t  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n","\t    if (!edge.a && !edge.b) {\n","\t      edge.a = vertex;\n","\t      edge.l = lSite;\n","\t      edge.r = rSite;\n","\t    } else if (edge.l === rSite) {\n","\t      edge.b = vertex;\n","\t    } else {\n","\t      edge.a = vertex;\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n","\t    var va = edge.a, vb = edge.b;\n","\t    this.edge = edge;\n","\t    this.site = lSite;\n","\t    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n","\t  }\n","\t  d3_geom_voronoiHalfEdge.prototype = {\n","\t    start: function() {\n","\t      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n","\t    },\n","\t    end: function() {\n","\t      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n","\t    }\n","\t  };\n","\t  function d3_geom_voronoiRedBlackTree() {\n","\t    this._ = null;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackNode(node) {\n","\t    node.U = node.C = node.L = node.R = node.P = node.N = null;\n","\t  }\n","\t  d3_geom_voronoiRedBlackTree.prototype = {\n","\t    insert: function(after, node) {\n","\t      var parent, grandpa, uncle;\n","\t      if (after) {\n","\t        node.P = after;\n","\t        node.N = after.N;\n","\t        if (after.N) after.N.P = node;\n","\t        after.N = node;\n","\t        if (after.R) {\n","\t          after = after.R;\n","\t          while (after.L) after = after.L;\n","\t          after.L = node;\n","\t        } else {\n","\t          after.R = node;\n","\t        }\n","\t        parent = after;\n","\t      } else if (this._) {\n","\t        after = d3_geom_voronoiRedBlackFirst(this._);\n","\t        node.P = null;\n","\t        node.N = after;\n","\t        after.P = after.L = node;\n","\t        parent = after;\n","\t      } else {\n","\t        node.P = node.N = null;\n","\t        this._ = node;\n","\t        parent = null;\n","\t      }\n","\t      node.L = node.R = null;\n","\t      node.U = parent;\n","\t      node.C = true;\n","\t      after = node;\n","\t      while (parent && parent.C) {\n","\t        grandpa = parent.U;\n","\t        if (parent === grandpa.L) {\n","\t          uncle = grandpa.R;\n","\t          if (uncle && uncle.C) {\n","\t            parent.C = uncle.C = false;\n","\t            grandpa.C = true;\n","\t            after = grandpa;\n","\t          } else {\n","\t            if (after === parent.R) {\n","\t              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t              after = parent;\n","\t              parent = after.U;\n","\t            }\n","\t            parent.C = false;\n","\t            grandpa.C = true;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n","\t          }\n","\t        } else {\n","\t          uncle = grandpa.L;\n","\t          if (uncle && uncle.C) {\n","\t            parent.C = uncle.C = false;\n","\t            grandpa.C = true;\n","\t            after = grandpa;\n","\t          } else {\n","\t            if (after === parent.L) {\n","\t              d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t              after = parent;\n","\t              parent = after.U;\n","\t            }\n","\t            parent.C = false;\n","\t            grandpa.C = true;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n","\t          }\n","\t        }\n","\t        parent = after.U;\n","\t      }\n","\t      this._.C = false;\n","\t    },\n","\t    remove: function(node) {\n","\t      if (node.N) node.N.P = node.P;\n","\t      if (node.P) node.P.N = node.N;\n","\t      node.N = node.P = null;\n","\t      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n","\t      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n","\t      if (parent) {\n","\t        if (parent.L === node) parent.L = next; else parent.R = next;\n","\t      } else {\n","\t        this._ = next;\n","\t      }\n","\t      if (left && right) {\n","\t        red = next.C;\n","\t        next.C = node.C;\n","\t        next.L = left;\n","\t        left.U = next;\n","\t        if (next !== right) {\n","\t          parent = next.U;\n","\t          next.U = node.U;\n","\t          node = next.R;\n","\t          parent.L = node;\n","\t          next.R = right;\n","\t          right.U = next;\n","\t        } else {\n","\t          next.U = parent;\n","\t          parent = next;\n","\t          node = next.R;\n","\t        }\n","\t      } else {\n","\t        red = node.C;\n","\t        node = next;\n","\t      }\n","\t      if (node) node.U = parent;\n","\t      if (red) return;\n","\t      if (node && node.C) {\n","\t        node.C = false;\n","\t        return;\n","\t      }\n","\t      do {\n","\t        if (node === this._) break;\n","\t        if (node === parent.L) {\n","\t          sibling = parent.R;\n","\t          if (sibling.C) {\n","\t            sibling.C = false;\n","\t            parent.C = true;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t            sibling = parent.R;\n","\t          }\n","\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n","\t            if (!sibling.R || !sibling.R.C) {\n","\t              sibling.L.C = false;\n","\t              sibling.C = true;\n","\t              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n","\t              sibling = parent.R;\n","\t            }\n","\t            sibling.C = parent.C;\n","\t            parent.C = sibling.R.C = false;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t            node = this._;\n","\t            break;\n","\t          }\n","\t        } else {\n","\t          sibling = parent.L;\n","\t          if (sibling.C) {\n","\t            sibling.C = false;\n","\t            parent.C = true;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t            sibling = parent.L;\n","\t          }\n","\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n","\t            if (!sibling.L || !sibling.L.C) {\n","\t              sibling.R.C = false;\n","\t              sibling.C = true;\n","\t              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n","\t              sibling = parent.L;\n","\t            }\n","\t            sibling.C = parent.C;\n","\t            parent.C = sibling.L.C = false;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t            node = this._;\n","\t            break;\n","\t          }\n","\t        }\n","\t        sibling.C = true;\n","\t        node = parent;\n","\t        parent = parent.U;\n","\t      } while (!node.C);\n","\t      if (node) node.C = false;\n","\t    }\n","\t  };\n","\t  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n","\t    var p = node, q = node.R, parent = p.U;\n","\t    if (parent) {\n","\t      if (parent.L === p) parent.L = q; else parent.R = q;\n","\t    } else {\n","\t      tree._ = q;\n","\t    }\n","\t    q.U = parent;\n","\t    p.U = q;\n","\t    p.R = q.L;\n","\t    if (p.R) p.R.U = p;\n","\t    q.L = p;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n","\t    var p = node, q = node.L, parent = p.U;\n","\t    if (parent) {\n","\t      if (parent.L === p) parent.L = q; else parent.R = q;\n","\t    } else {\n","\t      tree._ = q;\n","\t    }\n","\t    q.U = parent;\n","\t    p.U = q;\n","\t    p.L = q.R;\n","\t    if (p.L) p.L.U = p;\n","\t    q.R = p;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackFirst(node) {\n","\t    while (node.L) node = node.L;\n","\t    return node;\n","\t  }\n","\t  function d3_geom_voronoi(sites, bbox) {\n","\t    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n","\t    d3_geom_voronoiEdges = [];\n","\t    d3_geom_voronoiCells = new Array(sites.length);\n","\t    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n","\t    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n","\t    while (true) {\n","\t      circle = d3_geom_voronoiFirstCircle;\n","\t      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n","\t        if (site.x !== x0 || site.y !== y0) {\n","\t          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n","\t          d3_geom_voronoiAddBeach(site);\n","\t          x0 = site.x, y0 = site.y;\n","\t        }\n","\t        site = sites.pop();\n","\t      } else if (circle) {\n","\t        d3_geom_voronoiRemoveBeach(circle.arc);\n","\t      } else {\n","\t        break;\n","\t      }\n","\t    }\n","\t    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n","\t    var diagram = {\n","\t      cells: d3_geom_voronoiCells,\n","\t      edges: d3_geom_voronoiEdges\n","\t    };\n","\t    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n","\t    return diagram;\n","\t  }\n","\t  function d3_geom_voronoiVertexOrder(a, b) {\n","\t    return b.y - a.y || b.x - a.x;\n","\t  }\n","\t  d3.geom.voronoi = function(points) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n","\t    if (points) return voronoi(points);\n","\t    function voronoi(data) {\n","\t      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n","\t      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n","\t        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n","\t          var s = e.start();\n","\t          return [ s.x, s.y ];\n","\t        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n","\t        polygon.point = data[i];\n","\t      });\n","\t      return polygons;\n","\t    }\n","\t    function sites(data) {\n","\t      return data.map(function(d, i) {\n","\t        return {\n","\t          x: Math.round(fx(d, i) / ε) * ε,\n","\t          y: Math.round(fy(d, i) / ε) * ε,\n","\t          i: i\n","\t        };\n","\t      });\n","\t    }\n","\t    voronoi.links = function(data) {\n","\t      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n","\t        return edge.l && edge.r;\n","\t      }).map(function(edge) {\n","\t        return {\n","\t          source: data[edge.l.i],\n","\t          target: data[edge.r.i]\n","\t        };\n","\t      });\n","\t    };\n","\t    voronoi.triangles = function(data) {\n","\t      var triangles = [];\n","\t      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n","\t        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n","\t        while (++j < m) {\n","\t          e0 = e1;\n","\t          s0 = s1;\n","\t          e1 = edges[j].edge;\n","\t          s1 = e1.l === site ? e1.r : e1.l;\n","\t          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n","\t            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n","\t          }\n","\t        }\n","\t      });\n","\t      return triangles;\n","\t    };\n","\t    voronoi.x = function(_) {\n","\t      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n","\t    };\n","\t    voronoi.y = function(_) {\n","\t      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n","\t    };\n","\t    voronoi.clipExtent = function(_) {\n","\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n","\t      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n","\t      return voronoi;\n","\t    };\n","\t    voronoi.size = function(_) {\n","\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n","\t      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n","\t    };\n","\t    return voronoi;\n","\t  };\n","\t  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n","\t  function d3_geom_voronoiTriangleArea(a, b, c) {\n","\t    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n","\t  }\n","\t  d3.geom.delaunay = function(vertices) {\n","\t    return d3.geom.voronoi().triangles(vertices);\n","\t  };\n","\t  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n","\t    if (compat = arguments.length) {\n","\t      x = d3_geom_quadtreeCompatX;\n","\t      y = d3_geom_quadtreeCompatY;\n","\t      if (compat === 3) {\n","\t        y2 = y1;\n","\t        x2 = x1;\n","\t        y1 = x1 = 0;\n","\t      }\n","\t      return quadtree(points);\n","\t    }\n","\t    function quadtree(data) {\n","\t      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n","\t      if (x1 != null) {\n","\t        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n","\t      } else {\n","\t        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n","\t        xs = [], ys = [];\n","\t        n = data.length;\n","\t        if (compat) for (i = 0; i < n; ++i) {\n","\t          d = data[i];\n","\t          if (d.x < x1_) x1_ = d.x;\n","\t          if (d.y < y1_) y1_ = d.y;\n","\t          if (d.x > x2_) x2_ = d.x;\n","\t          if (d.y > y2_) y2_ = d.y;\n","\t          xs.push(d.x);\n","\t          ys.push(d.y);\n","\t        } else for (i = 0; i < n; ++i) {\n","\t          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n","\t          if (x_ < x1_) x1_ = x_;\n","\t          if (y_ < y1_) y1_ = y_;\n","\t          if (x_ > x2_) x2_ = x_;\n","\t          if (y_ > y2_) y2_ = y_;\n","\t          xs.push(x_);\n","\t          ys.push(y_);\n","\t        }\n","\t      }\n","\t      var dx = x2_ - x1_, dy = y2_ - y1_;\n","\t      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n","\t      function insert(n, d, x, y, x1, y1, x2, y2) {\n","\t        if (isNaN(x) || isNaN(y)) return;\n","\t        if (n.leaf) {\n","\t          var nx = n.x, ny = n.y;\n","\t          if (nx != null) {\n","\t            if (abs(nx - x) + abs(ny - y) < .01) {\n","\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t            } else {\n","\t              var nPoint = n.point;\n","\t              n.x = n.y = n.point = null;\n","\t              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n","\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t            }\n","\t          } else {\n","\t            n.x = x, n.y = y, n.point = d;\n","\t          }\n","\t        } else {\n","\t          insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t        }\n","\t      }\n","\t      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n","\t        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n","\t        n.leaf = false;\n","\t        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n","\t        if (right) x1 = xm; else x2 = xm;\n","\t        if (below) y1 = ym; else y2 = ym;\n","\t        insert(n, d, x, y, x1, y1, x2, y2);\n","\t      }\n","\t      var root = d3_geom_quadtreeNode();\n","\t      root.add = function(d) {\n","\t        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n","\t      };\n","\t      root.visit = function(f) {\n","\t        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n","\t      };\n","\t      root.find = function(point) {\n","\t        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n","\t      };\n","\t      i = -1;\n","\t      if (x1 == null) {\n","\t        while (++i < n) {\n","\t          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n","\t        }\n","\t        --i;\n","\t      } else data.forEach(root.add);\n","\t      xs = ys = data = d = null;\n","\t      return root;\n","\t    }\n","\t    quadtree.x = function(_) {\n","\t      return arguments.length ? (x = _, quadtree) : x;\n","\t    };\n","\t    quadtree.y = function(_) {\n","\t      return arguments.length ? (y = _, quadtree) : y;\n","\t    };\n","\t    quadtree.extent = function(_) {\n","\t      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n","\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n","\t      y2 = +_[1][1];\n","\t      return quadtree;\n","\t    };\n","\t    quadtree.size = function(_) {\n","\t      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n","\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n","\t      return quadtree;\n","\t    };\n","\t    return quadtree;\n","\t  };\n","\t  function d3_geom_quadtreeCompatX(d) {\n","\t    return d.x;\n","\t  }\n","\t  function d3_geom_quadtreeCompatY(d) {\n","\t    return d.y;\n","\t  }\n","\t  function d3_geom_quadtreeNode() {\n","\t    return {\n","\t      leaf: true,\n","\t      nodes: [],\n","\t      point: null,\n","\t      x: null,\n","\t      y: null\n","\t    };\n","\t  }\n","\t  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n","\t    if (!f(node, x1, y1, x2, y2)) {\n","\t      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n","\t      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n","\t      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n","\t      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n","\t      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n","\t    }\n","\t  }\n","\t  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n","\t    var minDistance2 = Infinity, closestPoint;\n","\t    (function find(node, x1, y1, x2, y2) {\n","\t      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n","\t      if (point = node.point) {\n","\t        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n","\t        if (distance2 < minDistance2) {\n","\t          var distance = Math.sqrt(minDistance2 = distance2);\n","\t          x0 = x - distance, y0 = y - distance;\n","\t          x3 = x + distance, y3 = y + distance;\n","\t          closestPoint = point;\n","\t        }\n","\t      }\n","\t      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n","\t      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n","\t        if (node = children[i & 3]) switch (i & 3) {\n","\t         case 0:\n","\t          find(node, x1, y1, xm, ym);\n","\t          break;\n","\t\n","\t         case 1:\n","\t          find(node, xm, y1, x2, ym);\n","\t          break;\n","\t\n","\t         case 2:\n","\t          find(node, x1, ym, xm, y2);\n","\t          break;\n","\t\n","\t         case 3:\n","\t          find(node, xm, ym, x2, y2);\n","\t          break;\n","\t        }\n","\t      }\n","\t    })(root, x0, y0, x3, y3);\n","\t    return closestPoint;\n","\t  }\n","\t  d3.interpolateRgb = d3_interpolateRgb;\n","\t  function d3_interpolateRgb(a, b) {\n","\t    a = d3.rgb(a);\n","\t    b = d3.rgb(b);\n","\t    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n","\t    return function(t) {\n","\t      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n","\t    };\n","\t  }\n","\t  d3.interpolateObject = d3_interpolateObject;\n","\t  function d3_interpolateObject(a, b) {\n","\t    var i = {}, c = {}, k;\n","\t    for (k in a) {\n","\t      if (k in b) {\n","\t        i[k] = d3_interpolate(a[k], b[k]);\n","\t      } else {\n","\t        c[k] = a[k];\n","\t      }\n","\t    }\n","\t    for (k in b) {\n","\t      if (!(k in a)) {\n","\t        c[k] = b[k];\n","\t      }\n","\t    }\n","\t    return function(t) {\n","\t      for (k in i) c[k] = i[k](t);\n","\t      return c;\n","\t    };\n","\t  }\n","\t  d3.interpolateNumber = d3_interpolateNumber;\n","\t  function d3_interpolateNumber(a, b) {\n","\t    a = +a, b = +b;\n","\t    return function(t) {\n","\t      return a * (1 - t) + b * t;\n","\t    };\n","\t  }\n","\t  d3.interpolateString = d3_interpolateString;\n","\t  function d3_interpolateString(a, b) {\n","\t    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n","\t    a = a + \"\", b = b + \"\";\n","\t    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n","\t      if ((bs = bm.index) > bi) {\n","\t        bs = b.slice(bi, bs);\n","\t        if (s[i]) s[i] += bs; else s[++i] = bs;\n","\t      }\n","\t      if ((am = am[0]) === (bm = bm[0])) {\n","\t        if (s[i]) s[i] += bm; else s[++i] = bm;\n","\t      } else {\n","\t        s[++i] = null;\n","\t        q.push({\n","\t          i: i,\n","\t          x: d3_interpolateNumber(am, bm)\n","\t        });\n","\t      }\n","\t      bi = d3_interpolate_numberB.lastIndex;\n","\t    }\n","\t    if (bi < b.length) {\n","\t      bs = b.slice(bi);\n","\t      if (s[i]) s[i] += bs; else s[++i] = bs;\n","\t    }\n","\t    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n","\t      return b(t) + \"\";\n","\t    }) : function() {\n","\t      return b;\n","\t    } : (b = q.length, function(t) {\n","\t      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n","\t      return s.join(\"\");\n","\t    });\n","\t  }\n","\t  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n","\t  d3.interpolate = d3_interpolate;\n","\t  function d3_interpolate(a, b) {\n","\t    var i = d3.interpolators.length, f;\n","\t    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n","\t    return f;\n","\t  }\n","\t  d3.interpolators = [ function(a, b) {\n","\t    var t = typeof b;\n","\t    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n","\t  } ];\n","\t  d3.interpolateArray = d3_interpolateArray;\n","\t  function d3_interpolateArray(a, b) {\n","\t    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n","\t    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n","\t    for (;i < na; ++i) c[i] = a[i];\n","\t    for (;i < nb; ++i) c[i] = b[i];\n","\t    return function(t) {\n","\t      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n","\t      return c;\n","\t    };\n","\t  }\n","\t  var d3_ease_default = function() {\n","\t    return d3_identity;\n","\t  };\n","\t  var d3_ease = d3.map({\n","\t    linear: d3_ease_default,\n","\t    poly: d3_ease_poly,\n","\t    quad: function() {\n","\t      return d3_ease_quad;\n","\t    },\n","\t    cubic: function() {\n","\t      return d3_ease_cubic;\n","\t    },\n","\t    sin: function() {\n","\t      return d3_ease_sin;\n","\t    },\n","\t    exp: function() {\n","\t      return d3_ease_exp;\n","\t    },\n","\t    circle: function() {\n","\t      return d3_ease_circle;\n","\t    },\n","\t    elastic: d3_ease_elastic,\n","\t    back: d3_ease_back,\n","\t    bounce: function() {\n","\t      return d3_ease_bounce;\n","\t    }\n","\t  });\n","\t  var d3_ease_mode = d3.map({\n","\t    \"in\": d3_identity,\n","\t    out: d3_ease_reverse,\n","\t    \"in-out\": d3_ease_reflect,\n","\t    \"out-in\": function(f) {\n","\t      return d3_ease_reflect(d3_ease_reverse(f));\n","\t    }\n","\t  });\n","\t  d3.ease = function(name) {\n","\t    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n","\t    t = d3_ease.get(t) || d3_ease_default;\n","\t    m = d3_ease_mode.get(m) || d3_identity;\n","\t    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n","\t  };\n","\t  function d3_ease_clamp(f) {\n","\t    return function(t) {\n","\t      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n","\t    };\n","\t  }\n","\t  function d3_ease_reverse(f) {\n","\t    return function(t) {\n","\t      return 1 - f(1 - t);\n","\t    };\n","\t  }\n","\t  function d3_ease_reflect(f) {\n","\t    return function(t) {\n","\t      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n","\t    };\n","\t  }\n","\t  function d3_ease_quad(t) {\n","\t    return t * t;\n","\t  }\n","\t  function d3_ease_cubic(t) {\n","\t    return t * t * t;\n","\t  }\n","\t  function d3_ease_cubicInOut(t) {\n","\t    if (t <= 0) return 0;\n","\t    if (t >= 1) return 1;\n","\t    var t2 = t * t, t3 = t2 * t;\n","\t    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n","\t  }\n","\t  function d3_ease_poly(e) {\n","\t    return function(t) {\n","\t      return Math.pow(t, e);\n","\t    };\n","\t  }\n","\t  function d3_ease_sin(t) {\n","\t    return 1 - Math.cos(t * halfπ);\n","\t  }\n","\t  function d3_ease_exp(t) {\n","\t    return Math.pow(2, 10 * (t - 1));\n","\t  }\n","\t  function d3_ease_circle(t) {\n","\t    return 1 - Math.sqrt(1 - t * t);\n","\t  }\n","\t  function d3_ease_elastic(a, p) {\n","\t    var s;\n","\t    if (arguments.length < 2) p = .45;\n","\t    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n","\t    return function(t) {\n","\t      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n","\t    };\n","\t  }\n","\t  function d3_ease_back(s) {\n","\t    if (!s) s = 1.70158;\n","\t    return function(t) {\n","\t      return t * t * ((s + 1) * t - s);\n","\t    };\n","\t  }\n","\t  function d3_ease_bounce(t) {\n","\t    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n","\t  }\n","\t  d3.interpolateHcl = d3_interpolateHcl;\n","\t  function d3_interpolateHcl(a, b) {\n","\t    a = d3.hcl(a);\n","\t    b = d3.hcl(b);\n","\t    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n","\t    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n","\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n","\t    return function(t) {\n","\t      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateHsl = d3_interpolateHsl;\n","\t  function d3_interpolateHsl(a, b) {\n","\t    a = d3.hsl(a);\n","\t    b = d3.hsl(b);\n","\t    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n","\t    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n","\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n","\t    return function(t) {\n","\t      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateLab = d3_interpolateLab;\n","\t  function d3_interpolateLab(a, b) {\n","\t    a = d3.lab(a);\n","\t    b = d3.lab(b);\n","\t    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n","\t    return function(t) {\n","\t      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateRound = d3_interpolateRound;\n","\t  function d3_interpolateRound(a, b) {\n","\t    b -= a;\n","\t    return function(t) {\n","\t      return Math.round(a + b * t);\n","\t    };\n","\t  }\n","\t  d3.transform = function(string) {\n","\t    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n","\t    return (d3.transform = function(string) {\n","\t      if (string != null) {\n","\t        g.setAttribute(\"transform\", string);\n","\t        var t = g.transform.baseVal.consolidate();\n","\t      }\n","\t      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n","\t    })(string);\n","\t  };\n","\t  function d3_transform(m) {\n","\t    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n","\t    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n","\t      r0[0] *= -1;\n","\t      r0[1] *= -1;\n","\t      kx *= -1;\n","\t      kz *= -1;\n","\t    }\n","\t    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n","\t    this.translate = [ m.e, m.f ];\n","\t    this.scale = [ kx, ky ];\n","\t    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n","\t  }\n","\t  d3_transform.prototype.toString = function() {\n","\t    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n","\t  };\n","\t  function d3_transformDot(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1];\n","\t  }\n","\t  function d3_transformNormalize(a) {\n","\t    var k = Math.sqrt(d3_transformDot(a, a));\n","\t    if (k) {\n","\t      a[0] /= k;\n","\t      a[1] /= k;\n","\t    }\n","\t    return k;\n","\t  }\n","\t  function d3_transformCombine(a, b, k) {\n","\t    a[0] += k * b[0];\n","\t    a[1] += k * b[1];\n","\t    return a;\n","\t  }\n","\t  var d3_transformIdentity = {\n","\t    a: 1,\n","\t    b: 0,\n","\t    c: 0,\n","\t    d: 1,\n","\t    e: 0,\n","\t    f: 0\n","\t  };\n","\t  d3.interpolateTransform = d3_interpolateTransform;\n","\t  function d3_interpolateTransformPop(s) {\n","\t    return s.length ? s.pop() + \",\" : \"\";\n","\t  }\n","\t  function d3_interpolateTranslate(ta, tb, s, q) {\n","\t    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n","\t      var i = s.push(\"translate(\", null, \",\", null, \")\");\n","\t      q.push({\n","\t        i: i - 4,\n","\t        x: d3_interpolateNumber(ta[0], tb[0])\n","\t      }, {\n","\t        i: i - 2,\n","\t        x: d3_interpolateNumber(ta[1], tb[1])\n","\t      });\n","\t    } else if (tb[0] || tb[1]) {\n","\t      s.push(\"translate(\" + tb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateRotate(ra, rb, s, q) {\n","\t    if (ra !== rb) {\n","\t      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n","\t      q.push({\n","\t        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n","\t        x: d3_interpolateNumber(ra, rb)\n","\t      });\n","\t    } else if (rb) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateSkew(wa, wb, s, q) {\n","\t    if (wa !== wb) {\n","\t      q.push({\n","\t        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n","\t        x: d3_interpolateNumber(wa, wb)\n","\t      });\n","\t    } else if (wb) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateScale(ka, kb, s, q) {\n","\t    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n","\t      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n","\t      q.push({\n","\t        i: i - 4,\n","\t        x: d3_interpolateNumber(ka[0], kb[0])\n","\t      }, {\n","\t        i: i - 2,\n","\t        x: d3_interpolateNumber(ka[1], kb[1])\n","\t      });\n","\t    } else if (kb[0] !== 1 || kb[1] !== 1) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateTransform(a, b) {\n","\t    var s = [], q = [];\n","\t    a = d3.transform(a), b = d3.transform(b);\n","\t    d3_interpolateTranslate(a.translate, b.translate, s, q);\n","\t    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n","\t    d3_interpolateSkew(a.skew, b.skew, s, q);\n","\t    d3_interpolateScale(a.scale, b.scale, s, q);\n","\t    a = b = null;\n","\t    return function(t) {\n","\t      var i = -1, n = q.length, o;\n","\t      while (++i < n) s[(o = q[i]).i] = o.x(t);\n","\t      return s.join(\"\");\n","\t    };\n","\t  }\n","\t  function d3_uninterpolateNumber(a, b) {\n","\t    b = (b -= a = +a) || 1 / b;\n","\t    return function(x) {\n","\t      return (x - a) / b;\n","\t    };\n","\t  }\n","\t  function d3_uninterpolateClamp(a, b) {\n","\t    b = (b -= a = +a) || 1 / b;\n","\t    return function(x) {\n","\t      return Math.max(0, Math.min(1, (x - a) / b));\n","\t    };\n","\t  }\n","\t  d3.layout = {};\n","\t  d3.layout.bundle = function() {\n","\t    return function(links) {\n","\t      var paths = [], i = -1, n = links.length;\n","\t      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n","\t      return paths;\n","\t    };\n","\t  };\n","\t  function d3_layout_bundlePath(link) {\n","\t    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n","\t    while (start !== lca) {\n","\t      start = start.parent;\n","\t      points.push(start);\n","\t    }\n","\t    var k = points.length;\n","\t    while (end !== lca) {\n","\t      points.splice(k, 0, end);\n","\t      end = end.parent;\n","\t    }\n","\t    return points;\n","\t  }\n","\t  function d3_layout_bundleAncestors(node) {\n","\t    var ancestors = [], parent = node.parent;\n","\t    while (parent != null) {\n","\t      ancestors.push(node);\n","\t      node = parent;\n","\t      parent = parent.parent;\n","\t    }\n","\t    ancestors.push(node);\n","\t    return ancestors;\n","\t  }\n","\t  function d3_layout_bundleLeastCommonAncestor(a, b) {\n","\t    if (a === b) return a;\n","\t    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n","\t    while (aNode === bNode) {\n","\t      sharedNode = aNode;\n","\t      aNode = aNodes.pop();\n","\t      bNode = bNodes.pop();\n","\t    }\n","\t    return sharedNode;\n","\t  }\n","\t  d3.layout.chord = function() {\n","\t    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n","\t    function relayout() {\n","\t      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n","\t      chords = [];\n","\t      groups = [];\n","\t      k = 0, i = -1;\n","\t      while (++i < n) {\n","\t        x = 0, j = -1;\n","\t        while (++j < n) {\n","\t          x += matrix[i][j];\n","\t        }\n","\t        groupSums.push(x);\n","\t        subgroupIndex.push(d3.range(n));\n","\t        k += x;\n","\t      }\n","\t      if (sortGroups) {\n","\t        groupIndex.sort(function(a, b) {\n","\t          return sortGroups(groupSums[a], groupSums[b]);\n","\t        });\n","\t      }\n","\t      if (sortSubgroups) {\n","\t        subgroupIndex.forEach(function(d, i) {\n","\t          d.sort(function(a, b) {\n","\t            return sortSubgroups(matrix[i][a], matrix[i][b]);\n","\t          });\n","\t        });\n","\t      }\n","\t      k = (τ - padding * n) / k;\n","\t      x = 0, i = -1;\n","\t      while (++i < n) {\n","\t        x0 = x, j = -1;\n","\t        while (++j < n) {\n","\t          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n","\t          subgroups[di + \"-\" + dj] = {\n","\t            index: di,\n","\t            subindex: dj,\n","\t            startAngle: a0,\n","\t            endAngle: a1,\n","\t            value: v\n","\t          };\n","\t        }\n","\t        groups[di] = {\n","\t          index: di,\n","\t          startAngle: x0,\n","\t          endAngle: x,\n","\t          value: groupSums[di]\n","\t        };\n","\t        x += padding;\n","\t      }\n","\t      i = -1;\n","\t      while (++i < n) {\n","\t        j = i - 1;\n","\t        while (++j < n) {\n","\t          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n","\t          if (source.value || target.value) {\n","\t            chords.push(source.value < target.value ? {\n","\t              source: target,\n","\t              target: source\n","\t            } : {\n","\t              source: source,\n","\t              target: target\n","\t            });\n","\t          }\n","\t        }\n","\t      }\n","\t      if (sortChords) resort();\n","\t    }\n","\t    function resort() {\n","\t      chords.sort(function(a, b) {\n","\t        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n","\t      });\n","\t    }\n","\t    chord.matrix = function(x) {\n","\t      if (!arguments.length) return matrix;\n","\t      n = (matrix = x) && matrix.length;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.padding = function(x) {\n","\t      if (!arguments.length) return padding;\n","\t      padding = x;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortGroups = function(x) {\n","\t      if (!arguments.length) return sortGroups;\n","\t      sortGroups = x;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortSubgroups = function(x) {\n","\t      if (!arguments.length) return sortSubgroups;\n","\t      sortSubgroups = x;\n","\t      chords = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortChords = function(x) {\n","\t      if (!arguments.length) return sortChords;\n","\t      sortChords = x;\n","\t      if (chords) resort();\n","\t      return chord;\n","\t    };\n","\t    chord.chords = function() {\n","\t      if (!chords) relayout();\n","\t      return chords;\n","\t    };\n","\t    chord.groups = function() {\n","\t      if (!groups) relayout();\n","\t      return groups;\n","\t    };\n","\t    return chord;\n","\t  };\n","\t  d3.layout.force = function() {\n","\t    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n","\t    function repulse(node) {\n","\t      return function(quad, x1, _, x2) {\n","\t        if (quad.point !== node) {\n","\t          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n","\t          if (dw * dw / theta2 < dn) {\n","\t            if (dn < chargeDistance2) {\n","\t              var k = quad.charge / dn;\n","\t              node.px -= dx * k;\n","\t              node.py -= dy * k;\n","\t            }\n","\t            return true;\n","\t          }\n","\t          if (quad.point && dn && dn < chargeDistance2) {\n","\t            var k = quad.pointCharge / dn;\n","\t            node.px -= dx * k;\n","\t            node.py -= dy * k;\n","\t          }\n","\t        }\n","\t        return !quad.charge;\n","\t      };\n","\t    }\n","\t    force.tick = function() {\n","\t      if ((alpha *= .99) < .005) {\n","\t        timer = null;\n","\t        event.end({\n","\t          type: \"end\",\n","\t          alpha: alpha = 0\n","\t        });\n","\t        return true;\n","\t      }\n","\t      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n","\t      for (i = 0; i < m; ++i) {\n","\t        o = links[i];\n","\t        s = o.source;\n","\t        t = o.target;\n","\t        x = t.x - s.x;\n","\t        y = t.y - s.y;\n","\t        if (l = x * x + y * y) {\n","\t          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n","\t          x *= l;\n","\t          y *= l;\n","\t          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n","\t          t.y -= y * k;\n","\t          s.x += x * (k = 1 - k);\n","\t          s.y += y * k;\n","\t        }\n","\t      }\n","\t      if (k = alpha * gravity) {\n","\t        x = size[0] / 2;\n","\t        y = size[1] / 2;\n","\t        i = -1;\n","\t        if (k) while (++i < n) {\n","\t          o = nodes[i];\n","\t          o.x += (x - o.x) * k;\n","\t          o.y += (y - o.y) * k;\n","\t        }\n","\t      }\n","\t      if (charge) {\n","\t        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n","\t        i = -1;\n","\t        while (++i < n) {\n","\t          if (!(o = nodes[i]).fixed) {\n","\t            q.visit(repulse(o));\n","\t          }\n","\t        }\n","\t      }\n","\t      i = -1;\n","\t      while (++i < n) {\n","\t        o = nodes[i];\n","\t        if (o.fixed) {\n","\t          o.x = o.px;\n","\t          o.y = o.py;\n","\t        } else {\n","\t          o.x -= (o.px - (o.px = o.x)) * friction;\n","\t          o.y -= (o.py - (o.py = o.y)) * friction;\n","\t        }\n","\t      }\n","\t      event.tick({\n","\t        type: \"tick\",\n","\t        alpha: alpha\n","\t      });\n","\t    };\n","\t    force.nodes = function(x) {\n","\t      if (!arguments.length) return nodes;\n","\t      nodes = x;\n","\t      return force;\n","\t    };\n","\t    force.links = function(x) {\n","\t      if (!arguments.length) return links;\n","\t      links = x;\n","\t      return force;\n","\t    };\n","\t    force.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return force;\n","\t    };\n","\t    force.linkDistance = function(x) {\n","\t      if (!arguments.length) return linkDistance;\n","\t      linkDistance = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.distance = force.linkDistance;\n","\t    force.linkStrength = function(x) {\n","\t      if (!arguments.length) return linkStrength;\n","\t      linkStrength = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.friction = function(x) {\n","\t      if (!arguments.length) return friction;\n","\t      friction = +x;\n","\t      return force;\n","\t    };\n","\t    force.charge = function(x) {\n","\t      if (!arguments.length) return charge;\n","\t      charge = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.chargeDistance = function(x) {\n","\t      if (!arguments.length) return Math.sqrt(chargeDistance2);\n","\t      chargeDistance2 = x * x;\n","\t      return force;\n","\t    };\n","\t    force.gravity = function(x) {\n","\t      if (!arguments.length) return gravity;\n","\t      gravity = +x;\n","\t      return force;\n","\t    };\n","\t    force.theta = function(x) {\n","\t      if (!arguments.length) return Math.sqrt(theta2);\n","\t      theta2 = x * x;\n","\t      return force;\n","\t    };\n","\t    force.alpha = function(x) {\n","\t      if (!arguments.length) return alpha;\n","\t      x = +x;\n","\t      if (alpha) {\n","\t        if (x > 0) {\n","\t          alpha = x;\n","\t        } else {\n","\t          timer.c = null, timer.t = NaN, timer = null;\n","\t          event.end({\n","\t            type: \"end\",\n","\t            alpha: alpha = 0\n","\t          });\n","\t        }\n","\t      } else if (x > 0) {\n","\t        event.start({\n","\t          type: \"start\",\n","\t          alpha: alpha = x\n","\t        });\n","\t        timer = d3_timer(force.tick);\n","\t      }\n","\t      return force;\n","\t    };\n","\t    force.start = function() {\n","\t      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n","\t      for (i = 0; i < n; ++i) {\n","\t        (o = nodes[i]).index = i;\n","\t        o.weight = 0;\n","\t      }\n","\t      for (i = 0; i < m; ++i) {\n","\t        o = links[i];\n","\t        if (typeof o.source == \"number\") o.source = nodes[o.source];\n","\t        if (typeof o.target == \"number\") o.target = nodes[o.target];\n","\t        ++o.source.weight;\n","\t        ++o.target.weight;\n","\t      }\n","\t      for (i = 0; i < n; ++i) {\n","\t        o = nodes[i];\n","\t        if (isNaN(o.x)) o.x = position(\"x\", w);\n","\t        if (isNaN(o.y)) o.y = position(\"y\", h);\n","\t        if (isNaN(o.px)) o.px = o.x;\n","\t        if (isNaN(o.py)) o.py = o.y;\n","\t      }\n","\t      distances = [];\n","\t      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n","\t      strengths = [];\n","\t      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n","\t      charges = [];\n","\t      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n","\t      function position(dimension, size) {\n","\t        if (!neighbors) {\n","\t          neighbors = new Array(n);\n","\t          for (j = 0; j < n; ++j) {\n","\t            neighbors[j] = [];\n","\t          }\n","\t          for (j = 0; j < m; ++j) {\n","\t            var o = links[j];\n","\t            neighbors[o.source.index].push(o.target);\n","\t            neighbors[o.target.index].push(o.source);\n","\t          }\n","\t        }\n","\t        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n","\t        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n","\t        return Math.random() * size;\n","\t      }\n","\t      return force.resume();\n","\t    };\n","\t    force.resume = function() {\n","\t      return force.alpha(.1);\n","\t    };\n","\t    force.stop = function() {\n","\t      return force.alpha(0);\n","\t    };\n","\t    force.drag = function() {\n","\t      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n","\t      if (!arguments.length) return drag;\n","\t      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n","\t    };\n","\t    function dragmove(d) {\n","\t      d.px = d3.event.x, d.py = d3.event.y;\n","\t      force.resume();\n","\t    }\n","\t    return d3.rebind(force, event, \"on\");\n","\t  };\n","\t  function d3_layout_forceDragstart(d) {\n","\t    d.fixed |= 2;\n","\t  }\n","\t  function d3_layout_forceDragend(d) {\n","\t    d.fixed &= ~6;\n","\t  }\n","\t  function d3_layout_forceMouseover(d) {\n","\t    d.fixed |= 4;\n","\t    d.px = d.x, d.py = d.y;\n","\t  }\n","\t  function d3_layout_forceMouseout(d) {\n","\t    d.fixed &= ~4;\n","\t  }\n","\t  function d3_layout_forceAccumulate(quad, alpha, charges) {\n","\t    var cx = 0, cy = 0;\n","\t    quad.charge = 0;\n","\t    if (!quad.leaf) {\n","\t      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n","\t      while (++i < n) {\n","\t        c = nodes[i];\n","\t        if (c == null) continue;\n","\t        d3_layout_forceAccumulate(c, alpha, charges);\n","\t        quad.charge += c.charge;\n","\t        cx += c.charge * c.cx;\n","\t        cy += c.charge * c.cy;\n","\t      }\n","\t    }\n","\t    if (quad.point) {\n","\t      if (!quad.leaf) {\n","\t        quad.point.x += Math.random() - .5;\n","\t        quad.point.y += Math.random() - .5;\n","\t      }\n","\t      var k = alpha * charges[quad.point.index];\n","\t      quad.charge += quad.pointCharge = k;\n","\t      cx += k * quad.point.x;\n","\t      cy += k * quad.point.y;\n","\t    }\n","\t    quad.cx = cx / quad.charge;\n","\t    quad.cy = cy / quad.charge;\n","\t  }\n","\t  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n","\t  d3.layout.hierarchy = function() {\n","\t    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n","\t    function hierarchy(root) {\n","\t      var stack = [ root ], nodes = [], node;\n","\t      root.depth = 0;\n","\t      while ((node = stack.pop()) != null) {\n","\t        nodes.push(node);\n","\t        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n","\t          var n, childs, child;\n","\t          while (--n >= 0) {\n","\t            stack.push(child = childs[n]);\n","\t            child.parent = node;\n","\t            child.depth = node.depth + 1;\n","\t          }\n","\t          if (value) node.value = 0;\n","\t          node.children = childs;\n","\t        } else {\n","\t          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n","\t          delete node.children;\n","\t        }\n","\t      }\n","\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t        var childs, parent;\n","\t        if (sort && (childs = node.children)) childs.sort(sort);\n","\t        if (value && (parent = node.parent)) parent.value += node.value;\n","\t      });\n","\t      return nodes;\n","\t    }\n","\t    hierarchy.sort = function(x) {\n","\t      if (!arguments.length) return sort;\n","\t      sort = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.children = function(x) {\n","\t      if (!arguments.length) return children;\n","\t      children = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.value = function(x) {\n","\t      if (!arguments.length) return value;\n","\t      value = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.revalue = function(root) {\n","\t      if (value) {\n","\t        d3_layout_hierarchyVisitBefore(root, function(node) {\n","\t          if (node.children) node.value = 0;\n","\t        });\n","\t        d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t          var parent;\n","\t          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n","\t          if (parent = node.parent) parent.value += node.value;\n","\t        });\n","\t      }\n","\t      return root;\n","\t    };\n","\t    return hierarchy;\n","\t  };\n","\t  function d3_layout_hierarchyRebind(object, hierarchy) {\n","\t    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n","\t    object.nodes = object;\n","\t    object.links = d3_layout_hierarchyLinks;\n","\t    return object;\n","\t  }\n","\t  function d3_layout_hierarchyVisitBefore(node, callback) {\n","\t    var nodes = [ node ];\n","\t    while ((node = nodes.pop()) != null) {\n","\t      callback(node);\n","\t      if ((children = node.children) && (n = children.length)) {\n","\t        var n, children;\n","\t        while (--n >= 0) nodes.push(children[n]);\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_layout_hierarchyVisitAfter(node, callback) {\n","\t    var nodes = [ node ], nodes2 = [];\n","\t    while ((node = nodes.pop()) != null) {\n","\t      nodes2.push(node);\n","\t      if ((children = node.children) && (n = children.length)) {\n","\t        var i = -1, n, children;\n","\t        while (++i < n) nodes.push(children[i]);\n","\t      }\n","\t    }\n","\t    while ((node = nodes2.pop()) != null) {\n","\t      callback(node);\n","\t    }\n","\t  }\n","\t  function d3_layout_hierarchyChildren(d) {\n","\t    return d.children;\n","\t  }\n","\t  function d3_layout_hierarchyValue(d) {\n","\t    return d.value;\n","\t  }\n","\t  function d3_layout_hierarchySort(a, b) {\n","\t    return b.value - a.value;\n","\t  }\n","\t  function d3_layout_hierarchyLinks(nodes) {\n","\t    return d3.merge(nodes.map(function(parent) {\n","\t      return (parent.children || []).map(function(child) {\n","\t        return {\n","\t          source: parent,\n","\t          target: child\n","\t        };\n","\t      });\n","\t    }));\n","\t  }\n","\t  d3.layout.partition = function() {\n","\t    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n","\t    function position(node, x, dx, dy) {\n","\t      var children = node.children;\n","\t      node.x = x;\n","\t      node.y = node.depth * dy;\n","\t      node.dx = dx;\n","\t      node.dy = dy;\n","\t      if (children && (n = children.length)) {\n","\t        var i = -1, n, c, d;\n","\t        dx = node.value ? dx / node.value : 0;\n","\t        while (++i < n) {\n","\t          position(c = children[i], x, d = c.value * dx, dy);\n","\t          x += d;\n","\t        }\n","\t      }\n","\t    }\n","\t    function depth(node) {\n","\t      var children = node.children, d = 0;\n","\t      if (children && (n = children.length)) {\n","\t        var i = -1, n;\n","\t        while (++i < n) d = Math.max(d, depth(children[i]));\n","\t      }\n","\t      return 1 + d;\n","\t    }\n","\t    function partition(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i);\n","\t      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n","\t      return nodes;\n","\t    }\n","\t    partition.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return partition;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(partition, hierarchy);\n","\t  };\n","\t  d3.layout.pie = function() {\n","\t    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n","\t    function pie(data) {\n","\t      var n = data.length, values = data.map(function(d, i) {\n","\t        return +value.call(pie, d, i);\n","\t      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n","\t      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n","\t        return values[j] - values[i];\n","\t      } : function(i, j) {\n","\t        return sort(data[i], data[j]);\n","\t      });\n","\t      index.forEach(function(i) {\n","\t        arcs[i] = {\n","\t          data: data[i],\n","\t          value: v = values[i],\n","\t          startAngle: a,\n","\t          endAngle: a += v * k + pa,\n","\t          padAngle: p\n","\t        };\n","\t      });\n","\t      return arcs;\n","\t    }\n","\t    pie.value = function(_) {\n","\t      if (!arguments.length) return value;\n","\t      value = _;\n","\t      return pie;\n","\t    };\n","\t    pie.sort = function(_) {\n","\t      if (!arguments.length) return sort;\n","\t      sort = _;\n","\t      return pie;\n","\t    };\n","\t    pie.startAngle = function(_) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = _;\n","\t      return pie;\n","\t    };\n","\t    pie.endAngle = function(_) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = _;\n","\t      return pie;\n","\t    };\n","\t    pie.padAngle = function(_) {\n","\t      if (!arguments.length) return padAngle;\n","\t      padAngle = _;\n","\t      return pie;\n","\t    };\n","\t    return pie;\n","\t  };\n","\t  var d3_layout_pieSortByValue = {};\n","\t  d3.layout.stack = function() {\n","\t    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n","\t    function stack(data, index) {\n","\t      if (!(n = data.length)) return data;\n","\t      var series = data.map(function(d, i) {\n","\t        return values.call(stack, d, i);\n","\t      });\n","\t      var points = series.map(function(d) {\n","\t        return d.map(function(v, i) {\n","\t          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n","\t        });\n","\t      });\n","\t      var orders = order.call(stack, points, index);\n","\t      series = d3.permute(series, orders);\n","\t      points = d3.permute(points, orders);\n","\t      var offsets = offset.call(stack, points, index);\n","\t      var m = series[0].length, n, i, j, o;\n","\t      for (j = 0; j < m; ++j) {\n","\t        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n","\t        for (i = 1; i < n; ++i) {\n","\t          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n","\t        }\n","\t      }\n","\t      return data;\n","\t    }\n","\t    stack.values = function(x) {\n","\t      if (!arguments.length) return values;\n","\t      values = x;\n","\t      return stack;\n","\t    };\n","\t    stack.order = function(x) {\n","\t      if (!arguments.length) return order;\n","\t      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n","\t      return stack;\n","\t    };\n","\t    stack.offset = function(x) {\n","\t      if (!arguments.length) return offset;\n","\t      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n","\t      return stack;\n","\t    };\n","\t    stack.x = function(z) {\n","\t      if (!arguments.length) return x;\n","\t      x = z;\n","\t      return stack;\n","\t    };\n","\t    stack.y = function(z) {\n","\t      if (!arguments.length) return y;\n","\t      y = z;\n","\t      return stack;\n","\t    };\n","\t    stack.out = function(z) {\n","\t      if (!arguments.length) return out;\n","\t      out = z;\n","\t      return stack;\n","\t    };\n","\t    return stack;\n","\t  };\n","\t  function d3_layout_stackX(d) {\n","\t    return d.x;\n","\t  }\n","\t  function d3_layout_stackY(d) {\n","\t    return d.y;\n","\t  }\n","\t  function d3_layout_stackOut(d, y0, y) {\n","\t    d.y0 = y0;\n","\t    d.y = y;\n","\t  }\n","\t  var d3_layout_stackOrders = d3.map({\n","\t    \"inside-out\": function(data) {\n","\t      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n","\t        return max[a] - max[b];\n","\t      }), top = 0, bottom = 0, tops = [], bottoms = [];\n","\t      for (i = 0; i < n; ++i) {\n","\t        j = index[i];\n","\t        if (top < bottom) {\n","\t          top += sums[j];\n","\t          tops.push(j);\n","\t        } else {\n","\t          bottom += sums[j];\n","\t          bottoms.push(j);\n","\t        }\n","\t      }\n","\t      return bottoms.reverse().concat(tops);\n","\t    },\n","\t    reverse: function(data) {\n","\t      return d3.range(data.length).reverse();\n","\t    },\n","\t    \"default\": d3_layout_stackOrderDefault\n","\t  });\n","\t  var d3_layout_stackOffsets = d3.map({\n","\t    silhouette: function(data) {\n","\t      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n","\t      for (j = 0; j < m; ++j) {\n","\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n","\t        if (o > max) max = o;\n","\t        sums.push(o);\n","\t      }\n","\t      for (j = 0; j < m; ++j) {\n","\t        y0[j] = (max - sums[j]) / 2;\n","\t      }\n","\t      return y0;\n","\t    },\n","\t    wiggle: function(data) {\n","\t      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n","\t      y0[0] = o = o0 = 0;\n","\t      for (j = 1; j < m; ++j) {\n","\t        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n","\t        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n","\t          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n","\t            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n","\t          }\n","\t          s2 += s3 * data[i][j][1];\n","\t        }\n","\t        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n","\t        if (o < o0) o0 = o;\n","\t      }\n","\t      for (j = 0; j < m; ++j) y0[j] -= o0;\n","\t      return y0;\n","\t    },\n","\t    expand: function(data) {\n","\t      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n","\t      for (j = 0; j < m; ++j) {\n","\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n","\t        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n","\t      }\n","\t      for (j = 0; j < m; ++j) y0[j] = 0;\n","\t      return y0;\n","\t    },\n","\t    zero: d3_layout_stackOffsetZero\n","\t  });\n","\t  function d3_layout_stackOrderDefault(data) {\n","\t    return d3.range(data.length);\n","\t  }\n","\t  function d3_layout_stackOffsetZero(data) {\n","\t    var j = -1, m = data[0].length, y0 = [];\n","\t    while (++j < m) y0[j] = 0;\n","\t    return y0;\n","\t  }\n","\t  function d3_layout_stackMaxIndex(array) {\n","\t    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n","\t    for (;i < n; ++i) {\n","\t      if ((k = array[i][1]) > v) {\n","\t        j = i;\n","\t        v = k;\n","\t      }\n","\t    }\n","\t    return j;\n","\t  }\n","\t  function d3_layout_stackReduceSum(d) {\n","\t    return d.reduce(d3_layout_stackSum, 0);\n","\t  }\n","\t  function d3_layout_stackSum(p, d) {\n","\t    return p + d[1];\n","\t  }\n","\t  d3.layout.histogram = function() {\n","\t    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n","\t    function histogram(data, i) {\n","\t      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n","\t      while (++i < m) {\n","\t        bin = bins[i] = [];\n","\t        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n","\t        bin.y = 0;\n","\t      }\n","\t      if (m > 0) {\n","\t        i = -1;\n","\t        while (++i < n) {\n","\t          x = values[i];\n","\t          if (x >= range[0] && x <= range[1]) {\n","\t            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n","\t            bin.y += k;\n","\t            bin.push(data[i]);\n","\t          }\n","\t        }\n","\t      }\n","\t      return bins;\n","\t    }\n","\t    histogram.value = function(x) {\n","\t      if (!arguments.length) return valuer;\n","\t      valuer = x;\n","\t      return histogram;\n","\t    };\n","\t    histogram.range = function(x) {\n","\t      if (!arguments.length) return ranger;\n","\t      ranger = d3_functor(x);\n","\t      return histogram;\n","\t    };\n","\t    histogram.bins = function(x) {\n","\t      if (!arguments.length) return binner;\n","\t      binner = typeof x === \"number\" ? function(range) {\n","\t        return d3_layout_histogramBinFixed(range, x);\n","\t      } : d3_functor(x);\n","\t      return histogram;\n","\t    };\n","\t    histogram.frequency = function(x) {\n","\t      if (!arguments.length) return frequency;\n","\t      frequency = !!x;\n","\t      return histogram;\n","\t    };\n","\t    return histogram;\n","\t  };\n","\t  function d3_layout_histogramBinSturges(range, values) {\n","\t    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n","\t  }\n","\t  function d3_layout_histogramBinFixed(range, n) {\n","\t    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n","\t    while (++x <= n) f[x] = m * x + b;\n","\t    return f;\n","\t  }\n","\t  function d3_layout_histogramRange(values) {\n","\t    return [ d3.min(values), d3.max(values) ];\n","\t  }\n","\t  d3.layout.pack = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n","\t    function pack(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n","\t        return radius;\n","\t      };\n","\t      root.x = root.y = 0;\n","\t      d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t        d.r = +r(d.value);\n","\t      });\n","\t      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n","\t      if (padding) {\n","\t        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n","\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t          d.r += dr;\n","\t        });\n","\t        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n","\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t          d.r -= dr;\n","\t        });\n","\t      }\n","\t      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n","\t      return nodes;\n","\t    }\n","\t    pack.size = function(_) {\n","\t      if (!arguments.length) return size;\n","\t      size = _;\n","\t      return pack;\n","\t    };\n","\t    pack.radius = function(_) {\n","\t      if (!arguments.length) return radius;\n","\t      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n","\t      return pack;\n","\t    };\n","\t    pack.padding = function(_) {\n","\t      if (!arguments.length) return padding;\n","\t      padding = +_;\n","\t      return pack;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(pack, hierarchy);\n","\t  };\n","\t  function d3_layout_packSort(a, b) {\n","\t    return a.value - b.value;\n","\t  }\n","\t  function d3_layout_packInsert(a, b) {\n","\t    var c = a._pack_next;\n","\t    a._pack_next = b;\n","\t    b._pack_prev = a;\n","\t    b._pack_next = c;\n","\t    c._pack_prev = b;\n","\t  }\n","\t  function d3_layout_packSplice(a, b) {\n","\t    a._pack_next = b;\n","\t    b._pack_prev = a;\n","\t  }\n","\t  function d3_layout_packIntersects(a, b) {\n","\t    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n","\t    return .999 * dr * dr > dx * dx + dy * dy;\n","\t  }\n","\t  function d3_layout_packSiblings(node) {\n","\t    if (!(nodes = node.children) || !(n = nodes.length)) return;\n","\t    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n","\t    function bound(node) {\n","\t      xMin = Math.min(node.x - node.r, xMin);\n","\t      xMax = Math.max(node.x + node.r, xMax);\n","\t      yMin = Math.min(node.y - node.r, yMin);\n","\t      yMax = Math.max(node.y + node.r, yMax);\n","\t    }\n","\t    nodes.forEach(d3_layout_packLink);\n","\t    a = nodes[0];\n","\t    a.x = -a.r;\n","\t    a.y = 0;\n","\t    bound(a);\n","\t    if (n > 1) {\n","\t      b = nodes[1];\n","\t      b.x = b.r;\n","\t      b.y = 0;\n","\t      bound(b);\n","\t      if (n > 2) {\n","\t        c = nodes[2];\n","\t        d3_layout_packPlace(a, b, c);\n","\t        bound(c);\n","\t        d3_layout_packInsert(a, c);\n","\t        a._pack_prev = c;\n","\t        d3_layout_packInsert(c, b);\n","\t        b = a._pack_next;\n","\t        for (i = 3; i < n; i++) {\n","\t          d3_layout_packPlace(a, b, c = nodes[i]);\n","\t          var isect = 0, s1 = 1, s2 = 1;\n","\t          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n","\t            if (d3_layout_packIntersects(j, c)) {\n","\t              isect = 1;\n","\t              break;\n","\t            }\n","\t          }\n","\t          if (isect == 1) {\n","\t            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n","\t              if (d3_layout_packIntersects(k, c)) {\n","\t                break;\n","\t              }\n","\t            }\n","\t          }\n","\t          if (isect) {\n","\t            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n","\t            i--;\n","\t          } else {\n","\t            d3_layout_packInsert(a, c);\n","\t            b = c;\n","\t            bound(c);\n","\t          }\n","\t        }\n","\t      }\n","\t    }\n","\t    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n","\t    for (i = 0; i < n; i++) {\n","\t      c = nodes[i];\n","\t      c.x -= cx;\n","\t      c.y -= cy;\n","\t      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n","\t    }\n","\t    node.r = cr;\n","\t    nodes.forEach(d3_layout_packUnlink);\n","\t  }\n","\t  function d3_layout_packLink(node) {\n","\t    node._pack_next = node._pack_prev = node;\n","\t  }\n","\t  function d3_layout_packUnlink(node) {\n","\t    delete node._pack_next;\n","\t    delete node._pack_prev;\n","\t  }\n","\t  function d3_layout_packTransform(node, x, y, k) {\n","\t    var children = node.children;\n","\t    node.x = x += k * node.x;\n","\t    node.y = y += k * node.y;\n","\t    node.r *= k;\n","\t    if (children) {\n","\t      var i = -1, n = children.length;\n","\t      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n","\t    }\n","\t  }\n","\t  function d3_layout_packPlace(a, b, c) {\n","\t    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n","\t    if (db && (dx || dy)) {\n","\t      var da = b.r + c.r, dc = dx * dx + dy * dy;\n","\t      da *= da;\n","\t      db *= db;\n","\t      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n","\t      c.x = a.x + x * dx + y * dy;\n","\t      c.y = a.y + x * dy - y * dx;\n","\t    } else {\n","\t      c.x = a.x + db;\n","\t      c.y = a.y;\n","\t    }\n","\t  }\n","\t  d3.layout.tree = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n","\t    function tree(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n","\t      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n","\t      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n","\t      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n","\t        var left = root0, right = root0, bottom = root0;\n","\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n","\t          if (node.x < left.x) left = node;\n","\t          if (node.x > right.x) right = node;\n","\t          if (node.depth > bottom.depth) bottom = node;\n","\t        });\n","\t        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n","\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n","\t          node.x = (node.x + tx) * kx;\n","\t          node.y = node.depth * ky;\n","\t        });\n","\t      }\n","\t      return nodes;\n","\t    }\n","\t    function wrapTree(root0) {\n","\t      var root1 = {\n","\t        A: null,\n","\t        children: [ root0 ]\n","\t      }, queue = [ root1 ], node1;\n","\t      while ((node1 = queue.pop()) != null) {\n","\t        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n","\t          queue.push((children[i] = child = {\n","\t            _: children[i],\n","\t            parent: node1,\n","\t            children: (child = children[i].children) && child.slice() || [],\n","\t            A: null,\n","\t            a: null,\n","\t            z: 0,\n","\t            m: 0,\n","\t            c: 0,\n","\t            s: 0,\n","\t            t: null,\n","\t            i: i\n","\t          }).a = child);\n","\t        }\n","\t      }\n","\t      return root1.children[0];\n","\t    }\n","\t    function firstWalk(v) {\n","\t      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n","\t      if (children.length) {\n","\t        d3_layout_treeShift(v);\n","\t        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n","\t        if (w) {\n","\t          v.z = w.z + separation(v._, w._);\n","\t          v.m = v.z - midpoint;\n","\t        } else {\n","\t          v.z = midpoint;\n","\t        }\n","\t      } else if (w) {\n","\t        v.z = w.z + separation(v._, w._);\n","\t      }\n","\t      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n","\t    }\n","\t    function secondWalk(v) {\n","\t      v._.x = v.z + v.parent.m;\n","\t      v.m += v.parent.m;\n","\t    }\n","\t    function apportion(v, w, ancestor) {\n","\t      if (w) {\n","\t        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n","\t        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n","\t          vom = d3_layout_treeLeft(vom);\n","\t          vop = d3_layout_treeRight(vop);\n","\t          vop.a = v;\n","\t          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n","\t          if (shift > 0) {\n","\t            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n","\t            sip += shift;\n","\t            sop += shift;\n","\t          }\n","\t          sim += vim.m;\n","\t          sip += vip.m;\n","\t          som += vom.m;\n","\t          sop += vop.m;\n","\t        }\n","\t        if (vim && !d3_layout_treeRight(vop)) {\n","\t          vop.t = vim;\n","\t          vop.m += sim - sop;\n","\t        }\n","\t        if (vip && !d3_layout_treeLeft(vom)) {\n","\t          vom.t = vip;\n","\t          vom.m += sip - som;\n","\t          ancestor = v;\n","\t        }\n","\t      }\n","\t      return ancestor;\n","\t    }\n","\t    function sizeNode(node) {\n","\t      node.x *= size[0];\n","\t      node.y = node.depth * size[1];\n","\t    }\n","\t    tree.separation = function(x) {\n","\t      if (!arguments.length) return separation;\n","\t      separation = x;\n","\t      return tree;\n","\t    };\n","\t    tree.size = function(x) {\n","\t      if (!arguments.length) return nodeSize ? null : size;\n","\t      nodeSize = (size = x) == null ? sizeNode : null;\n","\t      return tree;\n","\t    };\n","\t    tree.nodeSize = function(x) {\n","\t      if (!arguments.length) return nodeSize ? size : null;\n","\t      nodeSize = (size = x) == null ? null : sizeNode;\n","\t      return tree;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(tree, hierarchy);\n","\t  };\n","\t  function d3_layout_treeSeparation(a, b) {\n","\t    return a.parent == b.parent ? 1 : 2;\n","\t  }\n","\t  function d3_layout_treeLeft(v) {\n","\t    var children = v.children;\n","\t    return children.length ? children[0] : v.t;\n","\t  }\n","\t  function d3_layout_treeRight(v) {\n","\t    var children = v.children, n;\n","\t    return (n = children.length) ? children[n - 1] : v.t;\n","\t  }\n","\t  function d3_layout_treeMove(wm, wp, shift) {\n","\t    var change = shift / (wp.i - wm.i);\n","\t    wp.c -= change;\n","\t    wp.s += shift;\n","\t    wm.c += change;\n","\t    wp.z += shift;\n","\t    wp.m += shift;\n","\t  }\n","\t  function d3_layout_treeShift(v) {\n","\t    var shift = 0, change = 0, children = v.children, i = children.length, w;\n","\t    while (--i >= 0) {\n","\t      w = children[i];\n","\t      w.z += shift;\n","\t      w.m += shift;\n","\t      shift += w.s + (change += w.c);\n","\t    }\n","\t  }\n","\t  function d3_layout_treeAncestor(vim, v, ancestor) {\n","\t    return vim.a.parent === v.parent ? vim.a : ancestor;\n","\t  }\n","\t  d3.layout.cluster = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n","\t    function cluster(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n","\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t        var children = node.children;\n","\t        if (children && children.length) {\n","\t          node.x = d3_layout_clusterX(children);\n","\t          node.y = d3_layout_clusterY(children);\n","\t        } else {\n","\t          node.x = previousNode ? x += separation(node, previousNode) : 0;\n","\t          node.y = 0;\n","\t          previousNode = node;\n","\t        }\n","\t      });\n","\t      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n","\t      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n","\t        node.x = (node.x - root.x) * size[0];\n","\t        node.y = (root.y - node.y) * size[1];\n","\t      } : function(node) {\n","\t        node.x = (node.x - x0) / (x1 - x0) * size[0];\n","\t        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n","\t      });\n","\t      return nodes;\n","\t    }\n","\t    cluster.separation = function(x) {\n","\t      if (!arguments.length) return separation;\n","\t      separation = x;\n","\t      return cluster;\n","\t    };\n","\t    cluster.size = function(x) {\n","\t      if (!arguments.length) return nodeSize ? null : size;\n","\t      nodeSize = (size = x) == null;\n","\t      return cluster;\n","\t    };\n","\t    cluster.nodeSize = function(x) {\n","\t      if (!arguments.length) return nodeSize ? size : null;\n","\t      nodeSize = (size = x) != null;\n","\t      return cluster;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(cluster, hierarchy);\n","\t  };\n","\t  function d3_layout_clusterY(children) {\n","\t    return 1 + d3.max(children, function(child) {\n","\t      return child.y;\n","\t    });\n","\t  }\n","\t  function d3_layout_clusterX(children) {\n","\t    return children.reduce(function(x, child) {\n","\t      return x + child.x;\n","\t    }, 0) / children.length;\n","\t  }\n","\t  function d3_layout_clusterLeft(node) {\n","\t    var children = node.children;\n","\t    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n","\t  }\n","\t  function d3_layout_clusterRight(node) {\n","\t    var children = node.children, n;\n","\t    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n","\t  }\n","\t  d3.layout.treemap = function() {\n","\t    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n","\t    function scale(children, k) {\n","\t      var i = -1, n = children.length, child, area;\n","\t      while (++i < n) {\n","\t        area = (child = children[i]).value * (k < 0 ? 0 : k);\n","\t        child.area = isNaN(area) || area <= 0 ? 0 : area;\n","\t      }\n","\t    }\n","\t    function squarify(node) {\n","\t      var children = node.children;\n","\t      if (children && children.length) {\n","\t        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n","\t        scale(remaining, rect.dx * rect.dy / node.value);\n","\t        row.area = 0;\n","\t        while ((n = remaining.length) > 0) {\n","\t          row.push(child = remaining[n - 1]);\n","\t          row.area += child.area;\n","\t          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n","\t            remaining.pop();\n","\t            best = score;\n","\t          } else {\n","\t            row.area -= row.pop().area;\n","\t            position(row, u, rect, false);\n","\t            u = Math.min(rect.dx, rect.dy);\n","\t            row.length = row.area = 0;\n","\t            best = Infinity;\n","\t          }\n","\t        }\n","\t        if (row.length) {\n","\t          position(row, u, rect, true);\n","\t          row.length = row.area = 0;\n","\t        }\n","\t        children.forEach(squarify);\n","\t      }\n","\t    }\n","\t    function stickify(node) {\n","\t      var children = node.children;\n","\t      if (children && children.length) {\n","\t        var rect = pad(node), remaining = children.slice(), child, row = [];\n","\t        scale(remaining, rect.dx * rect.dy / node.value);\n","\t        row.area = 0;\n","\t        while (child = remaining.pop()) {\n","\t          row.push(child);\n","\t          row.area += child.area;\n","\t          if (child.z != null) {\n","\t            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n","\t            row.length = row.area = 0;\n","\t          }\n","\t        }\n","\t        children.forEach(stickify);\n","\t      }\n","\t    }\n","\t    function worst(row, u) {\n","\t      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n","\t      while (++i < n) {\n","\t        if (!(r = row[i].area)) continue;\n","\t        if (r < rmin) rmin = r;\n","\t        if (r > rmax) rmax = r;\n","\t      }\n","\t      s *= s;\n","\t      u *= u;\n","\t      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n","\t    }\n","\t    function position(row, u, rect, flush) {\n","\t      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n","\t      if (u == rect.dx) {\n","\t        if (flush || v > rect.dy) v = rect.dy;\n","\t        while (++i < n) {\n","\t          o = row[i];\n","\t          o.x = x;\n","\t          o.y = y;\n","\t          o.dy = v;\n","\t          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n","\t        }\n","\t        o.z = true;\n","\t        o.dx += rect.x + rect.dx - x;\n","\t        rect.y += v;\n","\t        rect.dy -= v;\n","\t      } else {\n","\t        if (flush || v > rect.dx) v = rect.dx;\n","\t        while (++i < n) {\n","\t          o = row[i];\n","\t          o.x = x;\n","\t          o.y = y;\n","\t          o.dx = v;\n","\t          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n","\t        }\n","\t        o.z = false;\n","\t        o.dy += rect.y + rect.dy - y;\n","\t        rect.x += v;\n","\t        rect.dx -= v;\n","\t      }\n","\t    }\n","\t    function treemap(d) {\n","\t      var nodes = stickies || hierarchy(d), root = nodes[0];\n","\t      root.x = root.y = 0;\n","\t      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n","\t      if (stickies) hierarchy.revalue(root);\n","\t      scale([ root ], root.dx * root.dy / root.value);\n","\t      (stickies ? stickify : squarify)(root);\n","\t      if (sticky) stickies = nodes;\n","\t      return nodes;\n","\t    }\n","\t    treemap.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return treemap;\n","\t    };\n","\t    treemap.padding = function(x) {\n","\t      if (!arguments.length) return padding;\n","\t      function padFunction(node) {\n","\t        var p = x.call(treemap, node, node.depth);\n","\t        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n","\t      }\n","\t      function padConstant(node) {\n","\t        return d3_layout_treemapPad(node, x);\n","\t      }\n","\t      var type;\n","\t      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n","\t      padConstant) : padConstant;\n","\t      return treemap;\n","\t    };\n","\t    treemap.round = function(x) {\n","\t      if (!arguments.length) return round != Number;\n","\t      round = x ? Math.round : Number;\n","\t      return treemap;\n","\t    };\n","\t    treemap.sticky = function(x) {\n","\t      if (!arguments.length) return sticky;\n","\t      sticky = x;\n","\t      stickies = null;\n","\t      return treemap;\n","\t    };\n","\t    treemap.ratio = function(x) {\n","\t      if (!arguments.length) return ratio;\n","\t      ratio = x;\n","\t      return treemap;\n","\t    };\n","\t    treemap.mode = function(x) {\n","\t      if (!arguments.length) return mode;\n","\t      mode = x + \"\";\n","\t      return treemap;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(treemap, hierarchy);\n","\t  };\n","\t  function d3_layout_treemapPadNull(node) {\n","\t    return {\n","\t      x: node.x,\n","\t      y: node.y,\n","\t      dx: node.dx,\n","\t      dy: node.dy\n","\t    };\n","\t  }\n","\t  function d3_layout_treemapPad(node, padding) {\n","\t    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n","\t    if (dx < 0) {\n","\t      x += dx / 2;\n","\t      dx = 0;\n","\t    }\n","\t    if (dy < 0) {\n","\t      y += dy / 2;\n","\t      dy = 0;\n","\t    }\n","\t    return {\n","\t      x: x,\n","\t      y: y,\n","\t      dx: dx,\n","\t      dy: dy\n","\t    };\n","\t  }\n","\t  d3.random = {\n","\t    normal: function(µ, σ) {\n","\t      var n = arguments.length;\n","\t      if (n < 2) σ = 1;\n","\t      if (n < 1) µ = 0;\n","\t      return function() {\n","\t        var x, y, r;\n","\t        do {\n","\t          x = Math.random() * 2 - 1;\n","\t          y = Math.random() * 2 - 1;\n","\t          r = x * x + y * y;\n","\t        } while (!r || r > 1);\n","\t        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n","\t      };\n","\t    },\n","\t    logNormal: function() {\n","\t      var random = d3.random.normal.apply(d3, arguments);\n","\t      return function() {\n","\t        return Math.exp(random());\n","\t      };\n","\t    },\n","\t    bates: function(m) {\n","\t      var random = d3.random.irwinHall(m);\n","\t      return function() {\n","\t        return random() / m;\n","\t      };\n","\t    },\n","\t    irwinHall: function(m) {\n","\t      return function() {\n","\t        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n","\t        return s;\n","\t      };\n","\t    }\n","\t  };\n","\t  d3.scale = {};\n","\t  function d3_scaleExtent(domain) {\n","\t    var start = domain[0], stop = domain[domain.length - 1];\n","\t    return start < stop ? [ start, stop ] : [ stop, start ];\n","\t  }\n","\t  function d3_scaleRange(scale) {\n","\t    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n","\t  }\n","\t  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n","\t    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n","\t    return function(x) {\n","\t      return i(u(x));\n","\t    };\n","\t  }\n","\t  function d3_scale_nice(domain, nice) {\n","\t    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n","\t    if (x1 < x0) {\n","\t      dx = i0, i0 = i1, i1 = dx;\n","\t      dx = x0, x0 = x1, x1 = dx;\n","\t    }\n","\t    domain[i0] = nice.floor(x0);\n","\t    domain[i1] = nice.ceil(x1);\n","\t    return domain;\n","\t  }\n","\t  function d3_scale_niceStep(step) {\n","\t    return step ? {\n","\t      floor: function(x) {\n","\t        return Math.floor(x / step) * step;\n","\t      },\n","\t      ceil: function(x) {\n","\t        return Math.ceil(x / step) * step;\n","\t      }\n","\t    } : d3_scale_niceIdentity;\n","\t  }\n","\t  var d3_scale_niceIdentity = {\n","\t    floor: d3_identity,\n","\t    ceil: d3_identity\n","\t  };\n","\t  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n","\t    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n","\t    if (domain[k] < domain[0]) {\n","\t      domain = domain.slice().reverse();\n","\t      range = range.slice().reverse();\n","\t    }\n","\t    while (++j <= k) {\n","\t      u.push(uninterpolate(domain[j - 1], domain[j]));\n","\t      i.push(interpolate(range[j - 1], range[j]));\n","\t    }\n","\t    return function(x) {\n","\t      var j = d3.bisect(domain, x, 1, k) - 1;\n","\t      return i[j](u[j](x));\n","\t    };\n","\t  }\n","\t  d3.scale.linear = function() {\n","\t    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n","\t  };\n","\t  function d3_scale_linear(domain, range, interpolate, clamp) {\n","\t    var output, input;\n","\t    function rescale() {\n","\t      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n","\t      output = linear(domain, range, uninterpolate, interpolate);\n","\t      input = linear(range, domain, uninterpolate, d3_interpolate);\n","\t      return scale;\n","\t    }\n","\t    function scale(x) {\n","\t      return output(x);\n","\t    }\n","\t    scale.invert = function(y) {\n","\t      return input(y);\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(Number);\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.rangeRound = function(x) {\n","\t      return scale.range(x).interpolate(d3_interpolateRound);\n","\t    };\n","\t    scale.clamp = function(x) {\n","\t      if (!arguments.length) return clamp;\n","\t      clamp = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.interpolate = function(x) {\n","\t      if (!arguments.length) return interpolate;\n","\t      interpolate = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    scale.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    scale.nice = function(m) {\n","\t      d3_scale_linearNice(domain, m);\n","\t      return rescale();\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_linear(domain, range, interpolate, clamp);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  function d3_scale_linearRebind(scale, linear) {\n","\t    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n","\t  }\n","\t  function d3_scale_linearNice(domain, m) {\n","\t    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n","\t    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n","\t    return domain;\n","\t  }\n","\t  function d3_scale_linearTickRange(domain, m) {\n","\t    if (m == null) m = 10;\n","\t    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n","\t    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n","\t    extent[0] = Math.ceil(extent[0] / step) * step;\n","\t    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n","\t    extent[2] = step;\n","\t    return extent;\n","\t  }\n","\t  function d3_scale_linearTicks(domain, m) {\n","\t    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n","\t  }\n","\t  function d3_scale_linearTickFormat(domain, m, format) {\n","\t    var range = d3_scale_linearTickRange(domain, m);\n","\t    if (format) {\n","\t      var match = d3_format_re.exec(format);\n","\t      match.shift();\n","\t      if (match[8] === \"s\") {\n","\t        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n","\t        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n","\t        match[8] = \"f\";\n","\t        format = d3.format(match.join(\"\"));\n","\t        return function(d) {\n","\t          return format(prefix.scale(d)) + prefix.symbol;\n","\t        };\n","\t      }\n","\t      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n","\t      format = match.join(\"\");\n","\t    } else {\n","\t      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n","\t    }\n","\t    return d3.format(format);\n","\t  }\n","\t  var d3_scale_linearFormatSignificant = {\n","\t    s: 1,\n","\t    g: 1,\n","\t    p: 1,\n","\t    r: 1,\n","\t    e: 1\n","\t  };\n","\t  function d3_scale_linearPrecision(value) {\n","\t    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n","\t  }\n","\t  function d3_scale_linearFormatPrecision(type, range) {\n","\t    var p = d3_scale_linearPrecision(range[2]);\n","\t    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n","\t  }\n","\t  d3.scale.log = function() {\n","\t    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n","\t  };\n","\t  function d3_scale_log(linear, base, positive, domain) {\n","\t    function log(x) {\n","\t      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n","\t    }\n","\t    function pow(x) {\n","\t      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n","\t    }\n","\t    function scale(x) {\n","\t      return linear(log(x));\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return pow(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      positive = x[0] >= 0;\n","\t      linear.domain((domain = x.map(Number)).map(log));\n","\t      return scale;\n","\t    };\n","\t    scale.base = function(_) {\n","\t      if (!arguments.length) return base;\n","\t      base = +_;\n","\t      linear.domain(domain.map(log));\n","\t      return scale;\n","\t    };\n","\t    scale.nice = function() {\n","\t      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n","\t      linear.domain(niced);\n","\t      domain = niced.map(pow);\n","\t      return scale;\n","\t    };\n","\t    scale.ticks = function() {\n","\t      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n","\t      if (isFinite(j - i)) {\n","\t        if (positive) {\n","\t          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n","\t          ticks.push(pow(i));\n","\t        } else {\n","\t          ticks.push(pow(i));\n","\t          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n","\t        }\n","\t        for (i = 0; ticks[i] < u; i++) {}\n","\t        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n","\t        ticks = ticks.slice(i, j);\n","\t      }\n","\t      return ticks;\n","\t    };\n","\t    scale.tickFormat = function(n, format) {\n","\t      if (!arguments.length) return d3_scale_logFormat;\n","\t      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n","\t      var k = Math.max(1, base * n / scale.ticks().length);\n","\t      return function(d) {\n","\t        var i = d / pow(Math.round(log(d)));\n","\t        if (i * base < base - .5) i *= base;\n","\t        return i <= k ? format(d) : \"\";\n","\t      };\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_log(linear.copy(), base, positive, domain);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n","\t    floor: function(x) {\n","\t      return -Math.ceil(-x);\n","\t    },\n","\t    ceil: function(x) {\n","\t      return -Math.floor(-x);\n","\t    }\n","\t  };\n","\t  d3.scale.pow = function() {\n","\t    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_pow(linear, exponent, domain) {\n","\t    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n","\t    function scale(x) {\n","\t      return linear(powp(x));\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return powb(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      linear.domain((domain = x.map(Number)).map(powp));\n","\t      return scale;\n","\t    };\n","\t    scale.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    scale.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    scale.nice = function(m) {\n","\t      return scale.domain(d3_scale_linearNice(domain, m));\n","\t    };\n","\t    scale.exponent = function(x) {\n","\t      if (!arguments.length) return exponent;\n","\t      powp = d3_scale_powPow(exponent = x);\n","\t      powb = d3_scale_powPow(1 / exponent);\n","\t      linear.domain(domain.map(powp));\n","\t      return scale;\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_pow(linear.copy(), exponent, domain);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  function d3_scale_powPow(e) {\n","\t    return function(x) {\n","\t      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n","\t    };\n","\t  }\n","\t  d3.scale.sqrt = function() {\n","\t    return d3.scale.pow().exponent(.5);\n","\t  };\n","\t  d3.scale.ordinal = function() {\n","\t    return d3_scale_ordinal([], {\n","\t      t: \"range\",\n","\t      a: [ [] ]\n","\t    });\n","\t  };\n","\t  function d3_scale_ordinal(domain, ranger) {\n","\t    var index, range, rangeBand;\n","\t    function scale(x) {\n","\t      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n","\t    }\n","\t    function steps(start, step) {\n","\t      return d3.range(domain.length).map(function(i) {\n","\t        return start + step * i;\n","\t      });\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = [];\n","\t      index = new d3_Map();\n","\t      var i = -1, n = x.length, xi;\n","\t      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n","\t      return scale[ranger.t].apply(scale, ranger.a);\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"range\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangePoints = function(x, padding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n","\t      0) : (stop - start) / (domain.length - 1 + padding);\n","\t      range = steps(start + step * padding / 2, step);\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"rangePoints\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeRoundPoints = function(x, padding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n","\t      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n","\t      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"rangeRoundPoints\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeBands = function(x, padding, outerPadding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      if (arguments.length < 3) outerPadding = padding;\n","\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n","\t      range = steps(start + step * outerPadding, step);\n","\t      if (reverse) range.reverse();\n","\t      rangeBand = step * (1 - padding);\n","\t      ranger = {\n","\t        t: \"rangeBands\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeRoundBands = function(x, padding, outerPadding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      if (arguments.length < 3) outerPadding = padding;\n","\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n","\t      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n","\t      if (reverse) range.reverse();\n","\t      rangeBand = Math.round(step * (1 - padding));\n","\t      ranger = {\n","\t        t: \"rangeRoundBands\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeBand = function() {\n","\t      return rangeBand;\n","\t    };\n","\t    scale.rangeExtent = function() {\n","\t      return d3_scaleExtent(ranger.a[0]);\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_ordinal(domain, ranger);\n","\t    };\n","\t    return scale.domain(domain);\n","\t  }\n","\t  d3.scale.category10 = function() {\n","\t    return d3.scale.ordinal().range(d3_category10);\n","\t  };\n","\t  d3.scale.category20 = function() {\n","\t    return d3.scale.ordinal().range(d3_category20);\n","\t  };\n","\t  d3.scale.category20b = function() {\n","\t    return d3.scale.ordinal().range(d3_category20b);\n","\t  };\n","\t  d3.scale.category20c = function() {\n","\t    return d3.scale.ordinal().range(d3_category20c);\n","\t  };\n","\t  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n","\t  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n","\t  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n","\t  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n","\t  d3.scale.quantile = function() {\n","\t    return d3_scale_quantile([], []);\n","\t  };\n","\t  function d3_scale_quantile(domain, range) {\n","\t    var thresholds;\n","\t    function rescale() {\n","\t      var k = 0, q = range.length;\n","\t      thresholds = [];\n","\t      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n","\t      return scale;\n","\t    }\n","\t    function scale(x) {\n","\t      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.quantiles = function() {\n","\t      return thresholds;\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_quantile(domain, range);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  d3.scale.quantize = function() {\n","\t    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_quantize(x0, x1, range) {\n","\t    var kx, i;\n","\t    function scale(x) {\n","\t      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n","\t    }\n","\t    function rescale() {\n","\t      kx = range.length / (x1 - x0);\n","\t      i = range.length - 1;\n","\t      return scale;\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return [ x0, x1 ];\n","\t      x0 = +x[0];\n","\t      x1 = +x[x.length - 1];\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      y = y < 0 ? NaN : y / kx + x0;\n","\t      return [ y, y + 1 / kx ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_quantize(x0, x1, range);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  d3.scale.threshold = function() {\n","\t    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_threshold(domain, range) {\n","\t    function scale(x) {\n","\t      if (x <= x) return range[d3.bisect(domain, x)];\n","\t    }\n","\t    scale.domain = function(_) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = _;\n","\t      return scale;\n","\t    };\n","\t    scale.range = function(_) {\n","\t      if (!arguments.length) return range;\n","\t      range = _;\n","\t      return scale;\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      return [ domain[y - 1], domain[y] ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_threshold(domain, range);\n","\t    };\n","\t    return scale;\n","\t  }\n","\t  d3.scale.identity = function() {\n","\t    return d3_scale_identity([ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_identity(domain) {\n","\t    function identity(x) {\n","\t      return +x;\n","\t    }\n","\t    identity.invert = identity;\n","\t    identity.domain = identity.range = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(identity);\n","\t      return identity;\n","\t    };\n","\t    identity.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    identity.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    identity.copy = function() {\n","\t      return d3_scale_identity(domain);\n","\t    };\n","\t    return identity;\n","\t  }\n","\t  d3.svg = {};\n","\t  function d3_zero() {\n","\t    return 0;\n","\t  }\n","\t  d3.svg.arc = function() {\n","\t    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n","\t    function arc() {\n","\t      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n","\t      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n","\t      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n","\t      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n","\t      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n","\t        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n","\t        if (!cw) p1 *= -1;\n","\t        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n","\t        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n","\t      }\n","\t      if (r1) {\n","\t        x0 = r1 * Math.cos(a0 + p1);\n","\t        y0 = r1 * Math.sin(a0 + p1);\n","\t        x1 = r1 * Math.cos(a1 - p1);\n","\t        y1 = r1 * Math.sin(a1 - p1);\n","\t        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n","\t        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n","\t          var h1 = (a0 + a1) / 2;\n","\t          x0 = r1 * Math.cos(h1);\n","\t          y0 = r1 * Math.sin(h1);\n","\t          x1 = y1 = null;\n","\t        }\n","\t      } else {\n","\t        x0 = y0 = 0;\n","\t      }\n","\t      if (r0) {\n","\t        x2 = r0 * Math.cos(a1 - p0);\n","\t        y2 = r0 * Math.sin(a1 - p0);\n","\t        x3 = r0 * Math.cos(a0 + p0);\n","\t        y3 = r0 * Math.sin(a0 + p0);\n","\t        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n","\t        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n","\t          var h0 = (a0 + a1) / 2;\n","\t          x2 = r0 * Math.cos(h0);\n","\t          y2 = r0 * Math.sin(h0);\n","\t          x3 = y3 = null;\n","\t        }\n","\t      } else {\n","\t        x2 = y2 = 0;\n","\t      }\n","\t      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n","\t        cr = r0 < r1 ^ cw ? 0 : 1;\n","\t        var rc1 = rc, rc0 = rc;\n","\t        if (da < π) {\n","\t          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n","\t          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n","\t          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n","\t        }\n","\t        if (x1 != null) {\n","\t          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n","\t          if (rc === rc1) {\n","\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n","\t          } else {\n","\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n","\t          }\n","\t        } else {\n","\t          path.push(\"M\", x0, \",\", y0);\n","\t        }\n","\t        if (x3 != null) {\n","\t          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n","\t          if (rc === rc0) {\n","\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n","\t          } else {\n","\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n","\t          }\n","\t        } else {\n","\t          path.push(\"L\", x2, \",\", y2);\n","\t        }\n","\t      } else {\n","\t        path.push(\"M\", x0, \",\", y0);\n","\t        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n","\t        path.push(\"L\", x2, \",\", y2);\n","\t        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n","\t      }\n","\t      path.push(\"Z\");\n","\t      return path.join(\"\");\n","\t    }\n","\t    function circleSegment(r1, cw) {\n","\t      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n","\t    }\n","\t    arc.innerRadius = function(v) {\n","\t      if (!arguments.length) return innerRadius;\n","\t      innerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.outerRadius = function(v) {\n","\t      if (!arguments.length) return outerRadius;\n","\t      outerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.cornerRadius = function(v) {\n","\t      if (!arguments.length) return cornerRadius;\n","\t      cornerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.padRadius = function(v) {\n","\t      if (!arguments.length) return padRadius;\n","\t      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.startAngle = function(v) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.endAngle = function(v) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.padAngle = function(v) {\n","\t      if (!arguments.length) return padAngle;\n","\t      padAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.centroid = function() {\n","\t      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n","\t      return [ Math.cos(a) * r, Math.sin(a) * r ];\n","\t    };\n","\t    return arc;\n","\t  };\n","\t  var d3_svg_arcAuto = \"auto\";\n","\t  function d3_svg_arcInnerRadius(d) {\n","\t    return d.innerRadius;\n","\t  }\n","\t  function d3_svg_arcOuterRadius(d) {\n","\t    return d.outerRadius;\n","\t  }\n","\t  function d3_svg_arcStartAngle(d) {\n","\t    return d.startAngle;\n","\t  }\n","\t  function d3_svg_arcEndAngle(d) {\n","\t    return d.endAngle;\n","\t  }\n","\t  function d3_svg_arcPadAngle(d) {\n","\t    return d && d.padAngle;\n","\t  }\n","\t  function d3_svg_arcSweep(x0, y0, x1, y1) {\n","\t    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n","\t  }\n","\t  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n","\t    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n","\t    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n","\t    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n","\t  }\n","\t  function d3_svg_line(projection) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n","\t    function line(data) {\n","\t      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n","\t      function segment() {\n","\t        segments.push(\"M\", interpolate(projection(points), tension));\n","\t      }\n","\t      while (++i < n) {\n","\t        if (defined.call(this, d = data[i], i)) {\n","\t          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n","\t        } else if (points.length) {\n","\t          segment();\n","\t          points = [];\n","\t        }\n","\t      }\n","\t      if (points.length) segment();\n","\t      return segments.length ? segments.join(\"\") : null;\n","\t    }\n","\t    line.x = function(_) {\n","\t      if (!arguments.length) return x;\n","\t      x = _;\n","\t      return line;\n","\t    };\n","\t    line.y = function(_) {\n","\t      if (!arguments.length) return y;\n","\t      y = _;\n","\t      return line;\n","\t    };\n","\t    line.defined = function(_) {\n","\t      if (!arguments.length) return defined;\n","\t      defined = _;\n","\t      return line;\n","\t    };\n","\t    line.interpolate = function(_) {\n","\t      if (!arguments.length) return interpolateKey;\n","\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n","\t      return line;\n","\t    };\n","\t    line.tension = function(_) {\n","\t      if (!arguments.length) return tension;\n","\t      tension = _;\n","\t      return line;\n","\t    };\n","\t    return line;\n","\t  }\n","\t  d3.svg.line = function() {\n","\t    return d3_svg_line(d3_identity);\n","\t  };\n","\t  var d3_svg_lineInterpolators = d3.map({\n","\t    linear: d3_svg_lineLinear,\n","\t    \"linear-closed\": d3_svg_lineLinearClosed,\n","\t    step: d3_svg_lineStep,\n","\t    \"step-before\": d3_svg_lineStepBefore,\n","\t    \"step-after\": d3_svg_lineStepAfter,\n","\t    basis: d3_svg_lineBasis,\n","\t    \"basis-open\": d3_svg_lineBasisOpen,\n","\t    \"basis-closed\": d3_svg_lineBasisClosed,\n","\t    bundle: d3_svg_lineBundle,\n","\t    cardinal: d3_svg_lineCardinal,\n","\t    \"cardinal-open\": d3_svg_lineCardinalOpen,\n","\t    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n","\t    monotone: d3_svg_lineMonotone\n","\t  });\n","\t  d3_svg_lineInterpolators.forEach(function(key, value) {\n","\t    value.key = key;\n","\t    value.closed = /-closed$/.test(key);\n","\t  });\n","\t  function d3_svg_lineLinear(points) {\n","\t    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n","\t  }\n","\t  function d3_svg_lineLinearClosed(points) {\n","\t    return points.join(\"L\") + \"Z\";\n","\t  }\n","\t  function d3_svg_lineStep(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n","\t    if (n > 1) path.push(\"H\", p[0]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineStepBefore(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineStepAfter(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineCardinalOpen(points, tension) {\n","\t    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n","\t  }\n","\t  function d3_svg_lineCardinalClosed(points, tension) {\n","\t    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n","\t    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n","\t  }\n","\t  function d3_svg_lineCardinal(points, tension) {\n","\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n","\t  }\n","\t  function d3_svg_lineHermite(points, tangents) {\n","\t    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n","\t      return d3_svg_lineLinear(points);\n","\t    }\n","\t    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n","\t    if (quad) {\n","\t      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n","\t      p0 = points[1];\n","\t      pi = 2;\n","\t    }\n","\t    if (tangents.length > 1) {\n","\t      t = tangents[1];\n","\t      p = points[pi];\n","\t      pi++;\n","\t      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n","\t      for (var i = 2; i < tangents.length; i++, pi++) {\n","\t        p = points[pi];\n","\t        t = tangents[i];\n","\t        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n","\t      }\n","\t    }\n","\t    if (quad) {\n","\t      var lp = points[pi];\n","\t      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n","\t    }\n","\t    return path;\n","\t  }\n","\t  function d3_svg_lineCardinalTangents(points, tension) {\n","\t    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n","\t    while (++i < n) {\n","\t      p0 = p1;\n","\t      p1 = p2;\n","\t      p2 = points[i];\n","\t      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n","\t    }\n","\t    return tangents;\n","\t  }\n","\t  function d3_svg_lineBasis(points) {\n","\t    if (points.length < 3) return d3_svg_lineLinear(points);\n","\t    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n","\t    points.push(points[n - 1]);\n","\t    while (++i <= n) {\n","\t      pi = points[i];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    points.pop();\n","\t    path.push(\"L\", pi);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBasisOpen(points) {\n","\t    if (points.length < 4) return d3_svg_lineLinear(points);\n","\t    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n","\t    while (++i < 3) {\n","\t      pi = points[i];\n","\t      px.push(pi[0]);\n","\t      py.push(pi[1]);\n","\t    }\n","\t    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n","\t    --i;\n","\t    while (++i < n) {\n","\t      pi = points[i];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBasisClosed(points) {\n","\t    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n","\t    while (++i < 4) {\n","\t      pi = points[i % n];\n","\t      px.push(pi[0]);\n","\t      py.push(pi[1]);\n","\t    }\n","\t    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n","\t    --i;\n","\t    while (++i < m) {\n","\t      pi = points[i % n];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBundle(points, tension) {\n","\t    var n = points.length - 1;\n","\t    if (n) {\n","\t      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n","\t      while (++i <= n) {\n","\t        p = points[i];\n","\t        t = i / n;\n","\t        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n","\t        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n","\t      }\n","\t    }\n","\t    return d3_svg_lineBasis(points);\n","\t  }\n","\t  function d3_svg_lineDot4(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n","\t  }\n","\t  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n","\t  function d3_svg_lineBasisBezier(path, x, y) {\n","\t    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n","\t  }\n","\t  function d3_svg_lineSlope(p0, p1) {\n","\t    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n","\t  }\n","\t  function d3_svg_lineFiniteDifferences(points) {\n","\t    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n","\t    while (++i < j) {\n","\t      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n","\t    }\n","\t    m[i] = d;\n","\t    return m;\n","\t  }\n","\t  function d3_svg_lineMonotoneTangents(points) {\n","\t    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n","\t    while (++i < j) {\n","\t      d = d3_svg_lineSlope(points[i], points[i + 1]);\n","\t      if (abs(d) < ε) {\n","\t        m[i] = m[i + 1] = 0;\n","\t      } else {\n","\t        a = m[i] / d;\n","\t        b = m[i + 1] / d;\n","\t        s = a * a + b * b;\n","\t        if (s > 9) {\n","\t          s = d * 3 / Math.sqrt(s);\n","\t          m[i] = s * a;\n","\t          m[i + 1] = s * b;\n","\t        }\n","\t      }\n","\t    }\n","\t    i = -1;\n","\t    while (++i <= j) {\n","\t      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n","\t      tangents.push([ s || 0, m[i] * s || 0 ]);\n","\t    }\n","\t    return tangents;\n","\t  }\n","\t  function d3_svg_lineMonotone(points) {\n","\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n","\t  }\n","\t  d3.svg.line.radial = function() {\n","\t    var line = d3_svg_line(d3_svg_lineRadial);\n","\t    line.radius = line.x, delete line.x;\n","\t    line.angle = line.y, delete line.y;\n","\t    return line;\n","\t  };\n","\t  function d3_svg_lineRadial(points) {\n","\t    var point, i = -1, n = points.length, r, a;\n","\t    while (++i < n) {\n","\t      point = points[i];\n","\t      r = point[0];\n","\t      a = point[1] - halfπ;\n","\t      point[0] = r * Math.cos(a);\n","\t      point[1] = r * Math.sin(a);\n","\t    }\n","\t    return points;\n","\t  }\n","\t  function d3_svg_area(projection) {\n","\t    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n","\t    function area(data) {\n","\t      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n","\t        return x;\n","\t      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n","\t        return y;\n","\t      } : d3_functor(y1), x, y;\n","\t      function segment() {\n","\t        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n","\t      }\n","\t      while (++i < n) {\n","\t        if (defined.call(this, d = data[i], i)) {\n","\t          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n","\t          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n","\t        } else if (points0.length) {\n","\t          segment();\n","\t          points0 = [];\n","\t          points1 = [];\n","\t        }\n","\t      }\n","\t      if (points0.length) segment();\n","\t      return segments.length ? segments.join(\"\") : null;\n","\t    }\n","\t    area.x = function(_) {\n","\t      if (!arguments.length) return x1;\n","\t      x0 = x1 = _;\n","\t      return area;\n","\t    };\n","\t    area.x0 = function(_) {\n","\t      if (!arguments.length) return x0;\n","\t      x0 = _;\n","\t      return area;\n","\t    };\n","\t    area.x1 = function(_) {\n","\t      if (!arguments.length) return x1;\n","\t      x1 = _;\n","\t      return area;\n","\t    };\n","\t    area.y = function(_) {\n","\t      if (!arguments.length) return y1;\n","\t      y0 = y1 = _;\n","\t      return area;\n","\t    };\n","\t    area.y0 = function(_) {\n","\t      if (!arguments.length) return y0;\n","\t      y0 = _;\n","\t      return area;\n","\t    };\n","\t    area.y1 = function(_) {\n","\t      if (!arguments.length) return y1;\n","\t      y1 = _;\n","\t      return area;\n","\t    };\n","\t    area.defined = function(_) {\n","\t      if (!arguments.length) return defined;\n","\t      defined = _;\n","\t      return area;\n","\t    };\n","\t    area.interpolate = function(_) {\n","\t      if (!arguments.length) return interpolateKey;\n","\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n","\t      interpolateReverse = interpolate.reverse || interpolate;\n","\t      L = interpolate.closed ? \"M\" : \"L\";\n","\t      return area;\n","\t    };\n","\t    area.tension = function(_) {\n","\t      if (!arguments.length) return tension;\n","\t      tension = _;\n","\t      return area;\n","\t    };\n","\t    return area;\n","\t  }\n","\t  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n","\t  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n","\t  d3.svg.area = function() {\n","\t    return d3_svg_area(d3_identity);\n","\t  };\n","\t  d3.svg.area.radial = function() {\n","\t    var area = d3_svg_area(d3_svg_lineRadial);\n","\t    area.radius = area.x, delete area.x;\n","\t    area.innerRadius = area.x0, delete area.x0;\n","\t    area.outerRadius = area.x1, delete area.x1;\n","\t    area.angle = area.y, delete area.y;\n","\t    area.startAngle = area.y0, delete area.y0;\n","\t    area.endAngle = area.y1, delete area.y1;\n","\t    return area;\n","\t  };\n","\t  d3.svg.chord = function() {\n","\t    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n","\t    function chord(d, i) {\n","\t      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n","\t      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n","\t    }\n","\t    function subgroup(self, f, d, i) {\n","\t      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n","\t      return {\n","\t        r: r,\n","\t        a0: a0,\n","\t        a1: a1,\n","\t        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n","\t        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n","\t      };\n","\t    }\n","\t    function equals(a, b) {\n","\t      return a.a0 == b.a0 && a.a1 == b.a1;\n","\t    }\n","\t    function arc(r, p, a) {\n","\t      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n","\t    }\n","\t    function curve(r0, p0, r1, p1) {\n","\t      return \"Q 0,0 \" + p1;\n","\t    }\n","\t    chord.radius = function(v) {\n","\t      if (!arguments.length) return radius;\n","\t      radius = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.source = function(v) {\n","\t      if (!arguments.length) return source;\n","\t      source = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.target = function(v) {\n","\t      if (!arguments.length) return target;\n","\t      target = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.startAngle = function(v) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.endAngle = function(v) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    return chord;\n","\t  };\n","\t  function d3_svg_chordRadius(d) {\n","\t    return d.radius;\n","\t  }\n","\t  d3.svg.diagonal = function() {\n","\t    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n","\t    function diagonal(d, i) {\n","\t      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n","\t        x: p0.x,\n","\t        y: m\n","\t      }, {\n","\t        x: p3.x,\n","\t        y: m\n","\t      }, p3 ];\n","\t      p = p.map(projection);\n","\t      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n","\t    }\n","\t    diagonal.source = function(x) {\n","\t      if (!arguments.length) return source;\n","\t      source = d3_functor(x);\n","\t      return diagonal;\n","\t    };\n","\t    diagonal.target = function(x) {\n","\t      if (!arguments.length) return target;\n","\t      target = d3_functor(x);\n","\t      return diagonal;\n","\t    };\n","\t    diagonal.projection = function(x) {\n","\t      if (!arguments.length) return projection;\n","\t      projection = x;\n","\t      return diagonal;\n","\t    };\n","\t    return diagonal;\n","\t  };\n","\t  function d3_svg_diagonalProjection(d) {\n","\t    return [ d.x, d.y ];\n","\t  }\n","\t  d3.svg.diagonal.radial = function() {\n","\t    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n","\t    diagonal.projection = function(x) {\n","\t      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n","\t    };\n","\t    return diagonal;\n","\t  };\n","\t  function d3_svg_diagonalRadialProjection(projection) {\n","\t    return function() {\n","\t      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n","\t      return [ r * Math.cos(a), r * Math.sin(a) ];\n","\t    };\n","\t  }\n","\t  d3.svg.symbol = function() {\n","\t    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n","\t    function symbol(d, i) {\n","\t      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n","\t    }\n","\t    symbol.type = function(x) {\n","\t      if (!arguments.length) return type;\n","\t      type = d3_functor(x);\n","\t      return symbol;\n","\t    };\n","\t    symbol.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = d3_functor(x);\n","\t      return symbol;\n","\t    };\n","\t    return symbol;\n","\t  };\n","\t  function d3_svg_symbolSize() {\n","\t    return 64;\n","\t  }\n","\t  function d3_svg_symbolType() {\n","\t    return \"circle\";\n","\t  }\n","\t  function d3_svg_symbolCircle(size) {\n","\t    var r = Math.sqrt(size / π);\n","\t    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n","\t  }\n","\t  var d3_svg_symbols = d3.map({\n","\t    circle: d3_svg_symbolCircle,\n","\t    cross: function(size) {\n","\t      var r = Math.sqrt(size / 5) / 2;\n","\t      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n","\t    },\n","\t    diamond: function(size) {\n","\t      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n","\t      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n","\t    },\n","\t    square: function(size) {\n","\t      var r = Math.sqrt(size) / 2;\n","\t      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n","\t    },\n","\t    \"triangle-down\": function(size) {\n","\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n","\t      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n","\t    },\n","\t    \"triangle-up\": function(size) {\n","\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n","\t      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n","\t    }\n","\t  });\n","\t  d3.svg.symbolTypes = d3_svg_symbols.keys();\n","\t  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n","\t  d3_selectionPrototype.transition = function(name) {\n","\t    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n","\t      time: Date.now(),\n","\t      ease: d3_ease_cubicInOut,\n","\t      delay: 0,\n","\t      duration: 250\n","\t    };\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n","\t        subgroup.push(node);\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_selectionPrototype.interrupt = function(name) {\n","\t    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n","\t  };\n","\t  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n","\t  function d3_selection_interruptNS(ns) {\n","\t    return function() {\n","\t      var lock, activeId, active;\n","\t      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n","\t        active.timer.c = null;\n","\t        active.timer.t = NaN;\n","\t        if (--lock.count) delete lock[activeId]; else delete this[ns];\n","\t        lock.active += .5;\n","\t        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_transition(groups, ns, id) {\n","\t    d3_subclass(groups, d3_transitionPrototype);\n","\t    groups.namespace = ns;\n","\t    groups.id = id;\n","\t    return groups;\n","\t  }\n","\t  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n","\t  d3_transitionPrototype.call = d3_selectionPrototype.call;\n","\t  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n","\t  d3_transitionPrototype.node = d3_selectionPrototype.node;\n","\t  d3_transitionPrototype.size = d3_selectionPrototype.size;\n","\t  d3.transition = function(selection, name) {\n","\t    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n","\t  };\n","\t  d3.transition.prototype = d3_transitionPrototype;\n","\t  d3_transitionPrototype.select = function(selector) {\n","\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n","\t    selector = d3_selection_selector(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n","\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n","\t          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n","\t          subgroup.push(subnode);\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_transitionPrototype.selectAll = function(selector) {\n","\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n","\t    selector = d3_selection_selectorAll(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          transition = node[ns][id];\n","\t          subnodes = selector.call(node, node.__data__, i, j);\n","\t          subgroups.push(subgroup = []);\n","\t          for (var k = -1, o = subnodes.length; ++k < o; ) {\n","\t            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n","\t            subgroup.push(subnode);\n","\t          }\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_transitionPrototype.filter = function(filter) {\n","\t    var subgroups = [], subgroup, group, node;\n","\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n","\t          subgroup.push(node);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, this.namespace, this.id);\n","\t  };\n","\t  d3_transitionPrototype.tween = function(name, tween) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n","\t    return d3_selection_each(this, tween == null ? function(node) {\n","\t      node[ns][id].tween.remove(name);\n","\t    } : function(node) {\n","\t      node[ns][id].tween.set(name, tween);\n","\t    });\n","\t  };\n","\t  function d3_transition_tween(groups, name, value, tween) {\n","\t    var id = groups.id, ns = groups.namespace;\n","\t    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n","\t    } : (value = tween(value), function(node) {\n","\t      node[ns][id].tween.set(name, value);\n","\t    }));\n","\t  }\n","\t  d3_transitionPrototype.attr = function(nameNS, value) {\n","\t    if (arguments.length < 2) {\n","\t      for (value in nameNS) this.attr(value, nameNS[value]);\n","\t      return this;\n","\t    }\n","\t    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n","\t    function attrNull() {\n","\t      this.removeAttribute(name);\n","\t    }\n","\t    function attrNullNS() {\n","\t      this.removeAttributeNS(name.space, name.local);\n","\t    }\n","\t    function attrTween(b) {\n","\t      return b == null ? attrNull : (b += \"\", function() {\n","\t        var a = this.getAttribute(name), i;\n","\t        return a !== b && (i = interpolate(a, b), function(t) {\n","\t          this.setAttribute(name, i(t));\n","\t        });\n","\t      });\n","\t    }\n","\t    function attrTweenNS(b) {\n","\t      return b == null ? attrNullNS : (b += \"\", function() {\n","\t        var a = this.getAttributeNS(name.space, name.local), i;\n","\t        return a !== b && (i = interpolate(a, b), function(t) {\n","\t          this.setAttributeNS(name.space, name.local, i(t));\n","\t        });\n","\t      });\n","\t    }\n","\t    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n","\t  };\n","\t  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n","\t    var name = d3.ns.qualify(nameNS);\n","\t    function attrTween(d, i) {\n","\t      var f = tween.call(this, d, i, this.getAttribute(name));\n","\t      return f && function(t) {\n","\t        this.setAttribute(name, f(t));\n","\t      };\n","\t    }\n","\t    function attrTweenNS(d, i) {\n","\t      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n","\t      return f && function(t) {\n","\t        this.setAttributeNS(name.space, name.local, f(t));\n","\t      };\n","\t    }\n","\t    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n","\t  };\n","\t  d3_transitionPrototype.style = function(name, value, priority) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof name !== \"string\") {\n","\t        if (n < 2) value = \"\";\n","\t        for (priority in name) this.style(priority, name[priority], value);\n","\t        return this;\n","\t      }\n","\t      priority = \"\";\n","\t    }\n","\t    function styleNull() {\n","\t      this.style.removeProperty(name);\n","\t    }\n","\t    function styleString(b) {\n","\t      return b == null ? styleNull : (b += \"\", function() {\n","\t        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n","\t        return a !== b && (i = d3_interpolate(a, b), function(t) {\n","\t          this.style.setProperty(name, i(t), priority);\n","\t        });\n","\t      });\n","\t    }\n","\t    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n","\t  };\n","\t  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n","\t    if (arguments.length < 3) priority = \"\";\n","\t    function styleTween(d, i) {\n","\t      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n","\t      return f && function(t) {\n","\t        this.style.setProperty(name, f(t), priority);\n","\t      };\n","\t    }\n","\t    return this.tween(\"style.\" + name, styleTween);\n","\t  };\n","\t  d3_transitionPrototype.text = function(value) {\n","\t    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n","\t  };\n","\t  function d3_transition_text(b) {\n","\t    if (b == null) b = \"\";\n","\t    return function() {\n","\t      this.textContent = b;\n","\t    };\n","\t  }\n","\t  d3_transitionPrototype.remove = function() {\n","\t    var ns = this.namespace;\n","\t    return this.each(\"end.transition\", function() {\n","\t      var p;\n","\t      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n","\t    });\n","\t  };\n","\t  d3_transitionPrototype.ease = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].ease;\n","\t    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n","\t    return d3_selection_each(this, function(node) {\n","\t      node[ns][id].ease = value;\n","\t    });\n","\t  };\n","\t  d3_transitionPrototype.delay = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].delay;\n","\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n","\t    } : (value = +value, function(node) {\n","\t      node[ns][id].delay = value;\n","\t    }));\n","\t  };\n","\t  d3_transitionPrototype.duration = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].duration;\n","\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n","\t    } : (value = Math.max(1, value), function(node) {\n","\t      node[ns][id].duration = value;\n","\t    }));\n","\t  };\n","\t  d3_transitionPrototype.each = function(type, listener) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 2) {\n","\t      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n","\t      try {\n","\t        d3_transitionInheritId = id;\n","\t        d3_selection_each(this, function(node, i, j) {\n","\t          d3_transitionInherit = node[ns][id];\n","\t          type.call(node, node.__data__, i, j);\n","\t        });\n","\t      } finally {\n","\t        d3_transitionInherit = inherit;\n","\t        d3_transitionInheritId = inheritId;\n","\t      }\n","\t    } else {\n","\t      d3_selection_each(this, function(node) {\n","\t        var transition = node[ns][id];\n","\t        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n","\t      });\n","\t    }\n","\t    return this;\n","\t  };\n","\t  d3_transitionPrototype.transition = function() {\n","\t    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        if (node = group[i]) {\n","\t          transition = node[ns][id0];\n","\t          d3_transitionNode(node, i, ns, id1, {\n","\t            time: transition.time,\n","\t            ease: transition.ease,\n","\t            delay: transition.delay + transition.duration,\n","\t            duration: transition.duration\n","\t          });\n","\t        }\n","\t        subgroup.push(node);\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id1);\n","\t  };\n","\t  function d3_transitionNamespace(name) {\n","\t    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n","\t  }\n","\t  function d3_transitionNode(node, i, ns, id, inherit) {\n","\t    var lock = node[ns] || (node[ns] = {\n","\t      active: 0,\n","\t      count: 0\n","\t    }), transition = lock[id], time, timer, duration, ease, tweens;\n","\t    function schedule(elapsed) {\n","\t      var delay = transition.delay;\n","\t      timer.t = delay + time;\n","\t      if (delay <= elapsed) return start(elapsed - delay);\n","\t      timer.c = start;\n","\t    }\n","\t    function start(elapsed) {\n","\t      var activeId = lock.active, active = lock[activeId];\n","\t      if (active) {\n","\t        active.timer.c = null;\n","\t        active.timer.t = NaN;\n","\t        --lock.count;\n","\t        delete lock[activeId];\n","\t        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n","\t      }\n","\t      for (var cancelId in lock) {\n","\t        if (+cancelId < id) {\n","\t          var cancel = lock[cancelId];\n","\t          cancel.timer.c = null;\n","\t          cancel.timer.t = NaN;\n","\t          --lock.count;\n","\t          delete lock[cancelId];\n","\t        }\n","\t      }\n","\t      timer.c = tick;\n","\t      d3_timer(function() {\n","\t        if (timer.c && tick(elapsed || 1)) {\n","\t          timer.c = null;\n","\t          timer.t = NaN;\n","\t        }\n","\t        return 1;\n","\t      }, 0, time);\n","\t      lock.active = id;\n","\t      transition.event && transition.event.start.call(node, node.__data__, i);\n","\t      tweens = [];\n","\t      transition.tween.forEach(function(key, value) {\n","\t        if (value = value.call(node, node.__data__, i)) {\n","\t          tweens.push(value);\n","\t        }\n","\t      });\n","\t      ease = transition.ease;\n","\t      duration = transition.duration;\n","\t    }\n","\t    function tick(elapsed) {\n","\t      var t = elapsed / duration, e = ease(t), n = tweens.length;\n","\t      while (n > 0) {\n","\t        tweens[--n].call(node, e);\n","\t      }\n","\t      if (t >= 1) {\n","\t        transition.event && transition.event.end.call(node, node.__data__, i);\n","\t        if (--lock.count) delete lock[id]; else delete node[ns];\n","\t        return 1;\n","\t      }\n","\t    }\n","\t    if (!transition) {\n","\t      time = inherit.time;\n","\t      timer = d3_timer(schedule, 0, time);\n","\t      transition = lock[id] = {\n","\t        tween: new d3_Map(),\n","\t        time: time,\n","\t        timer: timer,\n","\t        delay: inherit.delay,\n","\t        duration: inherit.duration,\n","\t        ease: inherit.ease,\n","\t        index: i\n","\t      };\n","\t      inherit = null;\n","\t      ++lock.count;\n","\t    }\n","\t  }\n","\t  d3.svg.axis = function() {\n","\t    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n","\t    function axis(g) {\n","\t      g.each(function() {\n","\t        var g = d3.select(this);\n","\t        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n","\t        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n","\t        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n","\t        d3.transition(path));\n","\t        tickEnter.append(\"line\");\n","\t        tickEnter.append(\"text\");\n","\t        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n","\t        if (orient === \"bottom\" || orient === \"top\") {\n","\t          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n","\t          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n","\t          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n","\t        } else {\n","\t          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n","\t          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n","\t          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n","\t        }\n","\t        lineEnter.attr(y2, sign * innerTickSize);\n","\t        textEnter.attr(y1, sign * tickSpacing);\n","\t        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n","\t        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n","\t        if (scale1.rangeBand) {\n","\t          var x = scale1, dx = x.rangeBand() / 2;\n","\t          scale0 = scale1 = function(d) {\n","\t            return x(d) + dx;\n","\t          };\n","\t        } else if (scale0.rangeBand) {\n","\t          scale0 = scale1;\n","\t        } else {\n","\t          tickExit.call(tickTransform, scale1, scale0);\n","\t        }\n","\t        tickEnter.call(tickTransform, scale0, scale1);\n","\t        tickUpdate.call(tickTransform, scale1, scale1);\n","\t      });\n","\t    }\n","\t    axis.scale = function(x) {\n","\t      if (!arguments.length) return scale;\n","\t      scale = x;\n","\t      return axis;\n","\t    };\n","\t    axis.orient = function(x) {\n","\t      if (!arguments.length) return orient;\n","\t      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n","\t      return axis;\n","\t    };\n","\t    axis.ticks = function() {\n","\t      if (!arguments.length) return tickArguments_;\n","\t      tickArguments_ = d3_array(arguments);\n","\t      return axis;\n","\t    };\n","\t    axis.tickValues = function(x) {\n","\t      if (!arguments.length) return tickValues;\n","\t      tickValues = x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickFormat = function(x) {\n","\t      if (!arguments.length) return tickFormat_;\n","\t      tickFormat_ = x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickSize = function(x) {\n","\t      var n = arguments.length;\n","\t      if (!n) return innerTickSize;\n","\t      innerTickSize = +x;\n","\t      outerTickSize = +arguments[n - 1];\n","\t      return axis;\n","\t    };\n","\t    axis.innerTickSize = function(x) {\n","\t      if (!arguments.length) return innerTickSize;\n","\t      innerTickSize = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.outerTickSize = function(x) {\n","\t      if (!arguments.length) return outerTickSize;\n","\t      outerTickSize = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickPadding = function(x) {\n","\t      if (!arguments.length) return tickPadding;\n","\t      tickPadding = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickSubdivide = function() {\n","\t      return arguments.length && axis;\n","\t    };\n","\t    return axis;\n","\t  };\n","\t  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n","\t    top: 1,\n","\t    right: 1,\n","\t    bottom: 1,\n","\t    left: 1\n","\t  };\n","\t  function d3_svg_axisX(selection, x0, x1) {\n","\t    selection.attr(\"transform\", function(d) {\n","\t      var v0 = x0(d);\n","\t      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n","\t    });\n","\t  }\n","\t  function d3_svg_axisY(selection, y0, y1) {\n","\t    selection.attr(\"transform\", function(d) {\n","\t      var v0 = y0(d);\n","\t      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n","\t    });\n","\t  }\n","\t  d3.svg.brush = function() {\n","\t    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n","\t    function brush(g) {\n","\t      g.each(function() {\n","\t        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n","\t        var background = g.selectAll(\".background\").data([ 0 ]);\n","\t        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n","\t        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n","\t        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n","\t        resize.exit().remove();\n","\t        resize.enter().append(\"g\").attr(\"class\", function(d) {\n","\t          return \"resize \" + d;\n","\t        }).style(\"cursor\", function(d) {\n","\t          return d3_svg_brushCursor[d];\n","\t        }).append(\"rect\").attr(\"x\", function(d) {\n","\t          return /[ew]$/.test(d) ? -3 : null;\n","\t        }).attr(\"y\", function(d) {\n","\t          return /^[ns]/.test(d) ? -3 : null;\n","\t        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n","\t        resize.style(\"display\", brush.empty() ? \"none\" : null);\n","\t        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n","\t        if (x) {\n","\t          range = d3_scaleRange(x);\n","\t          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n","\t          redrawX(gUpdate);\n","\t        }\n","\t        if (y) {\n","\t          range = d3_scaleRange(y);\n","\t          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n","\t          redrawY(gUpdate);\n","\t        }\n","\t        redraw(gUpdate);\n","\t      });\n","\t    }\n","\t    brush.event = function(g) {\n","\t      g.each(function() {\n","\t        var event_ = event.of(this, arguments), extent1 = {\n","\t          x: xExtent,\n","\t          y: yExtent,\n","\t          i: xExtentDomain,\n","\t          j: yExtentDomain\n","\t        }, extent0 = this.__chart__ || extent1;\n","\t        this.__chart__ = extent1;\n","\t        if (d3_transitionInheritId) {\n","\t          d3.select(this).transition().each(\"start.brush\", function() {\n","\t            xExtentDomain = extent0.i;\n","\t            yExtentDomain = extent0.j;\n","\t            xExtent = extent0.x;\n","\t            yExtent = extent0.y;\n","\t            event_({\n","\t              type: \"brushstart\"\n","\t            });\n","\t          }).tween(\"brush:brush\", function() {\n","\t            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n","\t            xExtentDomain = yExtentDomain = null;\n","\t            return function(t) {\n","\t              xExtent = extent1.x = xi(t);\n","\t              yExtent = extent1.y = yi(t);\n","\t              event_({\n","\t                type: \"brush\",\n","\t                mode: \"resize\"\n","\t              });\n","\t            };\n","\t          }).each(\"end.brush\", function() {\n","\t            xExtentDomain = extent1.i;\n","\t            yExtentDomain = extent1.j;\n","\t            event_({\n","\t              type: \"brush\",\n","\t              mode: \"resize\"\n","\t            });\n","\t            event_({\n","\t              type: \"brushend\"\n","\t            });\n","\t          });\n","\t        } else {\n","\t          event_({\n","\t            type: \"brushstart\"\n","\t          });\n","\t          event_({\n","\t            type: \"brush\",\n","\t            mode: \"resize\"\n","\t          });\n","\t          event_({\n","\t            type: \"brushend\"\n","\t          });\n","\t        }\n","\t      });\n","\t    };\n","\t    function redraw(g) {\n","\t      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n","\t        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n","\t      });\n","\t    }\n","\t    function redrawX(g) {\n","\t      g.select(\".extent\").attr(\"x\", xExtent[0]);\n","\t      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n","\t    }\n","\t    function redrawY(g) {\n","\t      g.select(\".extent\").attr(\"y\", yExtent[0]);\n","\t      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n","\t    }\n","\t    function brushstart() {\n","\t      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n","\t      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n","\t      if (d3.event.changedTouches) {\n","\t        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n","\t      } else {\n","\t        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n","\t      }\n","\t      g.interrupt().selectAll(\"*\").interrupt();\n","\t      if (dragging) {\n","\t        origin[0] = xExtent[0] - origin[0];\n","\t        origin[1] = yExtent[0] - origin[1];\n","\t      } else if (resizing) {\n","\t        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n","\t        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n","\t        origin[0] = xExtent[ex];\n","\t        origin[1] = yExtent[ey];\n","\t      } else if (d3.event.altKey) center = origin.slice();\n","\t      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n","\t      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n","\t      event_({\n","\t        type: \"brushstart\"\n","\t      });\n","\t      brushmove();\n","\t      function keydown() {\n","\t        if (d3.event.keyCode == 32) {\n","\t          if (!dragging) {\n","\t            center = null;\n","\t            origin[0] -= xExtent[1];\n","\t            origin[1] -= yExtent[1];\n","\t            dragging = 2;\n","\t          }\n","\t          d3_eventPreventDefault();\n","\t        }\n","\t      }\n","\t      function keyup() {\n","\t        if (d3.event.keyCode == 32 && dragging == 2) {\n","\t          origin[0] += xExtent[1];\n","\t          origin[1] += yExtent[1];\n","\t          dragging = 0;\n","\t          d3_eventPreventDefault();\n","\t        }\n","\t      }\n","\t      function brushmove() {\n","\t        var point = d3.mouse(target), moved = false;\n","\t        if (offset) {\n","\t          point[0] += offset[0];\n","\t          point[1] += offset[1];\n","\t        }\n","\t        if (!dragging) {\n","\t          if (d3.event.altKey) {\n","\t            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n","\t            origin[0] = xExtent[+(point[0] < center[0])];\n","\t            origin[1] = yExtent[+(point[1] < center[1])];\n","\t          } else center = null;\n","\t        }\n","\t        if (resizingX && move1(point, x, 0)) {\n","\t          redrawX(g);\n","\t          moved = true;\n","\t        }\n","\t        if (resizingY && move1(point, y, 1)) {\n","\t          redrawY(g);\n","\t          moved = true;\n","\t        }\n","\t        if (moved) {\n","\t          redraw(g);\n","\t          event_({\n","\t            type: \"brush\",\n","\t            mode: dragging ? \"move\" : \"resize\"\n","\t          });\n","\t        }\n","\t      }\n","\t      function move1(point, scale, i) {\n","\t        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n","\t        if (dragging) {\n","\t          r0 -= position;\n","\t          r1 -= size + position;\n","\t        }\n","\t        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n","\t        if (dragging) {\n","\t          max = (min += position) + size;\n","\t        } else {\n","\t          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n","\t          if (position < min) {\n","\t            max = min;\n","\t            min = position;\n","\t          } else {\n","\t            max = position;\n","\t          }\n","\t        }\n","\t        if (extent[0] != min || extent[1] != max) {\n","\t          if (i) yExtentDomain = null; else xExtentDomain = null;\n","\t          extent[0] = min;\n","\t          extent[1] = max;\n","\t          return true;\n","\t        }\n","\t      }\n","\t      function brushend() {\n","\t        brushmove();\n","\t        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n","\t        d3.select(\"body\").style(\"cursor\", null);\n","\t        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n","\t        dragRestore();\n","\t        event_({\n","\t          type: \"brushend\"\n","\t        });\n","\t      }\n","\t    }\n","\t    brush.x = function(z) {\n","\t      if (!arguments.length) return x;\n","\t      x = z;\n","\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n","\t      return brush;\n","\t    };\n","\t    brush.y = function(z) {\n","\t      if (!arguments.length) return y;\n","\t      y = z;\n","\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n","\t      return brush;\n","\t    };\n","\t    brush.clamp = function(z) {\n","\t      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n","\t      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n","\t      return brush;\n","\t    };\n","\t    brush.extent = function(z) {\n","\t      var x0, x1, y0, y1, t;\n","\t      if (!arguments.length) {\n","\t        if (x) {\n","\t          if (xExtentDomain) {\n","\t            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n","\t          } else {\n","\t            x0 = xExtent[0], x1 = xExtent[1];\n","\t            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n","\t            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n","\t          }\n","\t        }\n","\t        if (y) {\n","\t          if (yExtentDomain) {\n","\t            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n","\t          } else {\n","\t            y0 = yExtent[0], y1 = yExtent[1];\n","\t            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n","\t            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n","\t          }\n","\t        }\n","\t        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n","\t      }\n","\t      if (x) {\n","\t        x0 = z[0], x1 = z[1];\n","\t        if (y) x0 = x0[0], x1 = x1[0];\n","\t        xExtentDomain = [ x0, x1 ];\n","\t        if (x.invert) x0 = x(x0), x1 = x(x1);\n","\t        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n","\t        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n","\t      }\n","\t      if (y) {\n","\t        y0 = z[0], y1 = z[1];\n","\t        if (x) y0 = y0[1], y1 = y1[1];\n","\t        yExtentDomain = [ y0, y1 ];\n","\t        if (y.invert) y0 = y(y0), y1 = y(y1);\n","\t        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n","\t        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n","\t      }\n","\t      return brush;\n","\t    };\n","\t    brush.clear = function() {\n","\t      if (!brush.empty()) {\n","\t        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n","\t        xExtentDomain = yExtentDomain = null;\n","\t      }\n","\t      return brush;\n","\t    };\n","\t    brush.empty = function() {\n","\t      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n","\t    };\n","\t    return d3.rebind(brush, event, \"on\");\n","\t  };\n","\t  var d3_svg_brushCursor = {\n","\t    n: \"ns-resize\",\n","\t    e: \"ew-resize\",\n","\t    s: \"ns-resize\",\n","\t    w: \"ew-resize\",\n","\t    nw: \"nwse-resize\",\n","\t    ne: \"nesw-resize\",\n","\t    se: \"nwse-resize\",\n","\t    sw: \"nesw-resize\"\n","\t  };\n","\t  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n","\t  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n","\t  var d3_time_formatUtc = d3_time_format.utc;\n","\t  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n","\t  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n","\t  function d3_time_formatIsoNative(date) {\n","\t    return date.toISOString();\n","\t  }\n","\t  d3_time_formatIsoNative.parse = function(string) {\n","\t    var date = new Date(string);\n","\t    return isNaN(date) ? null : date;\n","\t  };\n","\t  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n","\t  d3_time.second = d3_time_interval(function(date) {\n","\t    return new d3_date(Math.floor(date / 1e3) * 1e3);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n","\t  }, function(date) {\n","\t    return date.getSeconds();\n","\t  });\n","\t  d3_time.seconds = d3_time.second.range;\n","\t  d3_time.seconds.utc = d3_time.second.utc.range;\n","\t  d3_time.minute = d3_time_interval(function(date) {\n","\t    return new d3_date(Math.floor(date / 6e4) * 6e4);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n","\t  }, function(date) {\n","\t    return date.getMinutes();\n","\t  });\n","\t  d3_time.minutes = d3_time.minute.range;\n","\t  d3_time.minutes.utc = d3_time.minute.utc.range;\n","\t  d3_time.hour = d3_time_interval(function(date) {\n","\t    var timezone = date.getTimezoneOffset() / 60;\n","\t    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n","\t  }, function(date) {\n","\t    return date.getHours();\n","\t  });\n","\t  d3_time.hours = d3_time.hour.range;\n","\t  d3_time.hours.utc = d3_time.hour.utc.range;\n","\t  d3_time.month = d3_time_interval(function(date) {\n","\t    date = d3_time.day(date);\n","\t    date.setDate(1);\n","\t    return date;\n","\t  }, function(date, offset) {\n","\t    date.setMonth(date.getMonth() + offset);\n","\t  }, function(date) {\n","\t    return date.getMonth();\n","\t  });\n","\t  d3_time.months = d3_time.month.range;\n","\t  d3_time.months.utc = d3_time.month.utc.range;\n","\t  function d3_time_scale(linear, methods, format) {\n","\t    function scale(x) {\n","\t      return linear(x);\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return d3_time_scaleDate(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n","\t      linear.domain(x);\n","\t      return scale;\n","\t    };\n","\t    function tickMethod(extent, count) {\n","\t      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n","\t      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n","\t        return d / 31536e6;\n","\t      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n","\t    }\n","\t    scale.nice = function(interval, skip) {\n","\t      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n","\t      if (method) interval = method[0], skip = method[1];\n","\t      function skipped(date) {\n","\t        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n","\t      }\n","\t      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n","\t        floor: function(date) {\n","\t          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n","\t          return date;\n","\t        },\n","\t        ceil: function(date) {\n","\t          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n","\t          return date;\n","\t        }\n","\t      } : interval));\n","\t    };\n","\t    scale.ticks = function(interval, skip) {\n","\t      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n","\t        range: interval\n","\t      }, skip ];\n","\t      if (method) interval = method[0], skip = method[1];\n","\t      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n","\t    };\n","\t    scale.tickFormat = function() {\n","\t      return format;\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_time_scale(linear.copy(), methods, format);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  function d3_time_scaleDate(t) {\n","\t    return new Date(t);\n","\t  }\n","\t  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n","\t  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n","\t  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n","\t    return d.getMilliseconds();\n","\t  } ], [ \":%S\", function(d) {\n","\t    return d.getSeconds();\n","\t  } ], [ \"%I:%M\", function(d) {\n","\t    return d.getMinutes();\n","\t  } ], [ \"%I %p\", function(d) {\n","\t    return d.getHours();\n","\t  } ], [ \"%a %d\", function(d) {\n","\t    return d.getDay() && d.getDate() != 1;\n","\t  } ], [ \"%b %d\", function(d) {\n","\t    return d.getDate() != 1;\n","\t  } ], [ \"%B\", function(d) {\n","\t    return d.getMonth();\n","\t  } ], [ \"%Y\", d3_true ] ]);\n","\t  var d3_time_scaleMilliseconds = {\n","\t    range: function(start, stop, step) {\n","\t      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n","\t    },\n","\t    floor: d3_identity,\n","\t    ceil: d3_identity\n","\t  };\n","\t  d3_time_scaleLocalMethods.year = d3_time.year;\n","\t  d3_time.scale = function() {\n","\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n","\t  };\n","\t  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n","\t    return [ m[0].utc, m[1] ];\n","\t  });\n","\t  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n","\t    return d.getUTCMilliseconds();\n","\t  } ], [ \":%S\", function(d) {\n","\t    return d.getUTCSeconds();\n","\t  } ], [ \"%I:%M\", function(d) {\n","\t    return d.getUTCMinutes();\n","\t  } ], [ \"%I %p\", function(d) {\n","\t    return d.getUTCHours();\n","\t  } ], [ \"%a %d\", function(d) {\n","\t    return d.getUTCDay() && d.getUTCDate() != 1;\n","\t  } ], [ \"%b %d\", function(d) {\n","\t    return d.getUTCDate() != 1;\n","\t  } ], [ \"%B\", function(d) {\n","\t    return d.getUTCMonth();\n","\t  } ], [ \"%Y\", d3_true ] ]);\n","\t  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n","\t  d3_time.scale.utc = function() {\n","\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n","\t  };\n","\t  d3.text = d3_xhrType(function(request) {\n","\t    return request.responseText;\n","\t  });\n","\t  d3.json = function(url, callback) {\n","\t    return d3_xhr(url, \"application/json\", d3_json, callback);\n","\t  };\n","\t  function d3_json(request) {\n","\t    return JSON.parse(request.responseText);\n","\t  }\n","\t  d3.html = function(url, callback) {\n","\t    return d3_xhr(url, \"text/html\", d3_html, callback);\n","\t  };\n","\t  function d3_html(request) {\n","\t    var range = d3_document.createRange();\n","\t    range.selectNode(d3_document.body);\n","\t    return range.createContextualFragment(request.responseText);\n","\t  }\n","\t  d3.xml = d3_xhrType(function(request) {\n","\t    return request.responseXML;\n","\t  });\n","\t  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n","\t}();\n","\n","/***/ }),\n","/* 3 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _d = __webpack_require__(2);\n","\t\n","\tvar _d2 = _interopRequireDefault(_d);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar Barchart =\n","\t// svg: d3 object with the svg in question\n","\t// exp_array: list of (feature_name, weight)\n","\tfunction Barchart(svg, exp_array) {\n","\t  var two_sided = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n","\t  var titles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n","\t  var colors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ['red', 'green'];\n","\t  var show_numbers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t  var bar_height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 5;\n","\t\n","\t  _classCallCheck(this, Barchart);\n","\t\n","\t  var svg_width = Math.min(600, parseInt(svg.style('width')));\n","\t  var bar_width = two_sided ? svg_width / 2 : svg_width;\n","\t  if (titles === undefined) {\n","\t    titles = two_sided ? ['Cons', 'Pros'] : 'Pros';\n","\t  }\n","\t  if (show_numbers) {\n","\t    bar_width = bar_width - 30;\n","\t  }\n","\t  var x_offset = two_sided ? svg_width / 2 : 10;\n","\t  // 13.1 is +- the width of W, the widest letter.\n","\t  if (two_sided && titles.length == 2) {\n","\t    svg.append('text').attr('x', svg_width / 4).attr('y', 15).attr('font-size', '20').attr('text-anchor', 'middle').style('fill', colors[0]).text(titles[0]);\n","\t\n","\t    svg.append('text').attr('x', svg_width / 4 * 3).attr('y', 15).attr('font-size', '20').attr('text-anchor', 'middle').style('fill', colors[1]).text(titles[1]);\n","\t  } else {\n","\t    var pos = two_sided ? svg_width / 2 : x_offset;\n","\t    var anchor = two_sided ? 'middle' : 'begin';\n","\t    svg.append('text').attr('x', pos).attr('y', 15).attr('font-size', '20').attr('text-anchor', anchor).text(titles);\n","\t  }\n","\t  var yshift = 20;\n","\t  var space_between_bars = 0;\n","\t  var text_height = 16;\n","\t  var space_between_bar_and_text = 3;\n","\t  var total_bar_height = text_height + space_between_bar_and_text + bar_height + space_between_bars;\n","\t  var total_height = total_bar_height * exp_array.length;\n","\t  this.svg_height = total_height + yshift;\n","\t  var yscale = _d2.default.scale.linear().domain([0, exp_array.length]).range([yshift, yshift + total_height]);\n","\t  var names = exp_array.map(function (v) {\n","\t    return v[0];\n","\t  });\n","\t  var weights = exp_array.map(function (v) {\n","\t    return v[1];\n","\t  });\n","\t  var max_weight = Math.max.apply(Math, _toConsumableArray(weights.map(function (v) {\n","\t    return Math.abs(v);\n","\t  })));\n","\t  var xscale = _d2.default.scale.linear().domain([0, Math.max(1, max_weight)]).range([0, bar_width]);\n","\t\n","\t  for (var i = 0; i < exp_array.length; ++i) {\n","\t    var name = names[i];\n","\t    var weight = weights[i];\n","\t    var size = xscale(Math.abs(weight));\n","\t    var to_the_right = weight > 0 || !two_sided;\n","\t    var text = svg.append('text').attr('x', to_the_right ? x_offset + 2 : x_offset - 2).attr('y', yscale(i) + text_height).attr('text-anchor', to_the_right ? 'begin' : 'end').attr('font-size', '14').text(name);\n","\t    while (text.node().getBBox()['width'] + 1 > bar_width) {\n","\t      var cur_text = text.text().slice(0, text.text().length - 5);\n","\t      text.text(cur_text + '...');\n","\t      if (text === '...') {\n","\t        break;\n","\t      }\n","\t    }\n","\t    var bar = svg.append('rect').attr('height', bar_height).attr('x', to_the_right ? x_offset : x_offset - size).attr('y', text_height + yscale(i) + space_between_bar_and_text) // + bar_height)\n","\t    .attr('width', size).style('fill', weight > 0 ? colors[1] : colors[0]);\n","\t    if (show_numbers) {\n","\t      var bartext = svg.append('text').attr('x', to_the_right ? x_offset + size + 1 : x_offset - size - 1).attr('text-anchor', weight > 0 || !two_sided ? 'begin' : 'end').attr('y', bar_height + yscale(i) + text_height + space_between_bar_and_text).attr('font-size', '10').text(Math.abs(weight).toFixed(2));\n","\t    }\n","\t  }\n","\t  var line = svg.append(\"line\").attr(\"x1\", x_offset).attr(\"x2\", x_offset).attr(\"y1\", bar_height + yshift).attr(\"y2\", Math.max(bar_height, yscale(exp_array.length))).style(\"stroke-width\", 2).style(\"stroke\", \"black\");\n","\t};\n","\t\n","\texports.default = Barchart;\n","\n","/***/ }),\n","/* 4 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**\n","\t * @license\n","\t * Lodash <https://lodash.com/>\n","\t * Copyright JS Foundation and other contributors <https://js.foundation/>\n","\t * Released under MIT license <https://lodash.com/license>\n","\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n","\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n","\t */\n","\t;(function() {\n","\t\n","\t  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n","\t  var undefined;\n","\t\n","\t  /** Used as the semantic version number. */\n","\t  var VERSION = '4.17.11';\n","\t\n","\t  /** Used as the size to enable large array optimizations. */\n","\t  var LARGE_ARRAY_SIZE = 200;\n","\t\n","\t  /** Error message constants. */\n","\t  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n","\t      FUNC_ERROR_TEXT = 'Expected a function';\n","\t\n","\t  /** Used to stand-in for `undefined` hash values. */\n","\t  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n","\t\n","\t  /** Used as the maximum memoize cache size. */\n","\t  var MAX_MEMOIZE_SIZE = 500;\n","\t\n","\t  /** Used as the internal argument placeholder. */\n","\t  var PLACEHOLDER = '__lodash_placeholder__';\n","\t\n","\t  /** Used to compose bitmasks for cloning. */\n","\t  var CLONE_DEEP_FLAG = 1,\n","\t      CLONE_FLAT_FLAG = 2,\n","\t      CLONE_SYMBOLS_FLAG = 4;\n","\t\n","\t  /** Used to compose bitmasks for value comparisons. */\n","\t  var COMPARE_PARTIAL_FLAG = 1,\n","\t      COMPARE_UNORDERED_FLAG = 2;\n","\t\n","\t  /** Used to compose bitmasks for function metadata. */\n","\t  var WRAP_BIND_FLAG = 1,\n","\t      WRAP_BIND_KEY_FLAG = 2,\n","\t      WRAP_CURRY_BOUND_FLAG = 4,\n","\t      WRAP_CURRY_FLAG = 8,\n","\t      WRAP_CURRY_RIGHT_FLAG = 16,\n","\t      WRAP_PARTIAL_FLAG = 32,\n","\t      WRAP_PARTIAL_RIGHT_FLAG = 64,\n","\t      WRAP_ARY_FLAG = 128,\n","\t      WRAP_REARG_FLAG = 256,\n","\t      WRAP_FLIP_FLAG = 512;\n","\t\n","\t  /** Used as default options for `_.truncate`. */\n","\t  var DEFAULT_TRUNC_LENGTH = 30,\n","\t      DEFAULT_TRUNC_OMISSION = '...';\n","\t\n","\t  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n","\t  var HOT_COUNT = 800,\n","\t      HOT_SPAN = 16;\n","\t\n","\t  /** Used to indicate the type of lazy iteratees. */\n","\t  var LAZY_FILTER_FLAG = 1,\n","\t      LAZY_MAP_FLAG = 2,\n","\t      LAZY_WHILE_FLAG = 3;\n","\t\n","\t  /** Used as references for various `Number` constants. */\n","\t  var INFINITY = 1 / 0,\n","\t      MAX_SAFE_INTEGER = 9007199254740991,\n","\t      MAX_INTEGER = 1.7976931348623157e+308,\n","\t      NAN = 0 / 0;\n","\t\n","\t  /** Used as references for the maximum length and index of an array. */\n","\t  var MAX_ARRAY_LENGTH = 4294967295,\n","\t      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n","\t      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n","\t\n","\t  /** Used to associate wrap methods with their bit flags. */\n","\t  var wrapFlags = [\n","\t    ['ary', WRAP_ARY_FLAG],\n","\t    ['bind', WRAP_BIND_FLAG],\n","\t    ['bindKey', WRAP_BIND_KEY_FLAG],\n","\t    ['curry', WRAP_CURRY_FLAG],\n","\t    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n","\t    ['flip', WRAP_FLIP_FLAG],\n","\t    ['partial', WRAP_PARTIAL_FLAG],\n","\t    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n","\t    ['rearg', WRAP_REARG_FLAG]\n","\t  ];\n","\t\n","\t  /** `Object#toString` result references. */\n","\t  var argsTag = '[object Arguments]',\n","\t      arrayTag = '[object Array]',\n","\t      asyncTag = '[object AsyncFunction]',\n","\t      boolTag = '[object Boolean]',\n","\t      dateTag = '[object Date]',\n","\t      domExcTag = '[object DOMException]',\n","\t      errorTag = '[object Error]',\n","\t      funcTag = '[object Function]',\n","\t      genTag = '[object GeneratorFunction]',\n","\t      mapTag = '[object Map]',\n","\t      numberTag = '[object Number]',\n","\t      nullTag = '[object Null]',\n","\t      objectTag = '[object Object]',\n","\t      promiseTag = '[object Promise]',\n","\t      proxyTag = '[object Proxy]',\n","\t      regexpTag = '[object RegExp]',\n","\t      setTag = '[object Set]',\n","\t      stringTag = '[object String]',\n","\t      symbolTag = '[object Symbol]',\n","\t      undefinedTag = '[object Undefined]',\n","\t      weakMapTag = '[object WeakMap]',\n","\t      weakSetTag = '[object WeakSet]';\n","\t\n","\t  var arrayBufferTag = '[object ArrayBuffer]',\n","\t      dataViewTag = '[object DataView]',\n","\t      float32Tag = '[object Float32Array]',\n","\t      float64Tag = '[object Float64Array]',\n","\t      int8Tag = '[object Int8Array]',\n","\t      int16Tag = '[object Int16Array]',\n","\t      int32Tag = '[object Int32Array]',\n","\t      uint8Tag = '[object Uint8Array]',\n","\t      uint8ClampedTag = '[object Uint8ClampedArray]',\n","\t      uint16Tag = '[object Uint16Array]',\n","\t      uint32Tag = '[object Uint32Array]';\n","\t\n","\t  /** Used to match empty string literals in compiled template source. */\n","\t  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n","\t      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n","\t      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n","\t\n","\t  /** Used to match HTML entities and HTML characters. */\n","\t  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n","\t      reUnescapedHtml = /[&<>\"']/g,\n","\t      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n","\t      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n","\t\n","\t  /** Used to match template delimiters. */\n","\t  var reEscape = /<%-([\\s\\S]+?)%>/g,\n","\t      reEvaluate = /<%([\\s\\S]+?)%>/g,\n","\t      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n","\t\n","\t  /** Used to match property names within property paths. */\n","\t  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n","\t      reIsPlainProp = /^\\w*$/,\n","\t      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n","\t\n","\t  /**\n","\t   * Used to match `RegExp`\n","\t   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n","\t   */\n","\t  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n","\t      reHasRegExpChar = RegExp(reRegExpChar.source);\n","\t\n","\t  /** Used to match leading and trailing whitespace. */\n","\t  var reTrim = /^\\s+|\\s+$/g,\n","\t      reTrimStart = /^\\s+/,\n","\t      reTrimEnd = /\\s+$/;\n","\t\n","\t  /** Used to match wrap detail comments. */\n","\t  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n","\t      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n","\t      reSplitDetails = /,? & /;\n","\t\n","\t  /** Used to match words composed of alphanumeric characters. */\n","\t  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n","\t\n","\t  /** Used to match backslashes in property paths. */\n","\t  var reEscapeChar = /\\\\(\\\\)?/g;\n","\t\n","\t  /**\n","\t   * Used to match\n","\t   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n","\t   */\n","\t  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n","\t\n","\t  /** Used to match `RegExp` flags from their coerced string values. */\n","\t  var reFlags = /\\w*$/;\n","\t\n","\t  /** Used to detect bad signed hexadecimal string values. */\n","\t  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n","\t\n","\t  /** Used to detect binary string values. */\n","\t  var reIsBinary = /^0b[01]+$/i;\n","\t\n","\t  /** Used to detect host constructors (Safari). */\n","\t  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n","\t\n","\t  /** Used to detect octal string values. */\n","\t  var reIsOctal = /^0o[0-7]+$/i;\n","\t\n","\t  /** Used to detect unsigned integer values. */\n","\t  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n","\t\n","\t  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n","\t  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n","\t\n","\t  /** Used to ensure capturing order of template delimiters. */\n","\t  var reNoMatch = /($^)/;\n","\t\n","\t  /** Used to match unescaped characters in compiled string literals. */\n","\t  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n","\t\n","\t  /** Used to compose unicode character classes. */\n","\t  var rsAstralRange = '\\\\ud800-\\\\udfff',\n","\t      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n","\t      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n","\t      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n","\t      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n","\t      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n","\t      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n","\t      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n","\t      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n","\t      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n","\t      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n","\t      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n","\t      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n","\t      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n","\t\n","\t  /** Used to compose unicode capture groups. */\n","\t  var rsApos = \"['\\u2019]\",\n","\t      rsAstral = '[' + rsAstralRange + ']',\n","\t      rsBreak = '[' + rsBreakRange + ']',\n","\t      rsCombo = '[' + rsComboRange + ']',\n","\t      rsDigits = '\\\\d+',\n","\t      rsDingbat = '[' + rsDingbatRange + ']',\n","\t      rsLower = '[' + rsLowerRange + ']',\n","\t      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n","\t      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n","\t      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n","\t      rsNonAstral = '[^' + rsAstralRange + ']',\n","\t      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n","\t      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n","\t      rsUpper = '[' + rsUpperRange + ']',\n","\t      rsZWJ = '\\\\u200d';\n","\t\n","\t  /** Used to compose unicode regexes. */\n","\t  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n","\t      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n","\t      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n","\t      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n","\t      reOptMod = rsModifier + '?',\n","\t      rsOptVar = '[' + rsVarRange + ']?',\n","\t      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n","\t      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n","\t      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n","\t      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n","\t      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n","\t      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n","\t\n","\t  /** Used to match apostrophes. */\n","\t  var reApos = RegExp(rsApos, 'g');\n","\t\n","\t  /**\n","\t   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n","\t   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n","\t   */\n","\t  var reComboMark = RegExp(rsCombo, 'g');\n","\t\n","\t  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n","\t  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n","\t\n","\t  /** Used to match complex or compound words. */\n","\t  var reUnicodeWord = RegExp([\n","\t    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n","\t    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n","\t    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n","\t    rsUpper + '+' + rsOptContrUpper,\n","\t    rsOrdUpper,\n","\t    rsOrdLower,\n","\t    rsDigits,\n","\t    rsEmoji\n","\t  ].join('|'), 'g');\n","\t\n","\t  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n","\t  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n","\t\n","\t  /** Used to detect strings that need a more robust regexp to match words. */\n","\t  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n","\t\n","\t  /** Used to assign default `context` object properties. */\n","\t  var contextProps = [\n","\t    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n","\t    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n","\t    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n","\t    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n","\t    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n","\t  ];\n","\t\n","\t  /** Used to make template sourceURLs easier to identify. */\n","\t  var templateCounter = -1;\n","\t\n","\t  /** Used to identify `toStringTag` values of typed arrays. */\n","\t  var typedArrayTags = {};\n","\t  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n","\t  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n","\t  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n","\t  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n","\t  typedArrayTags[uint32Tag] = true;\n","\t  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n","\t  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n","\t  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n","\t  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n","\t  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n","\t  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n","\t  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n","\t  typedArrayTags[weakMapTag] = false;\n","\t\n","\t  /** Used to identify `toStringTag` values supported by `_.clone`. */\n","\t  var cloneableTags = {};\n","\t  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n","\t  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n","\t  cloneableTags[boolTag] = cloneableTags[dateTag] =\n","\t  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n","\t  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n","\t  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n","\t  cloneableTags[numberTag] = cloneableTags[objectTag] =\n","\t  cloneableTags[regexpTag] = cloneableTags[setTag] =\n","\t  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n","\t  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n","\t  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n","\t  cloneableTags[errorTag] = cloneableTags[funcTag] =\n","\t  cloneableTags[weakMapTag] = false;\n","\t\n","\t  /** Used to map Latin Unicode letters to basic Latin letters. */\n","\t  var deburredLetters = {\n","\t    // Latin-1 Supplement block.\n","\t    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n","\t    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n","\t    '\\xc7': 'C',  '\\xe7': 'c',\n","\t    '\\xd0': 'D',  '\\xf0': 'd',\n","\t    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n","\t    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n","\t    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n","\t    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n","\t    '\\xd1': 'N',  '\\xf1': 'n',\n","\t    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n","\t    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n","\t    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n","\t    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n","\t    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n","\t    '\\xc6': 'Ae', '\\xe6': 'ae',\n","\t    '\\xde': 'Th', '\\xfe': 'th',\n","\t    '\\xdf': 'ss',\n","\t    // Latin Extended-A block.\n","\t    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n","\t    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n","\t    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n","\t    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n","\t    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n","\t    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n","\t    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n","\t    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n","\t    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n","\t    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n","\t    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n","\t    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n","\t    '\\u0134': 'J',  '\\u0135': 'j',\n","\t    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n","\t    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n","\t    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n","\t    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n","\t    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n","\t    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n","\t    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n","\t    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n","\t    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n","\t    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n","\t    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n","\t    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n","\t    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n","\t    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n","\t    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n","\t    '\\u0174': 'W',  '\\u0175': 'w',\n","\t    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n","\t    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n","\t    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n","\t    '\\u0132': 'IJ', '\\u0133': 'ij',\n","\t    '\\u0152': 'Oe', '\\u0153': 'oe',\n","\t    '\\u0149': \"'n\", '\\u017f': 's'\n","\t  };\n","\t\n","\t  /** Used to map characters to HTML entities. */\n","\t  var htmlEscapes = {\n","\t    '&': '&amp;',\n","\t    '<': '&lt;',\n","\t    '>': '&gt;',\n","\t    '\"': '&quot;',\n","\t    \"'\": '&#39;'\n","\t  };\n","\t\n","\t  /** Used to map HTML entities to characters. */\n","\t  var htmlUnescapes = {\n","\t    '&amp;': '&',\n","\t    '&lt;': '<',\n","\t    '&gt;': '>',\n","\t    '&quot;': '\"',\n","\t    '&#39;': \"'\"\n","\t  };\n","\t\n","\t  /** Used to escape characters for inclusion in compiled string literals. */\n","\t  var stringEscapes = {\n","\t    '\\\\': '\\\\',\n","\t    \"'\": \"'\",\n","\t    '\\n': 'n',\n","\t    '\\r': 'r',\n","\t    '\\u2028': 'u2028',\n","\t    '\\u2029': 'u2029'\n","\t  };\n","\t\n","\t  /** Built-in method references without a dependency on `root`. */\n","\t  var freeParseFloat = parseFloat,\n","\t      freeParseInt = parseInt;\n","\t\n","\t  /** Detect free variable `global` from Node.js. */\n","\t  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n","\t\n","\t  /** Detect free variable `self`. */\n","\t  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n","\t\n","\t  /** Used as a reference to the global object. */\n","\t  var root = freeGlobal || freeSelf || Function('return this')();\n","\t\n","\t  /** Detect free variable `exports`. */\n","\t  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n","\t\n","\t  /** Detect free variable `module`. */\n","\t  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n","\t\n","\t  /** Detect the popular CommonJS extension `module.exports`. */\n","\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n","\t\n","\t  /** Detect free variable `process` from Node.js. */\n","\t  var freeProcess = moduleExports && freeGlobal.process;\n","\t\n","\t  /** Used to access faster Node.js helpers. */\n","\t  var nodeUtil = (function() {\n","\t    try {\n","\t      // Use `util.types` for Node.js 10+.\n","\t      var types = freeModule && freeModule.require && freeModule.require('util').types;\n","\t\n","\t      if (types) {\n","\t        return types;\n","\t      }\n","\t\n","\t      // Legacy `process.binding('util')` for Node.js < 10.\n","\t      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n","\t    } catch (e) {}\n","\t  }());\n","\t\n","\t  /* Node.js helper references. */\n","\t  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n","\t      nodeIsDate = nodeUtil && nodeUtil.isDate,\n","\t      nodeIsMap = nodeUtil && nodeUtil.isMap,\n","\t      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n","\t      nodeIsSet = nodeUtil && nodeUtil.isSet,\n","\t      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  /**\n","\t   * A faster alternative to `Function#apply`, this function invokes `func`\n","\t   * with the `this` binding of `thisArg` and the arguments of `args`.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to invoke.\n","\t   * @param {*} thisArg The `this` binding of `func`.\n","\t   * @param {Array} args The arguments to invoke `func` with.\n","\t   * @returns {*} Returns the result of `func`.\n","\t   */\n","\t  function apply(func, thisArg, args) {\n","\t    switch (args.length) {\n","\t      case 0: return func.call(thisArg);\n","\t      case 1: return func.call(thisArg, args[0]);\n","\t      case 2: return func.call(thisArg, args[0], args[1]);\n","\t      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n","\t    }\n","\t    return func.apply(thisArg, args);\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `baseAggregator` for arrays.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} setter The function to set `accumulator` values.\n","\t   * @param {Function} iteratee The iteratee to transform keys.\n","\t   * @param {Object} accumulator The initial aggregated object.\n","\t   * @returns {Function} Returns `accumulator`.\n","\t   */\n","\t  function arrayAggregator(array, setter, iteratee, accumulator) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      setter(accumulator, value, iteratee(value), array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.forEach` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayEach(array, iteratee) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (iteratee(array[index], index, array) === false) {\n","\t        break;\n","\t      }\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.forEachRight` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayEachRight(array, iteratee) {\n","\t    var length = array == null ? 0 : array.length;\n","\t\n","\t    while (length--) {\n","\t      if (iteratee(array[length], length, array) === false) {\n","\t        break;\n","\t      }\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.every` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t   *  else `false`.\n","\t   */\n","\t  function arrayEvery(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (!predicate(array[index], index, array)) {\n","\t        return false;\n","\t      }\n","\t    }\n","\t    return true;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.filter` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {Array} Returns the new filtered array.\n","\t   */\n","\t  function arrayFilter(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length,\n","\t        resIndex = 0,\n","\t        result = [];\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      if (predicate(value, index, array)) {\n","\t        result[resIndex++] = value;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.includes` for arrays without support for\n","\t   * specifying an index to search from.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to inspect.\n","\t   * @param {*} target The value to search for.\n","\t   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n","\t   */\n","\t  function arrayIncludes(array, value) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    return !!length && baseIndexOf(array, value, 0) > -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * This function is like `arrayIncludes` except that it accepts a comparator.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to inspect.\n","\t   * @param {*} target The value to search for.\n","\t   * @param {Function} comparator The comparator invoked per element.\n","\t   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n","\t   */\n","\t  function arrayIncludesWith(array, value, comparator) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (comparator(value, array[index])) {\n","\t        return true;\n","\t      }\n","\t    }\n","\t    return false;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.map` for arrays without support for iteratee\n","\t   * shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns the new mapped array.\n","\t   */\n","\t  function arrayMap(array, iteratee) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length,\n","\t        result = Array(length);\n","\t\n","\t    while (++index < length) {\n","\t      result[index] = iteratee(array[index], index, array);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Appends the elements of `values` to `array`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to modify.\n","\t   * @param {Array} values The values to append.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayPush(array, values) {\n","\t    var index = -1,\n","\t        length = values.length,\n","\t        offset = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      array[offset + index] = values[index];\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.reduce` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} [accumulator] The initial value.\n","\t   * @param {boolean} [initAccum] Specify using the first element of `array` as\n","\t   *  the initial value.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function arrayReduce(array, iteratee, accumulator, initAccum) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    if (initAccum && length) {\n","\t      accumulator = array[++index];\n","\t    }\n","\t    while (++index < length) {\n","\t      accumulator = iteratee(accumulator, array[index], index, array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.reduceRight` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} [accumulator] The initial value.\n","\t   * @param {boolean} [initAccum] Specify using the last element of `array` as\n","\t   *  the initial value.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    if (initAccum && length) {\n","\t      accumulator = array[--length];\n","\t    }\n","\t    while (length--) {\n","\t      accumulator = iteratee(accumulator, array[length], length, array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.some` for arrays without support for iteratee\n","\t   * shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t   *  else `false`.\n","\t   */\n","\t  function arraySome(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (predicate(array[index], index, array)) {\n","\t        return true;\n","\t      }\n","\t    }\n","\t    return false;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the size of an ASCII `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  var asciiSize = baseProperty('length');\n","\t\n","\t  /**\n","\t   * Converts an ASCII `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function asciiToArray(string) {\n","\t    return string.split('');\n","\t  }\n","\t\n","\t  /**\n","\t   * Splits an ASCII `string` into an array of its words.\n","\t   *\n","\t   * @private\n","\t   * @param {string} The string to inspect.\n","\t   * @returns {Array} Returns the words of `string`.\n","\t   */\n","\t  function asciiWords(string) {\n","\t    return string.match(reAsciiWord) || [];\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n","\t   * without support for iteratee shorthands, which iterates over `collection`\n","\t   * using `eachFunc`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array|Object} collection The collection to inspect.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @param {Function} eachFunc The function to iterate over `collection`.\n","\t   * @returns {*} Returns the found element or its key, else `undefined`.\n","\t   */\n","\t  function baseFindKey(collection, predicate, eachFunc) {\n","\t    var result;\n","\t    eachFunc(collection, function(value, key, collection) {\n","\t      if (predicate(value, key, collection)) {\n","\t        result = key;\n","\t        return false;\n","\t      }\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n","\t   * support for iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n","\t    var length = array.length,\n","\t        index = fromIndex + (fromRight ? 1 : -1);\n","\t\n","\t    while ((fromRight ? index-- : ++index < length)) {\n","\t      if (predicate(array[index], index, array)) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseIndexOf(array, value, fromIndex) {\n","\t    return value === value\n","\t      ? strictIndexOf(array, value, fromIndex)\n","\t      : baseFindIndex(array, baseIsNaN, fromIndex);\n","\t  }\n","\t\n","\t  /**\n","\t   * This function is like `baseIndexOf` except that it accepts a comparator.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @param {Function} comparator The comparator invoked per element.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseIndexOfWith(array, value, fromIndex, comparator) {\n","\t    var index = fromIndex - 1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (comparator(array[index], value)) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.isNaN` without support for number objects.\n","\t   *\n","\t   * @private\n","\t   * @param {*} value The value to check.\n","\t   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n","\t   */\n","\t  function baseIsNaN(value) {\n","\t    return value !== value;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.mean` and `_.meanBy` without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {number} Returns the mean.\n","\t   */\n","\t  function baseMean(array, iteratee) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    return length ? (baseSum(array, iteratee) / length) : NAN;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.property` without support for deep paths.\n","\t   *\n","\t   * @private\n","\t   * @param {string} key The key of the property to get.\n","\t   * @returns {Function} Returns the new accessor function.\n","\t   */\n","\t  function baseProperty(key) {\n","\t    return function(object) {\n","\t      return object == null ? undefined : object[key];\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.propertyOf` without support for deep paths.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @returns {Function} Returns the new accessor function.\n","\t   */\n","\t  function basePropertyOf(object) {\n","\t    return function(key) {\n","\t      return object == null ? undefined : object[key];\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n","\t   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array|Object} collection The collection to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} accumulator The initial value.\n","\t   * @param {boolean} initAccum Specify using the first or last element of\n","\t   *  `collection` as the initial value.\n","\t   * @param {Function} eachFunc The function to iterate over `collection`.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n","\t    eachFunc(collection, function(value, index, collection) {\n","\t      accumulator = initAccum\n","\t        ? (initAccum = false, value)\n","\t        : iteratee(accumulator, value, index, collection);\n","\t    });\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.sortBy` which uses `comparer` to define the\n","\t   * sort order of `array` and replaces criteria objects with their corresponding\n","\t   * values.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to sort.\n","\t   * @param {Function} comparer The function to define sort order.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function baseSortBy(array, comparer) {\n","\t    var length = array.length;\n","\t\n","\t    array.sort(comparer);\n","\t    while (length--) {\n","\t      array[length] = array[length].value;\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.sum` and `_.sumBy` without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {number} Returns the sum.\n","\t   */\n","\t  function baseSum(array, iteratee) {\n","\t    var result,\n","\t        index = -1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      var current = iteratee(array[index]);\n","\t      if (current !== undefined) {\n","\t        result = result === undefined ? current : (result + current);\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.times` without support for iteratee shorthands\n","\t   * or max array length checks.\n","\t   *\n","\t   * @private\n","\t   * @param {number} n The number of times to invoke `iteratee`.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns the array of results.\n","\t   */\n","\t  function baseTimes(n, iteratee) {\n","\t    var index = -1,\n","\t        result = Array(n);\n","\t\n","\t    while (++index < n) {\n","\t      result[index] = iteratee(index);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n","\t   * of key-value pairs for `object` corresponding to the property names of `props`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @param {Array} props The property names to get values for.\n","\t   * @returns {Object} Returns the key-value pairs.\n","\t   */\n","\t  function baseToPairs(object, props) {\n","\t    return arrayMap(props, function(key) {\n","\t      return [key, object[key]];\n","\t    });\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.unary` without support for storing metadata.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to cap arguments for.\n","\t   * @returns {Function} Returns the new capped function.\n","\t   */\n","\t  function baseUnary(func) {\n","\t    return function(value) {\n","\t      return func(value);\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.values` and `_.valuesIn` which creates an\n","\t   * array of `object` property values corresponding to the property names\n","\t   * of `props`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @param {Array} props The property names to get values for.\n","\t   * @returns {Object} Returns the array of property values.\n","\t   */\n","\t  function baseValues(object, props) {\n","\t    return arrayMap(props, function(key) {\n","\t      return object[key];\n","\t    });\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if a `cache` value for `key` exists.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} cache The cache to query.\n","\t   * @param {string} key The key of the entry to check.\n","\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t   */\n","\t  function cacheHas(cache, key) {\n","\t    return cache.has(key);\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n","\t   * that is not found in the character symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} strSymbols The string symbols to inspect.\n","\t   * @param {Array} chrSymbols The character symbols to find.\n","\t   * @returns {number} Returns the index of the first unmatched string symbol.\n","\t   */\n","\t  function charsStartIndex(strSymbols, chrSymbols) {\n","\t    var index = -1,\n","\t        length = strSymbols.length;\n","\t\n","\t    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n","\t   * that is not found in the character symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} strSymbols The string symbols to inspect.\n","\t   * @param {Array} chrSymbols The character symbols to find.\n","\t   * @returns {number} Returns the index of the last unmatched string symbol.\n","\t   */\n","\t  function charsEndIndex(strSymbols, chrSymbols) {\n","\t    var index = strSymbols.length;\n","\t\n","\t    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the number of `placeholder` occurrences in `array`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} placeholder The placeholder to search for.\n","\t   * @returns {number} Returns the placeholder count.\n","\t   */\n","\t  function countHolders(array, placeholder) {\n","\t    var length = array.length,\n","\t        result = 0;\n","\t\n","\t    while (length--) {\n","\t      if (array[length] === placeholder) {\n","\t        ++result;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n","\t   * letters to basic Latin letters.\n","\t   *\n","\t   * @private\n","\t   * @param {string} letter The matched letter to deburr.\n","\t   * @returns {string} Returns the deburred letter.\n","\t   */\n","\t  var deburrLetter = basePropertyOf(deburredLetters);\n","\t\n","\t  /**\n","\t   * Used by `_.escape` to convert characters to HTML entities.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to escape.\n","\t   * @returns {string} Returns the escaped character.\n","\t   */\n","\t  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n","\t\n","\t  /**\n","\t   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to escape.\n","\t   * @returns {string} Returns the escaped character.\n","\t   */\n","\t  function escapeStringChar(chr) {\n","\t    return '\\\\' + stringEscapes[chr];\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the value at `key` of `object`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} [object] The object to query.\n","\t   * @param {string} key The key of the property to get.\n","\t   * @returns {*} Returns the property value.\n","\t   */\n","\t  function getValue(object, key) {\n","\t    return object == null ? undefined : object[key];\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if `string` contains Unicode symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n","\t   */\n","\t  function hasUnicode(string) {\n","\t    return reHasUnicode.test(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if `string` contains a word composed of Unicode symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {boolean} Returns `true` if a word is found, else `false`.\n","\t   */\n","\t  function hasUnicodeWord(string) {\n","\t    return reHasUnicodeWord.test(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `iterator` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} iterator The iterator to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function iteratorToArray(iterator) {\n","\t    var data,\n","\t        result = [];\n","\t\n","\t    while (!(data = iterator.next()).done) {\n","\t      result.push(data.value);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `map` to its key-value pairs.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} map The map to convert.\n","\t   * @returns {Array} Returns the key-value pairs.\n","\t   */\n","\t  function mapToArray(map) {\n","\t    var index = -1,\n","\t        result = Array(map.size);\n","\t\n","\t    map.forEach(function(value, key) {\n","\t      result[++index] = [key, value];\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Creates a unary function that invokes `func` with its argument transformed.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to wrap.\n","\t   * @param {Function} transform The argument transform.\n","\t   * @returns {Function} Returns the new function.\n","\t   */\n","\t  function overArg(func, transform) {\n","\t    return function(arg) {\n","\t      return func(transform(arg));\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * Replaces all `placeholder` elements in `array` with an internal placeholder\n","\t   * and returns an array of their indexes.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to modify.\n","\t   * @param {*} placeholder The placeholder to replace.\n","\t   * @returns {Array} Returns the new array of placeholder indexes.\n","\t   */\n","\t  function replaceHolders(array, placeholder) {\n","\t    var index = -1,\n","\t        length = array.length,\n","\t        resIndex = 0,\n","\t        result = [];\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      if (value === placeholder || value === PLACEHOLDER) {\n","\t        array[index] = PLACEHOLDER;\n","\t        result[resIndex++] = index;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `set` to an array of its values.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} set The set to convert.\n","\t   * @returns {Array} Returns the values.\n","\t   */\n","\t  function setToArray(set) {\n","\t    var index = -1,\n","\t        result = Array(set.size);\n","\t\n","\t    set.forEach(function(value) {\n","\t      result[++index] = value;\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `set` to its value-value pairs.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} set The set to convert.\n","\t   * @returns {Array} Returns the value-value pairs.\n","\t   */\n","\t  function setToPairs(set) {\n","\t    var index = -1,\n","\t        result = Array(set.size);\n","\t\n","\t    set.forEach(function(value) {\n","\t      result[++index] = [value, value];\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.indexOf` which performs strict equality\n","\t   * comparisons of values, i.e. `===`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function strictIndexOf(array, value, fromIndex) {\n","\t    var index = fromIndex - 1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (array[index] === value) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.lastIndexOf` which performs strict equality\n","\t   * comparisons of values, i.e. `===`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function strictLastIndexOf(array, value, fromIndex) {\n","\t    var index = fromIndex + 1;\n","\t    while (index--) {\n","\t      if (array[index] === value) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the number of symbols in `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  function stringSize(string) {\n","\t    return hasUnicode(string)\n","\t      ? unicodeSize(string)\n","\t      : asciiSize(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function stringToArray(string) {\n","\t    return hasUnicode(string)\n","\t      ? unicodeToArray(string)\n","\t      : asciiToArray(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.unescape` to convert HTML entities to characters.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to unescape.\n","\t   * @returns {string} Returns the unescaped character.\n","\t   */\n","\t  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n","\t\n","\t  /**\n","\t   * Gets the size of a Unicode `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  function unicodeSize(string) {\n","\t    var result = reUnicode.lastIndex = 0;\n","\t    while (reUnicode.test(string)) {\n","\t      ++result;\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts a Unicode `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function unicodeToArray(string) {\n","\t    return string.match(reUnicode) || [];\n","\t  }\n","\t\n","\t  /**\n","\t   * Splits a Unicode `string` into an array of its words.\n","\t   *\n","\t   * @private\n","\t   * @param {string} The string to inspect.\n","\t   * @returns {Array} Returns the words of `string`.\n","\t   */\n","\t  function unicodeWords(string) {\n","\t    return string.match(reUnicodeWord) || [];\n","\t  }\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  /**\n","\t   * Create a new pristine `lodash` function using the `context` object.\n","\t   *\n","\t   * @static\n","\t   * @memberOf _\n","\t   * @since 1.1.0\n","\t   * @category Util\n","\t   * @param {Object} [context=root] The context object.\n","\t   * @returns {Function} Returns a new `lodash` function.\n","\t   * @example\n","\t   *\n","\t   * _.mixin({ 'foo': _.constant('foo') });\n","\t   *\n","\t   * var lodash = _.runInContext();\n","\t   * lodash.mixin({ 'bar': lodash.constant('bar') });\n","\t   *\n","\t   * _.isFunction(_.foo);\n","\t   * // => true\n","\t   * _.isFunction(_.bar);\n","\t   * // => false\n","\t   *\n","\t   * lodash.isFunction(lodash.foo);\n","\t   * // => false\n","\t   * lodash.isFunction(lodash.bar);\n","\t   * // => true\n","\t   *\n","\t   * // Create a suped-up `defer` in Node.js.\n","\t   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n","\t   */\n","\t  var runInContext = (function runInContext(context) {\n","\t    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n","\t\n","\t    /** Built-in constructor references. */\n","\t    var Array = context.Array,\n","\t        Date = context.Date,\n","\t        Error = context.Error,\n","\t        Function = context.Function,\n","\t        Math = context.Math,\n","\t        Object = context.Object,\n","\t        RegExp = context.RegExp,\n","\t        String = context.String,\n","\t        TypeError = context.TypeError;\n","\t\n","\t    /** Used for built-in method references. */\n","\t    var arrayProto = Array.prototype,\n","\t        funcProto = Function.prototype,\n","\t        objectProto = Object.prototype;\n","\t\n","\t    /** Used to detect overreaching core-js shims. */\n","\t    var coreJsData = context['__core-js_shared__'];\n","\t\n","\t    /** Used to resolve the decompiled source of functions. */\n","\t    var funcToString = funcProto.toString;\n","\t\n","\t    /** Used to check objects for own properties. */\n","\t    var hasOwnProperty = objectProto.hasOwnProperty;\n","\t\n","\t    /** Used to generate unique IDs. */\n","\t    var idCounter = 0;\n","\t\n","\t    /** Used to detect methods masquerading as native. */\n","\t    var maskSrcKey = (function() {\n","\t      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n","\t      return uid ? ('Symbol(src)_1.' + uid) : '';\n","\t    }());\n","\t\n","\t    /**\n","\t     * Used to resolve the\n","\t     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n","\t     * of values.\n","\t     */\n","\t    var nativeObjectToString = objectProto.toString;\n","\t\n","\t    /** Used to infer the `Object` constructor. */\n","\t    var objectCtorString = funcToString.call(Object);\n","\t\n","\t    /** Used to restore the original `_` reference in `_.noConflict`. */\n","\t    var oldDash = root._;\n","\t\n","\t    /** Used to detect if a method is native. */\n","\t    var reIsNative = RegExp('^' +\n","\t      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n","\t      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n","\t    );\n","\t\n","\t    /** Built-in value references. */\n","\t    var Buffer = moduleExports ? context.Buffer : undefined,\n","\t        Symbol = context.Symbol,\n","\t        Uint8Array = context.Uint8Array,\n","\t        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n","\t        getPrototype = overArg(Object.getPrototypeOf, Object),\n","\t        objectCreate = Object.create,\n","\t        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n","\t        splice = arrayProto.splice,\n","\t        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n","\t        symIterator = Symbol ? Symbol.iterator : undefined,\n","\t        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n","\t\n","\t    var defineProperty = (function() {\n","\t      try {\n","\t        var func = getNative(Object, 'defineProperty');\n","\t        func({}, '', {});\n","\t        return func;\n","\t      } catch (e) {}\n","\t    }());\n","\t\n","\t    /** Mocked built-ins. */\n","\t    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n","\t        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n","\t        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n","\t\n","\t    /* Built-in method references for those with the same name as other `lodash` methods. */\n","\t    var nativeCeil = Math.ceil,\n","\t        nativeFloor = Math.floor,\n","\t        nativeGetSymbols = Object.getOwnPropertySymbols,\n","\t        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n","\t        nativeIsFinite = context.isFinite,\n","\t        nativeJoin = arrayProto.join,\n","\t        nativeKeys = overArg(Object.keys, Object),\n","\t        nativeMax = Math.max,\n","\t        nativeMin = Math.min,\n","\t        nativeNow = Date.now,\n","\t        nativeParseInt = context.parseInt,\n","\t        nativeRandom = Math.random,\n","\t        nativeReverse = arrayProto.reverse;\n","\t\n","\t    /* Built-in method references that are verified to be native. */\n","\t    var DataView = getNative(context, 'DataView'),\n","\t        Map = getNative(context, 'Map'),\n","\t        Promise = getNative(context, 'Promise'),\n","\t        Set = getNative(context, 'Set'),\n","\t        WeakMap = getNative(context, 'WeakMap'),\n","\t        nativeCreate = getNative(Object, 'create');\n","\t\n","\t    /** Used to store function metadata. */\n","\t    var metaMap = WeakMap && new WeakMap;\n","\t\n","\t    /** Used to lookup unminified function names. */\n","\t    var realNames = {};\n","\t\n","\t    /** Used to detect maps, sets, and weakmaps. */\n","\t    var dataViewCtorString = toSource(DataView),\n","\t        mapCtorString = toSource(Map),\n","\t        promiseCtorString = toSource(Promise),\n","\t        setCtorString = toSource(Set),\n","\t        weakMapCtorString = toSource(WeakMap);\n","\t\n","\t    /** Used to convert symbols to primitives and strings. */\n","\t    var symbolProto = Symbol ? Symbol.prototype : undefined,\n","\t        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n","\t        symbolToString = symbolProto ? symbolProto.toString : undefined;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a `lodash` object which wraps `value` to enable implicit method\n","\t     * chain sequences. Methods that operate on and return arrays, collections,\n","\t     * and functions can be chained together. Methods that retrieve a single value\n","\t     * or may return a primitive value will automatically end the chain sequence\n","\t     * and return the unwrapped value. Otherwise, the value must be unwrapped\n","\t     * with `_#value`.\n","\t     *\n","\t     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n","\t     * enabled using `_.chain`.\n","\t     *\n","\t     * The execution of chained methods is lazy, that is, it's deferred until\n","\t     * `_#value` is implicitly or explicitly called.\n","\t     *\n","\t     * Lazy evaluation allows several methods to support shortcut fusion.\n","\t     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n","\t     * the creation of intermediate arrays and can greatly reduce the number of\n","\t     * iteratee executions. Sections of a chain sequence qualify for shortcut\n","\t     * fusion if the section is applied to an array and iteratees accept only\n","\t     * one argument. The heuristic for whether a section qualifies for shortcut\n","\t     * fusion is subject to change.\n","\t     *\n","\t     * Chaining is supported in custom builds as long as the `_#value` method is\n","\t     * directly or indirectly included in the build.\n","\t     *\n","\t     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n","\t     *\n","\t     * The wrapper `Array` methods are:\n","\t     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n","\t     *\n","\t     * The wrapper `String` methods are:\n","\t     * `replace` and `split`\n","\t     *\n","\t     * The wrapper methods that support shortcut fusion are:\n","\t     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n","\t     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n","\t     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n","\t     *\n","\t     * The chainable wrapper methods are:\n","\t     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n","\t     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n","\t     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n","\t     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n","\t     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n","\t     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n","\t     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n","\t     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n","\t     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n","\t     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n","\t     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n","\t     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n","\t     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n","\t     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n","\t     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n","\t     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n","\t     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n","\t     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n","\t     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n","\t     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n","\t     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n","\t     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n","\t     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n","\t     * `zipObject`, `zipObjectDeep`, and `zipWith`\n","\t     *\n","\t     * The wrapper methods that are **not** chainable by default are:\n","\t     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n","\t     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n","\t     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n","\t     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n","\t     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n","\t     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n","\t     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n","\t     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n","\t     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n","\t     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n","\t     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n","\t     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n","\t     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n","\t     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n","\t     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n","\t     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n","\t     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n","\t     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n","\t     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n","\t     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n","\t     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n","\t     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n","\t     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n","\t     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n","\t     * `upperFirst`, `value`, and `words`\n","\t     *\n","\t     * @name _\n","\t     * @constructor\n","\t     * @category Seq\n","\t     * @param {*} value The value to wrap in a `lodash` instance.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var wrapped = _([1, 2, 3]);\n","\t     *\n","\t     * // Returns an unwrapped value.\n","\t     * wrapped.reduce(_.add);\n","\t     * // => 6\n","\t     *\n","\t     * // Returns a wrapped value.\n","\t     * var squares = wrapped.map(square);\n","\t     *\n","\t     * _.isArray(squares);\n","\t     * // => false\n","\t     *\n","\t     * _.isArray(squares.value());\n","\t     * // => true\n","\t     */\n","\t    function lodash(value) {\n","\t      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n","\t        if (value instanceof LodashWrapper) {\n","\t          return value;\n","\t        }\n","\t        if (hasOwnProperty.call(value, '__wrapped__')) {\n","\t          return wrapperClone(value);\n","\t        }\n","\t      }\n","\t      return new LodashWrapper(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.create` without support for assigning\n","\t     * properties to the created object.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} proto The object to inherit from.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    var baseCreate = (function() {\n","\t      function object() {}\n","\t      return function(proto) {\n","\t        if (!isObject(proto)) {\n","\t          return {};\n","\t        }\n","\t        if (objectCreate) {\n","\t          return objectCreate(proto);\n","\t        }\n","\t        object.prototype = proto;\n","\t        var result = new object;\n","\t        object.prototype = undefined;\n","\t        return result;\n","\t      };\n","\t    }());\n","\t\n","\t    /**\n","\t     * The function whose prototype chain sequence wrappers inherit from.\n","\t     *\n","\t     * @private\n","\t     */\n","\t    function baseLodash() {\n","\t      // No operation performed.\n","\t    }\n","\t\n","\t    /**\n","\t     * The base constructor for creating `lodash` wrapper objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to wrap.\n","\t     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n","\t     */\n","\t    function LodashWrapper(value, chainAll) {\n","\t      this.__wrapped__ = value;\n","\t      this.__actions__ = [];\n","\t      this.__chain__ = !!chainAll;\n","\t      this.__index__ = 0;\n","\t      this.__values__ = undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * By default, the template delimiters used by lodash are like those in\n","\t     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n","\t     * following template settings to use alternative delimiters.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @type {Object}\n","\t     */\n","\t    lodash.templateSettings = {\n","\t\n","\t      /**\n","\t       * Used to detect `data` property values to be HTML-escaped.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'escape': reEscape,\n","\t\n","\t      /**\n","\t       * Used to detect code to be evaluated.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'evaluate': reEvaluate,\n","\t\n","\t      /**\n","\t       * Used to detect `data` property values to inject.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'interpolate': reInterpolate,\n","\t\n","\t      /**\n","\t       * Used to reference the data object in the template text.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {string}\n","\t       */\n","\t      'variable': '',\n","\t\n","\t      /**\n","\t       * Used to import variables into the compiled template.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {Object}\n","\t       */\n","\t      'imports': {\n","\t\n","\t        /**\n","\t         * A reference to the `lodash` function.\n","\t         *\n","\t         * @memberOf _.templateSettings.imports\n","\t         * @type {Function}\n","\t         */\n","\t        '_': lodash\n","\t      }\n","\t    };\n","\t\n","\t    // Ensure wrappers are instances of `baseLodash`.\n","\t    lodash.prototype = baseLodash.prototype;\n","\t    lodash.prototype.constructor = lodash;\n","\t\n","\t    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n","\t    LodashWrapper.prototype.constructor = LodashWrapper;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {*} value The value to wrap.\n","\t     */\n","\t    function LazyWrapper(value) {\n","\t      this.__wrapped__ = value;\n","\t      this.__actions__ = [];\n","\t      this.__dir__ = 1;\n","\t      this.__filtered__ = false;\n","\t      this.__iteratees__ = [];\n","\t      this.__takeCount__ = MAX_ARRAY_LENGTH;\n","\t      this.__views__ = [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the lazy wrapper object.\n","\t     *\n","\t     * @private\n","\t     * @name clone\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {Object} Returns the cloned `LazyWrapper` object.\n","\t     */\n","\t    function lazyClone() {\n","\t      var result = new LazyWrapper(this.__wrapped__);\n","\t      result.__actions__ = copyArray(this.__actions__);\n","\t      result.__dir__ = this.__dir__;\n","\t      result.__filtered__ = this.__filtered__;\n","\t      result.__iteratees__ = copyArray(this.__iteratees__);\n","\t      result.__takeCount__ = this.__takeCount__;\n","\t      result.__views__ = copyArray(this.__views__);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverses the direction of lazy iteration.\n","\t     *\n","\t     * @private\n","\t     * @name reverse\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n","\t     */\n","\t    function lazyReverse() {\n","\t      if (this.__filtered__) {\n","\t        var result = new LazyWrapper(this);\n","\t        result.__dir__ = -1;\n","\t        result.__filtered__ = true;\n","\t      } else {\n","\t        result = this.clone();\n","\t        result.__dir__ *= -1;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Extracts the unwrapped value from its lazy wrapper.\n","\t     *\n","\t     * @private\n","\t     * @name value\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {*} Returns the unwrapped value.\n","\t     */\n","\t    function lazyValue() {\n","\t      var array = this.__wrapped__.value(),\n","\t          dir = this.__dir__,\n","\t          isArr = isArray(array),\n","\t          isRight = dir < 0,\n","\t          arrLength = isArr ? array.length : 0,\n","\t          view = getView(0, arrLength, this.__views__),\n","\t          start = view.start,\n","\t          end = view.end,\n","\t          length = end - start,\n","\t          index = isRight ? end : (start - 1),\n","\t          iteratees = this.__iteratees__,\n","\t          iterLength = iteratees.length,\n","\t          resIndex = 0,\n","\t          takeCount = nativeMin(length, this.__takeCount__);\n","\t\n","\t      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n","\t        return baseWrapperValue(array, this.__actions__);\n","\t      }\n","\t      var result = [];\n","\t\n","\t      outer:\n","\t      while (length-- && resIndex < takeCount) {\n","\t        index += dir;\n","\t\n","\t        var iterIndex = -1,\n","\t            value = array[index];\n","\t\n","\t        while (++iterIndex < iterLength) {\n","\t          var data = iteratees[iterIndex],\n","\t              iteratee = data.iteratee,\n","\t              type = data.type,\n","\t              computed = iteratee(value);\n","\t\n","\t          if (type == LAZY_MAP_FLAG) {\n","\t            value = computed;\n","\t          } else if (!computed) {\n","\t            if (type == LAZY_FILTER_FLAG) {\n","\t              continue outer;\n","\t            } else {\n","\t              break outer;\n","\t            }\n","\t          }\n","\t        }\n","\t        result[resIndex++] = value;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n","\t    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n","\t    LazyWrapper.prototype.constructor = LazyWrapper;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a hash object.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function Hash(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the hash.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf Hash\n","\t     */\n","\t    function hashClear() {\n","\t      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the hash.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf Hash\n","\t     * @param {Object} hash The hash to modify.\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function hashDelete(key) {\n","\t      var result = this.has(key) && delete this.__data__[key];\n","\t      this.size -= result ? 1 : 0;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the hash value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function hashGet(key) {\n","\t      var data = this.__data__;\n","\t      if (nativeCreate) {\n","\t        var result = data[key];\n","\t        return result === HASH_UNDEFINED ? undefined : result;\n","\t      }\n","\t      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a hash value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function hashHas(key) {\n","\t      var data = this.__data__;\n","\t      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the hash `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the hash instance.\n","\t     */\n","\t    function hashSet(key, value) {\n","\t      var data = this.__data__;\n","\t      this.size += this.has(key) ? 0 : 1;\n","\t      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `Hash`.\n","\t    Hash.prototype.clear = hashClear;\n","\t    Hash.prototype['delete'] = hashDelete;\n","\t    Hash.prototype.get = hashGet;\n","\t    Hash.prototype.has = hashHas;\n","\t    Hash.prototype.set = hashSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an list cache object.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function ListCache(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the list cache.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf ListCache\n","\t     */\n","\t    function listCacheClear() {\n","\t      this.__data__ = [];\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the list cache.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function listCacheDelete(key) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      if (index < 0) {\n","\t        return false;\n","\t      }\n","\t      var lastIndex = data.length - 1;\n","\t      if (index == lastIndex) {\n","\t        data.pop();\n","\t      } else {\n","\t        splice.call(data, index, 1);\n","\t      }\n","\t      --this.size;\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the list cache value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function listCacheGet(key) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      return index < 0 ? undefined : data[index][1];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a list cache value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function listCacheHas(key) {\n","\t      return assocIndexOf(this.__data__, key) > -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the list cache `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the list cache instance.\n","\t     */\n","\t    function listCacheSet(key, value) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      if (index < 0) {\n","\t        ++this.size;\n","\t        data.push([key, value]);\n","\t      } else {\n","\t        data[index][1] = value;\n","\t      }\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `ListCache`.\n","\t    ListCache.prototype.clear = listCacheClear;\n","\t    ListCache.prototype['delete'] = listCacheDelete;\n","\t    ListCache.prototype.get = listCacheGet;\n","\t    ListCache.prototype.has = listCacheHas;\n","\t    ListCache.prototype.set = listCacheSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a map cache object to store key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function MapCache(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the map.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf MapCache\n","\t     */\n","\t    function mapCacheClear() {\n","\t      this.size = 0;\n","\t      this.__data__ = {\n","\t        'hash': new Hash,\n","\t        'map': new (Map || ListCache),\n","\t        'string': new Hash\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the map.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function mapCacheDelete(key) {\n","\t      var result = getMapData(this, key)['delete'](key);\n","\t      this.size -= result ? 1 : 0;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the map value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function mapCacheGet(key) {\n","\t      return getMapData(this, key).get(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a map value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function mapCacheHas(key) {\n","\t      return getMapData(this, key).has(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the map `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the map cache instance.\n","\t     */\n","\t    function mapCacheSet(key, value) {\n","\t      var data = getMapData(this, key),\n","\t          size = data.size;\n","\t\n","\t      data.set(key, value);\n","\t      this.size += data.size == size ? 0 : 1;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `MapCache`.\n","\t    MapCache.prototype.clear = mapCacheClear;\n","\t    MapCache.prototype['delete'] = mapCacheDelete;\n","\t    MapCache.prototype.get = mapCacheGet;\n","\t    MapCache.prototype.has = mapCacheHas;\n","\t    MapCache.prototype.set = mapCacheSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     *\n","\t     * Creates an array cache object to store unique values.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [values] The values to cache.\n","\t     */\n","\t    function SetCache(values) {\n","\t      var index = -1,\n","\t          length = values == null ? 0 : values.length;\n","\t\n","\t      this.__data__ = new MapCache;\n","\t      while (++index < length) {\n","\t        this.add(values[index]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Adds `value` to the array cache.\n","\t     *\n","\t     * @private\n","\t     * @name add\n","\t     * @memberOf SetCache\n","\t     * @alias push\n","\t     * @param {*} value The value to cache.\n","\t     * @returns {Object} Returns the cache instance.\n","\t     */\n","\t    function setCacheAdd(value) {\n","\t      this.__data__.set(value, HASH_UNDEFINED);\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is in the array cache.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf SetCache\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns `true` if `value` is found, else `false`.\n","\t     */\n","\t    function setCacheHas(value) {\n","\t      return this.__data__.has(value);\n","\t    }\n","\t\n","\t    // Add methods to `SetCache`.\n","\t    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n","\t    SetCache.prototype.has = setCacheHas;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a stack cache object to store key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function Stack(entries) {\n","\t      var data = this.__data__ = new ListCache(entries);\n","\t      this.size = data.size;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the stack.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf Stack\n","\t     */\n","\t    function stackClear() {\n","\t      this.__data__ = new ListCache;\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the stack.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function stackDelete(key) {\n","\t      var data = this.__data__,\n","\t          result = data['delete'](key);\n","\t\n","\t      this.size = data.size;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the stack value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function stackGet(key) {\n","\t      return this.__data__.get(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a stack value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function stackHas(key) {\n","\t      return this.__data__.has(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the stack `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the stack cache instance.\n","\t     */\n","\t    function stackSet(key, value) {\n","\t      var data = this.__data__;\n","\t      if (data instanceof ListCache) {\n","\t        var pairs = data.__data__;\n","\t        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n","\t          pairs.push([key, value]);\n","\t          this.size = ++data.size;\n","\t          return this;\n","\t        }\n","\t        data = this.__data__ = new MapCache(pairs);\n","\t      }\n","\t      data.set(key, value);\n","\t      this.size = data.size;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `Stack`.\n","\t    Stack.prototype.clear = stackClear;\n","\t    Stack.prototype['delete'] = stackDelete;\n","\t    Stack.prototype.get = stackGet;\n","\t    Stack.prototype.has = stackHas;\n","\t    Stack.prototype.set = stackSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an array of the enumerable property names of the array-like `value`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @param {boolean} inherited Specify returning inherited property names.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function arrayLikeKeys(value, inherited) {\n","\t      var isArr = isArray(value),\n","\t          isArg = !isArr && isArguments(value),\n","\t          isBuff = !isArr && !isArg && isBuffer(value),\n","\t          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n","\t          skipIndexes = isArr || isArg || isBuff || isType,\n","\t          result = skipIndexes ? baseTimes(value.length, String) : [],\n","\t          length = result.length;\n","\t\n","\t      for (var key in value) {\n","\t        if ((inherited || hasOwnProperty.call(value, key)) &&\n","\t            !(skipIndexes && (\n","\t               // Safari 9 has enumerable `arguments.length` in strict mode.\n","\t               key == 'length' ||\n","\t               // Node.js 0.10 has enumerable non-index properties on buffers.\n","\t               (isBuff && (key == 'offset' || key == 'parent')) ||\n","\t               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n","\t               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n","\t               // Skip index properties.\n","\t               isIndex(key, length)\n","\t            ))) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.sample` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     */\n","\t    function arraySample(array) {\n","\t      var length = array.length;\n","\t      return length ? array[baseRandom(0, length - 1)] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.sampleSize` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to sample.\n","\t     * @param {number} n The number of elements to sample.\n","\t     * @returns {Array} Returns the random elements.\n","\t     */\n","\t    function arraySampleSize(array, n) {\n","\t      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.shuffle` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     */\n","\t    function arrayShuffle(array) {\n","\t      return shuffleSelf(copyArray(array));\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like `assignValue` except that it doesn't assign\n","\t     * `undefined` values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function assignMergeValue(object, key, value) {\n","\t      if ((value !== undefined && !eq(object[key], value)) ||\n","\t          (value === undefined && !(key in object))) {\n","\t        baseAssignValue(object, key, value);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function assignValue(object, key, value) {\n","\t      var objValue = object[key];\n","\t      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n","\t          (value === undefined && !(key in object))) {\n","\t        baseAssignValue(object, key, value);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the index at which the `key` is found in `array` of key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} key The key to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     */\n","\t    function assocIndexOf(array, key) {\n","\t      var length = array.length;\n","\t      while (length--) {\n","\t        if (eq(array[length][0], key)) {\n","\t          return length;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * Aggregates elements of `collection` on `accumulator` with keys transformed\n","\t     * by `iteratee` and values set by `setter`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} setter The function to set `accumulator` values.\n","\t     * @param {Function} iteratee The iteratee to transform keys.\n","\t     * @param {Object} accumulator The initial aggregated object.\n","\t     * @returns {Function} Returns `accumulator`.\n","\t     */\n","\t    function baseAggregator(collection, setter, iteratee, accumulator) {\n","\t      baseEach(collection, function(value, key, collection) {\n","\t        setter(accumulator, value, iteratee(value), collection);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.assign` without support for multiple sources\n","\t     * or `customizer` functions.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseAssign(object, source) {\n","\t      return object && copyObject(source, keys(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.assignIn` without support for multiple sources\n","\t     * or `customizer` functions.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseAssignIn(object, source) {\n","\t      return object && copyObject(source, keysIn(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `assignValue` and `assignMergeValue` without\n","\t     * value checks.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function baseAssignValue(object, key, value) {\n","\t      if (key == '__proto__' && defineProperty) {\n","\t        defineProperty(object, key, {\n","\t          'configurable': true,\n","\t          'enumerable': true,\n","\t          'value': value,\n","\t          'writable': true\n","\t        });\n","\t      } else {\n","\t        object[key] = value;\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.at` without support for individual paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @returns {Array} Returns the picked elements.\n","\t     */\n","\t    function baseAt(object, paths) {\n","\t      var index = -1,\n","\t          length = paths.length,\n","\t          result = Array(length),\n","\t          skip = object == null;\n","\t\n","\t      while (++index < length) {\n","\t        result[index] = skip ? undefined : get(object, paths[index]);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.clamp` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} number The number to clamp.\n","\t     * @param {number} [lower] The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the clamped number.\n","\t     */\n","\t    function baseClamp(number, lower, upper) {\n","\t      if (number === number) {\n","\t        if (upper !== undefined) {\n","\t          number = number <= upper ? number : upper;\n","\t        }\n","\t        if (lower !== undefined) {\n","\t          number = number >= lower ? number : lower;\n","\t        }\n","\t      }\n","\t      return number;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n","\t     * traversed objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to clone.\n","\t     * @param {boolean} bitmask The bitmask flags.\n","\t     *  1 - Deep clone\n","\t     *  2 - Flatten inherited properties\n","\t     *  4 - Clone symbols\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @param {string} [key] The key of `value`.\n","\t     * @param {Object} [object] The parent object of `value`.\n","\t     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n","\t     * @returns {*} Returns the cloned value.\n","\t     */\n","\t    function baseClone(value, bitmask, customizer, key, object, stack) {\n","\t      var result,\n","\t          isDeep = bitmask & CLONE_DEEP_FLAG,\n","\t          isFlat = bitmask & CLONE_FLAT_FLAG,\n","\t          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n","\t\n","\t      if (customizer) {\n","\t        result = object ? customizer(value, key, object, stack) : customizer(value);\n","\t      }\n","\t      if (result !== undefined) {\n","\t        return result;\n","\t      }\n","\t      if (!isObject(value)) {\n","\t        return value;\n","\t      }\n","\t      var isArr = isArray(value);\n","\t      if (isArr) {\n","\t        result = initCloneArray(value);\n","\t        if (!isDeep) {\n","\t          return copyArray(value, result);\n","\t        }\n","\t      } else {\n","\t        var tag = getTag(value),\n","\t            isFunc = tag == funcTag || tag == genTag;\n","\t\n","\t        if (isBuffer(value)) {\n","\t          return cloneBuffer(value, isDeep);\n","\t        }\n","\t        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n","\t          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n","\t          if (!isDeep) {\n","\t            return isFlat\n","\t              ? copySymbolsIn(value, baseAssignIn(result, value))\n","\t              : copySymbols(value, baseAssign(result, value));\n","\t          }\n","\t        } else {\n","\t          if (!cloneableTags[tag]) {\n","\t            return object ? value : {};\n","\t          }\n","\t          result = initCloneByTag(value, tag, isDeep);\n","\t        }\n","\t      }\n","\t      // Check for circular references and return its corresponding clone.\n","\t      stack || (stack = new Stack);\n","\t      var stacked = stack.get(value);\n","\t      if (stacked) {\n","\t        return stacked;\n","\t      }\n","\t      stack.set(value, result);\n","\t\n","\t      if (isSet(value)) {\n","\t        value.forEach(function(subValue) {\n","\t          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n","\t        });\n","\t\n","\t        return result;\n","\t      }\n","\t\n","\t      if (isMap(value)) {\n","\t        value.forEach(function(subValue, key) {\n","\t          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n","\t        });\n","\t\n","\t        return result;\n","\t      }\n","\t\n","\t      var keysFunc = isFull\n","\t        ? (isFlat ? getAllKeysIn : getAllKeys)\n","\t        : (isFlat ? keysIn : keys);\n","\t\n","\t      var props = isArr ? undefined : keysFunc(value);\n","\t      arrayEach(props || value, function(subValue, key) {\n","\t        if (props) {\n","\t          key = subValue;\n","\t          subValue = value[key];\n","\t        }\n","\t        // Recursively populate clone (susceptible to call stack limits).\n","\t        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.conforms` which doesn't clone `source`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseConforms(source) {\n","\t      var props = keys(source);\n","\t      return function(object) {\n","\t        return baseConformsTo(object, source, props);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.conformsTo` which accepts `props` to check.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n","\t     */\n","\t    function baseConformsTo(object, source, props) {\n","\t      var length = props.length;\n","\t      if (object == null) {\n","\t        return !length;\n","\t      }\n","\t      object = Object(object);\n","\t      while (length--) {\n","\t        var key = props[length],\n","\t            predicate = source[key],\n","\t            value = object[key];\n","\t\n","\t        if ((value === undefined && !(key in object)) || !predicate(value)) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n","\t     * to provide to `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @param {Array} args The arguments to provide to `func`.\n","\t     * @returns {number|Object} Returns the timer id or timeout object.\n","\t     */\n","\t    function baseDelay(func, wait, args) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      return setTimeout(function() { func.apply(undefined, args); }, wait);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.difference` without support\n","\t     * for excluding multiple arrays or iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Array} values The values to exclude.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     */\n","\t    function baseDifference(array, values, iteratee, comparator) {\n","\t      var index = -1,\n","\t          includes = arrayIncludes,\n","\t          isCommon = true,\n","\t          length = array.length,\n","\t          result = [],\n","\t          valuesLength = values.length;\n","\t\n","\t      if (!length) {\n","\t        return result;\n","\t      }\n","\t      if (iteratee) {\n","\t        values = arrayMap(values, baseUnary(iteratee));\n","\t      }\n","\t      if (comparator) {\n","\t        includes = arrayIncludesWith;\n","\t        isCommon = false;\n","\t      }\n","\t      else if (values.length >= LARGE_ARRAY_SIZE) {\n","\t        includes = cacheHas;\n","\t        isCommon = false;\n","\t        values = new SetCache(values);\n","\t      }\n","\t      outer:\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee == null ? value : iteratee(value);\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (isCommon && computed === computed) {\n","\t          var valuesIndex = valuesLength;\n","\t          while (valuesIndex--) {\n","\t            if (values[valuesIndex] === computed) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t        else if (!includes(values, computed, comparator)) {\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forEach` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     */\n","\t    var baseEach = createBaseEach(baseForOwn);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     */\n","\t    var baseEachRight = createBaseEach(baseForOwnRight, true);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.every` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t     *  else `false`\n","\t     */\n","\t    function baseEvery(collection, predicate) {\n","\t      var result = true;\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        result = !!predicate(value, index, collection);\n","\t        return result;\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.max` and `_.min` which accepts a\n","\t     * `comparator` to determine the extremum value.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} iteratee The iteratee invoked per iteration.\n","\t     * @param {Function} comparator The comparator used to compare values.\n","\t     * @returns {*} Returns the extremum value.\n","\t     */\n","\t    function baseExtremum(array, iteratee, comparator) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            current = iteratee(value);\n","\t\n","\t        if (current != null && (computed === undefined\n","\t              ? (current === current && !isSymbol(current))\n","\t              : comparator(current, computed)\n","\t            )) {\n","\t          var computed = current,\n","\t              result = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.fill` without an iteratee call guard.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to fill.\n","\t     * @param {*} value The value to fill `array` with.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function baseFill(array, value, start, end) {\n","\t      var length = array.length;\n","\t\n","\t      start = toInteger(start);\n","\t      if (start < 0) {\n","\t        start = -start > length ? 0 : (length + start);\n","\t      }\n","\t      end = (end === undefined || end > length) ? length : toInteger(end);\n","\t      if (end < 0) {\n","\t        end += length;\n","\t      }\n","\t      end = start > end ? 0 : toLength(end);\n","\t      while (start < end) {\n","\t        array[start++] = value;\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.filter` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     */\n","\t    function baseFilter(collection, predicate) {\n","\t      var result = [];\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        if (predicate(value, index, collection)) {\n","\t          result.push(value);\n","\t        }\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.flatten` with support for restricting flattening.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to flatten.\n","\t     * @param {number} depth The maximum recursion depth.\n","\t     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n","\t     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n","\t     * @param {Array} [result=[]] The initial result value.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     */\n","\t    function baseFlatten(array, depth, predicate, isStrict, result) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      predicate || (predicate = isFlattenable);\n","\t      result || (result = []);\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (depth > 0 && predicate(value)) {\n","\t          if (depth > 1) {\n","\t            // Recursively flatten arrays (susceptible to call stack limits).\n","\t            baseFlatten(value, depth - 1, predicate, isStrict, result);\n","\t          } else {\n","\t            arrayPush(result, value);\n","\t          }\n","\t        } else if (!isStrict) {\n","\t          result[result.length] = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `baseForOwn` which iterates over `object`\n","\t     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    var baseFor = createBaseFor();\n","\t\n","\t    /**\n","\t     * This function is like `baseFor` except that it iterates over properties\n","\t     * in the opposite order.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    var baseForRight = createBaseFor(true);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseForOwn(object, iteratee) {\n","\t      return object && baseFor(object, iteratee, keys);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseForOwnRight(object, iteratee) {\n","\t      return object && baseForRight(object, iteratee, keys);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.functions` which creates an array of\n","\t     * `object` function property names filtered from `props`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Array} props The property names to filter.\n","\t     * @returns {Array} Returns the function names.\n","\t     */\n","\t    function baseFunctions(object, props) {\n","\t      return arrayFilter(props, function(key) {\n","\t        return isFunction(object[key]);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.get` without support for default values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {*} Returns the resolved value.\n","\t     */\n","\t    function baseGet(object, path) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = 0,\n","\t          length = path.length;\n","\t\n","\t      while (object != null && index < length) {\n","\t        object = object[toKey(path[index++])];\n","\t      }\n","\t      return (index && index == length) ? object : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n","\t     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n","\t     * symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n","\t      var result = keysFunc(object);\n","\t      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `getTag` without fallbacks for buggy environments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the `toStringTag`.\n","\t     */\n","\t    function baseGetTag(value) {\n","\t      if (value == null) {\n","\t        return value === undefined ? undefinedTag : nullTag;\n","\t      }\n","\t      return (symToStringTag && symToStringTag in Object(value))\n","\t        ? getRawTag(value)\n","\t        : objectToString(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.gt` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseGt(value, other) {\n","\t      return value > other;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.has` without support for deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} [object] The object to query.\n","\t     * @param {Array|string} key The key to check.\n","\t     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n","\t     */\n","\t    function baseHas(object, key) {\n","\t      return object != null && hasOwnProperty.call(object, key);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.hasIn` without support for deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} [object] The object to query.\n","\t     * @param {Array|string} key The key to check.\n","\t     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n","\t     */\n","\t    function baseHasIn(object, key) {\n","\t      return object != null && key in Object(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.inRange` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} number The number to check.\n","\t     * @param {number} start The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n","\t     */\n","\t    function baseInRange(number, start, end) {\n","\t      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.intersection`, without support\n","\t     * for iteratee shorthands, that accepts an array of arrays to inspect.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} arrays The arrays to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of shared values.\n","\t     */\n","\t    function baseIntersection(arrays, iteratee, comparator) {\n","\t      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n","\t          length = arrays[0].length,\n","\t          othLength = arrays.length,\n","\t          othIndex = othLength,\n","\t          caches = Array(othLength),\n","\t          maxLength = Infinity,\n","\t          result = [];\n","\t\n","\t      while (othIndex--) {\n","\t        var array = arrays[othIndex];\n","\t        if (othIndex && iteratee) {\n","\t          array = arrayMap(array, baseUnary(iteratee));\n","\t        }\n","\t        maxLength = nativeMin(array.length, maxLength);\n","\t        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n","\t          ? new SetCache(othIndex && array)\n","\t          : undefined;\n","\t      }\n","\t      array = arrays[0];\n","\t\n","\t      var index = -1,\n","\t          seen = caches[0];\n","\t\n","\t      outer:\n","\t      while (++index < length && result.length < maxLength) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (!(seen\n","\t              ? cacheHas(seen, computed)\n","\t              : includes(result, computed, comparator)\n","\t            )) {\n","\t          othIndex = othLength;\n","\t          while (--othIndex) {\n","\t            var cache = caches[othIndex];\n","\t            if (!(cache\n","\t                  ? cacheHas(cache, computed)\n","\t                  : includes(arrays[othIndex], computed, comparator))\n","\t                ) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          if (seen) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.invert` and `_.invertBy` which inverts\n","\t     * `object` with values transformed by `iteratee` and set by `setter`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} setter The function to set `accumulator` values.\n","\t     * @param {Function} iteratee The iteratee to transform values.\n","\t     * @param {Object} accumulator The initial inverted object.\n","\t     * @returns {Function} Returns `accumulator`.\n","\t     */\n","\t    function baseInverter(object, setter, iteratee, accumulator) {\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        setter(accumulator, iteratee(value), key, object);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.invoke` without support for individual\n","\t     * method arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {Array} args The arguments to invoke the method with.\n","\t     * @returns {*} Returns the result of the invoked method.\n","\t     */\n","\t    function baseInvoke(object, path, args) {\n","\t      path = castPath(path, object);\n","\t      object = parent(object, path);\n","\t      var func = object == null ? object : object[toKey(last(path))];\n","\t      return func == null ? undefined : apply(func, object, args);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isArguments`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n","\t     */\n","\t    function baseIsArguments(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == argsTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n","\t     */\n","\t    function baseIsArrayBuffer(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isDate` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n","\t     */\n","\t    function baseIsDate(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == dateTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isEqual` which supports partial comparisons\n","\t     * and tracks traversed objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @param {boolean} bitmask The bitmask flags.\n","\t     *  1 - Unordered comparison\n","\t     *  2 - Partial comparison\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     */\n","\t    function baseIsEqual(value, other, bitmask, customizer, stack) {\n","\t      if (value === other) {\n","\t        return true;\n","\t      }\n","\t      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n","\t        return value !== value && other !== other;\n","\t      }\n","\t      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqual` for arrays and objects which performs\n","\t     * deep comparisons and tracks traversed objects enabling objects with circular\n","\t     * references to be compared.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n","\t      var objIsArr = isArray(object),\n","\t          othIsArr = isArray(other),\n","\t          objTag = objIsArr ? arrayTag : getTag(object),\n","\t          othTag = othIsArr ? arrayTag : getTag(other);\n","\t\n","\t      objTag = objTag == argsTag ? objectTag : objTag;\n","\t      othTag = othTag == argsTag ? objectTag : othTag;\n","\t\n","\t      var objIsObj = objTag == objectTag,\n","\t          othIsObj = othTag == objectTag,\n","\t          isSameTag = objTag == othTag;\n","\t\n","\t      if (isSameTag && isBuffer(object)) {\n","\t        if (!isBuffer(other)) {\n","\t          return false;\n","\t        }\n","\t        objIsArr = true;\n","\t        objIsObj = false;\n","\t      }\n","\t      if (isSameTag && !objIsObj) {\n","\t        stack || (stack = new Stack);\n","\t        return (objIsArr || isTypedArray(object))\n","\t          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n","\t          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n","\t      }\n","\t      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n","\t        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n","\t            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n","\t\n","\t        if (objIsWrapped || othIsWrapped) {\n","\t          var objUnwrapped = objIsWrapped ? object.value() : object,\n","\t              othUnwrapped = othIsWrapped ? other.value() : other;\n","\t\n","\t          stack || (stack = new Stack);\n","\t          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n","\t        }\n","\t      }\n","\t      if (!isSameTag) {\n","\t        return false;\n","\t      }\n","\t      stack || (stack = new Stack);\n","\t      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isMap` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n","\t     */\n","\t    function baseIsMap(value) {\n","\t      return isObjectLike(value) && getTag(value) == mapTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @param {Array} matchData The property names, values, and compare flags to match.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     */\n","\t    function baseIsMatch(object, source, matchData, customizer) {\n","\t      var index = matchData.length,\n","\t          length = index,\n","\t          noCustomizer = !customizer;\n","\t\n","\t      if (object == null) {\n","\t        return !length;\n","\t      }\n","\t      object = Object(object);\n","\t      while (index--) {\n","\t        var data = matchData[index];\n","\t        if ((noCustomizer && data[2])\n","\t              ? data[1] !== object[data[0]]\n","\t              : !(data[0] in object)\n","\t            ) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      while (++index < length) {\n","\t        data = matchData[index];\n","\t        var key = data[0],\n","\t            objValue = object[key],\n","\t            srcValue = data[1];\n","\t\n","\t        if (noCustomizer && data[2]) {\n","\t          if (objValue === undefined && !(key in object)) {\n","\t            return false;\n","\t          }\n","\t        } else {\n","\t          var stack = new Stack;\n","\t          if (customizer) {\n","\t            var result = customizer(objValue, srcValue, key, object, source, stack);\n","\t          }\n","\t          if (!(result === undefined\n","\t                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n","\t                : result\n","\t              )) {\n","\t            return false;\n","\t          }\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isNative` without bad shim checks.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a native function,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseIsNative(value) {\n","\t      if (!isObject(value) || isMasked(value)) {\n","\t        return false;\n","\t      }\n","\t      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n","\t      return pattern.test(toSource(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isRegExp` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n","\t     */\n","\t    function baseIsRegExp(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isSet` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n","\t     */\n","\t    function baseIsSet(value) {\n","\t      return isObjectLike(value) && getTag(value) == setTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n","\t     */\n","\t    function baseIsTypedArray(value) {\n","\t      return isObjectLike(value) &&\n","\t        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.iteratee`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} [value=_.identity] The value to convert to an iteratee.\n","\t     * @returns {Function} Returns the iteratee.\n","\t     */\n","\t    function baseIteratee(value) {\n","\t      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n","\t      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n","\t      if (typeof value == 'function') {\n","\t        return value;\n","\t      }\n","\t      if (value == null) {\n","\t        return identity;\n","\t      }\n","\t      if (typeof value == 'object') {\n","\t        return isArray(value)\n","\t          ? baseMatchesProperty(value[0], value[1])\n","\t          : baseMatches(value);\n","\t      }\n","\t      return property(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function baseKeys(object) {\n","\t      if (!isPrototype(object)) {\n","\t        return nativeKeys(object);\n","\t      }\n","\t      var result = [];\n","\t      for (var key in Object(object)) {\n","\t        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function baseKeysIn(object) {\n","\t      if (!isObject(object)) {\n","\t        return nativeKeysIn(object);\n","\t      }\n","\t      var isProto = isPrototype(object),\n","\t          result = [];\n","\t\n","\t      for (var key in object) {\n","\t        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.lt` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than `other`,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseLt(value, other) {\n","\t      return value < other;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.map` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array} Returns the new mapped array.\n","\t     */\n","\t    function baseMap(collection, iteratee) {\n","\t      var index = -1,\n","\t          result = isArrayLike(collection) ? Array(collection.length) : [];\n","\t\n","\t      baseEach(collection, function(value, key, collection) {\n","\t        result[++index] = iteratee(value, key, collection);\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.matches` which doesn't clone `source`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseMatches(source) {\n","\t      var matchData = getMatchData(source);\n","\t      if (matchData.length == 1 && matchData[0][2]) {\n","\t        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n","\t      }\n","\t      return function(object) {\n","\t        return object === source || baseIsMatch(object, source, matchData);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} path The path of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseMatchesProperty(path, srcValue) {\n","\t      if (isKey(path) && isStrictComparable(srcValue)) {\n","\t        return matchesStrictComparable(toKey(path), srcValue);\n","\t      }\n","\t      return function(object) {\n","\t        var objValue = get(object, path);\n","\t        return (objValue === undefined && objValue === srcValue)\n","\t          ? hasIn(object, path)\n","\t          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.merge` without support for multiple sources.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @param {number} srcIndex The index of `source`.\n","\t     * @param {Function} [customizer] The function to customize merged values.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     */\n","\t    function baseMerge(object, source, srcIndex, customizer, stack) {\n","\t      if (object === source) {\n","\t        return;\n","\t      }\n","\t      baseFor(source, function(srcValue, key) {\n","\t        if (isObject(srcValue)) {\n","\t          stack || (stack = new Stack);\n","\t          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n","\t        }\n","\t        else {\n","\t          var newValue = customizer\n","\t            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n","\t            : undefined;\n","\t\n","\t          if (newValue === undefined) {\n","\t            newValue = srcValue;\n","\t          }\n","\t          assignMergeValue(object, key, newValue);\n","\t        }\n","\t      }, keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseMerge` for arrays and objects which performs\n","\t     * deep merges and tracks traversed objects enabling objects with circular\n","\t     * references to be merged.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @param {string} key The key of the value to merge.\n","\t     * @param {number} srcIndex The index of `source`.\n","\t     * @param {Function} mergeFunc The function to merge values.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     */\n","\t    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n","\t      var objValue = safeGet(object, key),\n","\t          srcValue = safeGet(source, key),\n","\t          stacked = stack.get(srcValue);\n","\t\n","\t      if (stacked) {\n","\t        assignMergeValue(object, key, stacked);\n","\t        return;\n","\t      }\n","\t      var newValue = customizer\n","\t        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n","\t        : undefined;\n","\t\n","\t      var isCommon = newValue === undefined;\n","\t\n","\t      if (isCommon) {\n","\t        var isArr = isArray(srcValue),\n","\t            isBuff = !isArr && isBuffer(srcValue),\n","\t            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n","\t\n","\t        newValue = srcValue;\n","\t        if (isArr || isBuff || isTyped) {\n","\t          if (isArray(objValue)) {\n","\t            newValue = objValue;\n","\t          }\n","\t          else if (isArrayLikeObject(objValue)) {\n","\t            newValue = copyArray(objValue);\n","\t          }\n","\t          else if (isBuff) {\n","\t            isCommon = false;\n","\t            newValue = cloneBuffer(srcValue, true);\n","\t          }\n","\t          else if (isTyped) {\n","\t            isCommon = false;\n","\t            newValue = cloneTypedArray(srcValue, true);\n","\t          }\n","\t          else {\n","\t            newValue = [];\n","\t          }\n","\t        }\n","\t        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n","\t          newValue = objValue;\n","\t          if (isArguments(objValue)) {\n","\t            newValue = toPlainObject(objValue);\n","\t          }\n","\t          else if (!isObject(objValue) || isFunction(objValue)) {\n","\t            newValue = initCloneObject(srcValue);\n","\t          }\n","\t        }\n","\t        else {\n","\t          isCommon = false;\n","\t        }\n","\t      }\n","\t      if (isCommon) {\n","\t        // Recursively merge objects and arrays (susceptible to call stack limits).\n","\t        stack.set(srcValue, newValue);\n","\t        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n","\t        stack['delete'](srcValue);\n","\t      }\n","\t      assignMergeValue(object, key, newValue);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.nth` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} n The index of the element to return.\n","\t     * @returns {*} Returns the nth element of `array`.\n","\t     */\n","\t    function baseNth(array, n) {\n","\t      var length = array.length;\n","\t      if (!length) {\n","\t        return;\n","\t      }\n","\t      n += n < 0 ? length : 0;\n","\t      return isIndex(n, length) ? array[n] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.orderBy` without param guards.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n","\t     * @param {string[]} orders The sort orders of `iteratees`.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     */\n","\t    function baseOrderBy(collection, iteratees, orders) {\n","\t      var index = -1;\n","\t      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n","\t\n","\t      var result = baseMap(collection, function(value, key, collection) {\n","\t        var criteria = arrayMap(iteratees, function(iteratee) {\n","\t          return iteratee(value);\n","\t        });\n","\t        return { 'criteria': criteria, 'index': ++index, 'value': value };\n","\t      });\n","\t\n","\t      return baseSortBy(result, function(object, other) {\n","\t        return compareMultiple(object, other, orders);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pick` without support for individual\n","\t     * property identifiers.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The source object.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function basePick(object, paths) {\n","\t      return basePickBy(object, paths, function(value, path) {\n","\t        return hasIn(object, path);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The source object.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @param {Function} predicate The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function basePickBy(object, paths, predicate) {\n","\t      var index = -1,\n","\t          length = paths.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var path = paths[index],\n","\t            value = baseGet(object, path);\n","\t\n","\t        if (predicate(value, path)) {\n","\t          baseSet(result, castPath(path, object), value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseProperty` which supports deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     */\n","\t    function basePropertyDeep(path) {\n","\t      return function(object) {\n","\t        return baseGet(object, path);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pullAllBy` without support for iteratee\n","\t     * shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function basePullAll(array, values, iteratee, comparator) {\n","\t      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n","\t          index = -1,\n","\t          length = values.length,\n","\t          seen = array;\n","\t\n","\t      if (array === values) {\n","\t        values = copyArray(values);\n","\t      }\n","\t      if (iteratee) {\n","\t        seen = arrayMap(array, baseUnary(iteratee));\n","\t      }\n","\t      while (++index < length) {\n","\t        var fromIndex = 0,\n","\t            value = values[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n","\t          if (seen !== array) {\n","\t            splice.call(seen, fromIndex, 1);\n","\t          }\n","\t          splice.call(array, fromIndex, 1);\n","\t        }\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pullAt` without support for individual\n","\t     * indexes or capturing the removed elements.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {number[]} indexes The indexes of elements to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function basePullAt(array, indexes) {\n","\t      var length = array ? indexes.length : 0,\n","\t          lastIndex = length - 1;\n","\t\n","\t      while (length--) {\n","\t        var index = indexes[length];\n","\t        if (length == lastIndex || index !== previous) {\n","\t          var previous = index;\n","\t          if (isIndex(index)) {\n","\t            splice.call(array, index, 1);\n","\t          } else {\n","\t            baseUnset(array, index);\n","\t          }\n","\t        }\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.random` without support for returning\n","\t     * floating-point numbers.\n","\t     *\n","\t     * @private\n","\t     * @param {number} lower The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the random number.\n","\t     */\n","\t    function baseRandom(lower, upper) {\n","\t      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n","\t     * coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} start The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} step The value to increment or decrement by.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     */\n","\t    function baseRange(start, end, step, fromRight) {\n","\t      var index = -1,\n","\t          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n","\t          result = Array(length);\n","\t\n","\t      while (length--) {\n","\t        result[fromRight ? length : ++index] = start;\n","\t        start += step;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.repeat` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {string} string The string to repeat.\n","\t     * @param {number} n The number of times to repeat the string.\n","\t     * @returns {string} Returns the repeated string.\n","\t     */\n","\t    function baseRepeat(string, n) {\n","\t      var result = '';\n","\t      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n","\t        return result;\n","\t      }\n","\t      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n","\t      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n","\t      do {\n","\t        if (n % 2) {\n","\t          result += string;\n","\t        }\n","\t        n = nativeFloor(n / 2);\n","\t        if (n) {\n","\t          string += string;\n","\t        }\n","\t      } while (n);\n","\t\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function baseRest(func, start) {\n","\t      return setToString(overRest(func, start, identity), func + '');\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sample`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     */\n","\t    function baseSample(collection) {\n","\t      return arraySample(values(collection));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sampleSize` without param guards.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @param {number} n The number of elements to sample.\n","\t     * @returns {Array} Returns the random elements.\n","\t     */\n","\t    function baseSampleSize(collection, n) {\n","\t      var array = values(collection);\n","\t      return shuffleSelf(array, baseClamp(n, 0, array.length));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.set`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @param {Function} [customizer] The function to customize path creation.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseSet(object, path, value, customizer) {\n","\t      if (!isObject(object)) {\n","\t        return object;\n","\t      }\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length,\n","\t          lastIndex = length - 1,\n","\t          nested = object;\n","\t\n","\t      while (nested != null && ++index < length) {\n","\t        var key = toKey(path[index]),\n","\t            newValue = value;\n","\t\n","\t        if (index != lastIndex) {\n","\t          var objValue = nested[key];\n","\t          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n","\t          if (newValue === undefined) {\n","\t            newValue = isObject(objValue)\n","\t              ? objValue\n","\t              : (isIndex(path[index + 1]) ? [] : {});\n","\t          }\n","\t        }\n","\t        assignValue(nested, key, newValue);\n","\t        nested = nested[key];\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `setData` without support for hot loop shorting.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to associate metadata with.\n","\t     * @param {*} data The metadata.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var baseSetData = !metaMap ? identity : function(func, data) {\n","\t      metaMap.set(func, data);\n","\t      return func;\n","\t    };\n","\t\n","\t    /**\n","\t     * The base implementation of `setToString` without support for hot loop shorting.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to modify.\n","\t     * @param {Function} string The `toString` result.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var baseSetToString = !defineProperty ? identity : function(func, string) {\n","\t      return defineProperty(func, 'toString', {\n","\t        'configurable': true,\n","\t        'enumerable': false,\n","\t        'value': constant(string),\n","\t        'writable': true\n","\t      });\n","\t    };\n","\t\n","\t    /**\n","\t     * The base implementation of `_.shuffle`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     */\n","\t    function baseShuffle(collection) {\n","\t      return shuffleSelf(values(collection));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.slice` without an iteratee call guard.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to slice.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function baseSlice(array, start, end) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      if (start < 0) {\n","\t        start = -start > length ? 0 : (length + start);\n","\t      }\n","\t      end = end > length ? length : end;\n","\t      if (end < 0) {\n","\t        end += length;\n","\t      }\n","\t      length = start > end ? 0 : ((end - start) >>> 0);\n","\t      start >>>= 0;\n","\t\n","\t      var result = Array(length);\n","\t      while (++index < length) {\n","\t        result[index] = array[index + start];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.some` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseSome(collection, predicate) {\n","\t      var result;\n","\t\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        result = predicate(value, index, collection);\n","\t        return !result;\n","\t      });\n","\t      return !!result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n","\t     * performs a binary search of `array` to determine the index at which `value`\n","\t     * should be inserted into `array` in order to maintain its sort order.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     */\n","\t    function baseSortedIndex(array, value, retHighest) {\n","\t      var low = 0,\n","\t          high = array == null ? low : array.length;\n","\t\n","\t      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n","\t        while (low < high) {\n","\t          var mid = (low + high) >>> 1,\n","\t              computed = array[mid];\n","\t\n","\t          if (computed !== null && !isSymbol(computed) &&\n","\t              (retHighest ? (computed <= value) : (computed < value))) {\n","\t            low = mid + 1;\n","\t          } else {\n","\t            high = mid;\n","\t          }\n","\t        }\n","\t        return high;\n","\t      }\n","\t      return baseSortedIndexBy(array, value, identity, retHighest);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n","\t     * which invokes `iteratee` for `value` and each element of `array` to compute\n","\t     * their sort ranking. The iteratee is invoked with one argument; (value).\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} iteratee The iteratee invoked per element.\n","\t     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     */\n","\t    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n","\t      value = iteratee(value);\n","\t\n","\t      var low = 0,\n","\t          high = array == null ? 0 : array.length,\n","\t          valIsNaN = value !== value,\n","\t          valIsNull = value === null,\n","\t          valIsSymbol = isSymbol(value),\n","\t          valIsUndefined = value === undefined;\n","\t\n","\t      while (low < high) {\n","\t        var mid = nativeFloor((low + high) / 2),\n","\t            computed = iteratee(array[mid]),\n","\t            othIsDefined = computed !== undefined,\n","\t            othIsNull = computed === null,\n","\t            othIsReflexive = computed === computed,\n","\t            othIsSymbol = isSymbol(computed);\n","\t\n","\t        if (valIsNaN) {\n","\t          var setLow = retHighest || othIsReflexive;\n","\t        } else if (valIsUndefined) {\n","\t          setLow = othIsReflexive && (retHighest || othIsDefined);\n","\t        } else if (valIsNull) {\n","\t          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n","\t        } else if (valIsSymbol) {\n","\t          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n","\t        } else if (othIsNull || othIsSymbol) {\n","\t          setLow = false;\n","\t        } else {\n","\t          setLow = retHighest ? (computed <= value) : (computed < value);\n","\t        }\n","\t        if (setLow) {\n","\t          low = mid + 1;\n","\t        } else {\n","\t          high = mid;\n","\t        }\n","\t      }\n","\t      return nativeMin(high, MAX_ARRAY_INDEX);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n","\t     * support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     */\n","\t    function baseSortedUniq(array, iteratee) {\n","\t      var index = -1,\n","\t          length = array.length,\n","\t          resIndex = 0,\n","\t          result = [];\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        if (!index || !eq(computed, seen)) {\n","\t          var seen = computed;\n","\t          result[resIndex++] = value === 0 ? 0 : value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.toNumber` which doesn't ensure correct\n","\t     * conversions of binary, hexadecimal, or octal string values.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to process.\n","\t     * @returns {number} Returns the number.\n","\t     */\n","\t    function baseToNumber(value) {\n","\t      if (typeof value == 'number') {\n","\t        return value;\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return NAN;\n","\t      }\n","\t      return +value;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.toString` which doesn't convert nullish\n","\t     * values to empty strings.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to process.\n","\t     * @returns {string} Returns the string.\n","\t     */\n","\t    function baseToString(value) {\n","\t      // Exit early for strings to avoid a performance hit in some environments.\n","\t      if (typeof value == 'string') {\n","\t        return value;\n","\t      }\n","\t      if (isArray(value)) {\n","\t        // Recursively convert values (susceptible to call stack limits).\n","\t        return arrayMap(value, baseToString) + '';\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return symbolToString ? symbolToString.call(value) : '';\n","\t      }\n","\t      var result = (value + '');\n","\t      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     */\n","\t    function baseUniq(array, iteratee, comparator) {\n","\t      var index = -1,\n","\t          includes = arrayIncludes,\n","\t          length = array.length,\n","\t          isCommon = true,\n","\t          result = [],\n","\t          seen = result;\n","\t\n","\t      if (comparator) {\n","\t        isCommon = false;\n","\t        includes = arrayIncludesWith;\n","\t      }\n","\t      else if (length >= LARGE_ARRAY_SIZE) {\n","\t        var set = iteratee ? null : createSet(array);\n","\t        if (set) {\n","\t          return setToArray(set);\n","\t        }\n","\t        isCommon = false;\n","\t        includes = cacheHas;\n","\t        seen = new SetCache;\n","\t      }\n","\t      else {\n","\t        seen = iteratee ? [] : result;\n","\t      }\n","\t      outer:\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (isCommon && computed === computed) {\n","\t          var seenIndex = seen.length;\n","\t          while (seenIndex--) {\n","\t            if (seen[seenIndex] === computed) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          if (iteratee) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t        else if (!includes(seen, computed, comparator)) {\n","\t          if (seen !== result) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.unset`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The property path to unset.\n","\t     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n","\t     */\n","\t    function baseUnset(object, path) {\n","\t      path = castPath(path, object);\n","\t      object = parent(object, path);\n","\t      return object == null || delete object[toKey(last(path))];\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.update`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to update.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @param {Function} [customizer] The function to customize path creation.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseUpdate(object, path, updater, customizer) {\n","\t      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n","\t     * without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function baseWhile(array, predicate, isDrop, fromRight) {\n","\t      var length = array.length,\n","\t          index = fromRight ? length : -1;\n","\t\n","\t      while ((fromRight ? index-- : ++index < length) &&\n","\t        predicate(array[index], index, array)) {}\n","\t\n","\t      return isDrop\n","\t        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n","\t        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `wrapperValue` which returns the result of\n","\t     * performing a sequence of actions on the unwrapped `value`, where each\n","\t     * successive action is supplied the return value of the previous.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The unwrapped value.\n","\t     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n","\t     * @returns {*} Returns the resolved value.\n","\t     */\n","\t    function baseWrapperValue(value, actions) {\n","\t      var result = value;\n","\t      if (result instanceof LazyWrapper) {\n","\t        result = result.value();\n","\t      }\n","\t      return arrayReduce(actions, function(result, action) {\n","\t        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n","\t      }, result);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.xor`, without support for\n","\t     * iteratee shorthands, that accepts an array of arrays to inspect.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} arrays The arrays to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of values.\n","\t     */\n","\t    function baseXor(arrays, iteratee, comparator) {\n","\t      var length = arrays.length;\n","\t      if (length < 2) {\n","\t        return length ? baseUniq(arrays[0]) : [];\n","\t      }\n","\t      var index = -1,\n","\t          result = Array(length);\n","\t\n","\t      while (++index < length) {\n","\t        var array = arrays[index],\n","\t            othIndex = -1;\n","\t\n","\t        while (++othIndex < length) {\n","\t          if (othIndex != index) {\n","\t            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n","\t          }\n","\t        }\n","\t      }\n","\t      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n","\t    }\n","\t\n","\t    /**\n","\t     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} props The property identifiers.\n","\t     * @param {Array} values The property values.\n","\t     * @param {Function} assignFunc The function to assign values.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function baseZipObject(props, values, assignFunc) {\n","\t      var index = -1,\n","\t          length = props.length,\n","\t          valsLength = values.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var value = index < valsLength ? values[index] : undefined;\n","\t        assignFunc(result, props[index], value);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to an empty array if it's not an array like object.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Array|Object} Returns the cast array-like object.\n","\t     */\n","\t    function castArrayLikeObject(value) {\n","\t      return isArrayLikeObject(value) ? value : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to `identity` if it's not a function.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Function} Returns cast function.\n","\t     */\n","\t    function castFunction(value) {\n","\t      return typeof value == 'function' ? value : identity;\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to a path array if it's not one.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @param {Object} [object] The object to query keys on.\n","\t     * @returns {Array} Returns the cast property path array.\n","\t     */\n","\t    function castPath(value, object) {\n","\t      if (isArray(value)) {\n","\t        return value;\n","\t      }\n","\t      return isKey(value, object) ? [value] : stringToPath(toString(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * A `baseRest` alias which can be replaced with `identity` by module\n","\t     * replacement plugins.\n","\t     *\n","\t     * @private\n","\t     * @type {Function}\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    var castRest = baseRest;\n","\t\n","\t    /**\n","\t     * Casts `array` to a slice if it's needed.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {number} start The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the cast slice.\n","\t     */\n","\t    function castSlice(array, start, end) {\n","\t      var length = array.length;\n","\t      end = end === undefined ? length : end;\n","\t      return (!start && end >= length) ? array : baseSlice(array, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n","\t     *\n","\t     * @private\n","\t     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n","\t     */\n","\t    var clearTimeout = ctxClearTimeout || function(id) {\n","\t      return root.clearTimeout(id);\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates a clone of  `buffer`.\n","\t     *\n","\t     * @private\n","\t     * @param {Buffer} buffer The buffer to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Buffer} Returns the cloned buffer.\n","\t     */\n","\t    function cloneBuffer(buffer, isDeep) {\n","\t      if (isDeep) {\n","\t        return buffer.slice();\n","\t      }\n","\t      var length = buffer.length,\n","\t          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n","\t\n","\t      buffer.copy(result);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `arrayBuffer`.\n","\t     *\n","\t     * @private\n","\t     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n","\t     * @returns {ArrayBuffer} Returns the cloned array buffer.\n","\t     */\n","\t    function cloneArrayBuffer(arrayBuffer) {\n","\t      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n","\t      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `dataView`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} dataView The data view to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the cloned data view.\n","\t     */\n","\t    function cloneDataView(dataView, isDeep) {\n","\t      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n","\t      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `regexp`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} regexp The regexp to clone.\n","\t     * @returns {Object} Returns the cloned regexp.\n","\t     */\n","\t    function cloneRegExp(regexp) {\n","\t      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n","\t      result.lastIndex = regexp.lastIndex;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the `symbol` object.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} symbol The symbol object to clone.\n","\t     * @returns {Object} Returns the cloned symbol object.\n","\t     */\n","\t    function cloneSymbol(symbol) {\n","\t      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `typedArray`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} typedArray The typed array to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the cloned typed array.\n","\t     */\n","\t    function cloneTypedArray(typedArray, isDeep) {\n","\t      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n","\t      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Compares values to sort them in ascending order.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {number} Returns the sort order indicator for `value`.\n","\t     */\n","\t    function compareAscending(value, other) {\n","\t      if (value !== other) {\n","\t        var valIsDefined = value !== undefined,\n","\t            valIsNull = value === null,\n","\t            valIsReflexive = value === value,\n","\t            valIsSymbol = isSymbol(value);\n","\t\n","\t        var othIsDefined = other !== undefined,\n","\t            othIsNull = other === null,\n","\t            othIsReflexive = other === other,\n","\t            othIsSymbol = isSymbol(other);\n","\t\n","\t        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n","\t            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n","\t            (valIsNull && othIsDefined && othIsReflexive) ||\n","\t            (!valIsDefined && othIsReflexive) ||\n","\t            !valIsReflexive) {\n","\t          return 1;\n","\t        }\n","\t        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n","\t            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n","\t            (othIsNull && valIsDefined && valIsReflexive) ||\n","\t            (!othIsDefined && valIsReflexive) ||\n","\t            !othIsReflexive) {\n","\t          return -1;\n","\t        }\n","\t      }\n","\t      return 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.orderBy` to compare multiple properties of a value to another\n","\t     * and stable sort them.\n","\t     *\n","\t     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n","\t     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n","\t     * of corresponding values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {boolean[]|string[]} orders The order to sort by for each property.\n","\t     * @returns {number} Returns the sort order indicator for `object`.\n","\t     */\n","\t    function compareMultiple(object, other, orders) {\n","\t      var index = -1,\n","\t          objCriteria = object.criteria,\n","\t          othCriteria = other.criteria,\n","\t          length = objCriteria.length,\n","\t          ordersLength = orders.length;\n","\t\n","\t      while (++index < length) {\n","\t        var result = compareAscending(objCriteria[index], othCriteria[index]);\n","\t        if (result) {\n","\t          if (index >= ordersLength) {\n","\t            return result;\n","\t          }\n","\t          var order = orders[index];\n","\t          return result * (order == 'desc' ? -1 : 1);\n","\t        }\n","\t      }\n","\t      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n","\t      // that causes it, under certain circumstances, to provide the same value for\n","\t      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n","\t      // for more details.\n","\t      //\n","\t      // This also ensures a stable sort in V8 and other engines.\n","\t      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n","\t      return object.index - other.index;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array that is the composition of partially applied arguments,\n","\t     * placeholders, and provided arguments into a single array of arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} args The provided arguments.\n","\t     * @param {Array} partials The arguments to prepend to those provided.\n","\t     * @param {Array} holders The `partials` placeholder indexes.\n","\t     * @params {boolean} [isCurried] Specify composing for a curried function.\n","\t     * @returns {Array} Returns the new array of composed arguments.\n","\t     */\n","\t    function composeArgs(args, partials, holders, isCurried) {\n","\t      var argsIndex = -1,\n","\t          argsLength = args.length,\n","\t          holdersLength = holders.length,\n","\t          leftIndex = -1,\n","\t          leftLength = partials.length,\n","\t          rangeLength = nativeMax(argsLength - holdersLength, 0),\n","\t          result = Array(leftLength + rangeLength),\n","\t          isUncurried = !isCurried;\n","\t\n","\t      while (++leftIndex < leftLength) {\n","\t        result[leftIndex] = partials[leftIndex];\n","\t      }\n","\t      while (++argsIndex < holdersLength) {\n","\t        if (isUncurried || argsIndex < argsLength) {\n","\t          result[holders[argsIndex]] = args[argsIndex];\n","\t        }\n","\t      }\n","\t      while (rangeLength--) {\n","\t        result[leftIndex++] = args[argsIndex++];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like `composeArgs` except that the arguments composition\n","\t     * is tailored for `_.partialRight`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} args The provided arguments.\n","\t     * @param {Array} partials The arguments to append to those provided.\n","\t     * @param {Array} holders The `partials` placeholder indexes.\n","\t     * @params {boolean} [isCurried] Specify composing for a curried function.\n","\t     * @returns {Array} Returns the new array of composed arguments.\n","\t     */\n","\t    function composeArgsRight(args, partials, holders, isCurried) {\n","\t      var argsIndex = -1,\n","\t          argsLength = args.length,\n","\t          holdersIndex = -1,\n","\t          holdersLength = holders.length,\n","\t          rightIndex = -1,\n","\t          rightLength = partials.length,\n","\t          rangeLength = nativeMax(argsLength - holdersLength, 0),\n","\t          result = Array(rangeLength + rightLength),\n","\t          isUncurried = !isCurried;\n","\t\n","\t      while (++argsIndex < rangeLength) {\n","\t        result[argsIndex] = args[argsIndex];\n","\t      }\n","\t      var offset = argsIndex;\n","\t      while (++rightIndex < rightLength) {\n","\t        result[offset + rightIndex] = partials[rightIndex];\n","\t      }\n","\t      while (++holdersIndex < holdersLength) {\n","\t        if (isUncurried || argsIndex < argsLength) {\n","\t          result[offset + holders[holdersIndex]] = args[argsIndex++];\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies the values of `source` to `array`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} source The array to copy values from.\n","\t     * @param {Array} [array=[]] The array to copy values to.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function copyArray(source, array) {\n","\t      var index = -1,\n","\t          length = source.length;\n","\t\n","\t      array || (array = Array(length));\n","\t      while (++index < length) {\n","\t        array[index] = source[index];\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies properties of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy properties from.\n","\t     * @param {Array} props The property identifiers to copy.\n","\t     * @param {Object} [object={}] The object to copy properties to.\n","\t     * @param {Function} [customizer] The function to customize copied values.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copyObject(source, props, object, customizer) {\n","\t      var isNew = !object;\n","\t      object || (object = {});\n","\t\n","\t      var index = -1,\n","\t          length = props.length;\n","\t\n","\t      while (++index < length) {\n","\t        var key = props[index];\n","\t\n","\t        var newValue = customizer\n","\t          ? customizer(object[key], source[key], key, object, source)\n","\t          : undefined;\n","\t\n","\t        if (newValue === undefined) {\n","\t          newValue = source[key];\n","\t        }\n","\t        if (isNew) {\n","\t          baseAssignValue(object, key, newValue);\n","\t        } else {\n","\t          assignValue(object, key, newValue);\n","\t        }\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies own symbols of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy symbols from.\n","\t     * @param {Object} [object={}] The object to copy symbols to.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copySymbols(source, object) {\n","\t      return copyObject(source, getSymbols(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies own and inherited symbols of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy symbols from.\n","\t     * @param {Object} [object={}] The object to copy symbols to.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copySymbolsIn(source, object) {\n","\t      return copyObject(source, getSymbolsIn(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.groupBy`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} setter The function to set accumulator values.\n","\t     * @param {Function} [initializer] The accumulator object initializer.\n","\t     * @returns {Function} Returns the new aggregator function.\n","\t     */\n","\t    function createAggregator(setter, initializer) {\n","\t      return function(collection, iteratee) {\n","\t        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n","\t            accumulator = initializer ? initializer() : {};\n","\t\n","\t        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.assign`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} assigner The function to assign values.\n","\t     * @returns {Function} Returns the new assigner function.\n","\t     */\n","\t    function createAssigner(assigner) {\n","\t      return baseRest(function(object, sources) {\n","\t        var index = -1,\n","\t            length = sources.length,\n","\t            customizer = length > 1 ? sources[length - 1] : undefined,\n","\t            guard = length > 2 ? sources[2] : undefined;\n","\t\n","\t        customizer = (assigner.length > 3 && typeof customizer == 'function')\n","\t          ? (length--, customizer)\n","\t          : undefined;\n","\t\n","\t        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n","\t          customizer = length < 3 ? undefined : customizer;\n","\t          length = 1;\n","\t        }\n","\t        object = Object(object);\n","\t        while (++index < length) {\n","\t          var source = sources[index];\n","\t          if (source) {\n","\t            assigner(object, source, index, customizer);\n","\t          }\n","\t        }\n","\t        return object;\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `baseEach` or `baseEachRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} eachFunc The function to iterate over a collection.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new base function.\n","\t     */\n","\t    function createBaseEach(eachFunc, fromRight) {\n","\t      return function(collection, iteratee) {\n","\t        if (collection == null) {\n","\t          return collection;\n","\t        }\n","\t        if (!isArrayLike(collection)) {\n","\t          return eachFunc(collection, iteratee);\n","\t        }\n","\t        var length = collection.length,\n","\t            index = fromRight ? length : -1,\n","\t            iterable = Object(collection);\n","\t\n","\t        while ((fromRight ? index-- : ++index < length)) {\n","\t          if (iteratee(iterable[index], index, iterable) === false) {\n","\t            break;\n","\t          }\n","\t        }\n","\t        return collection;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new base function.\n","\t     */\n","\t    function createBaseFor(fromRight) {\n","\t      return function(object, iteratee, keysFunc) {\n","\t        var index = -1,\n","\t            iterable = Object(object),\n","\t            props = keysFunc(object),\n","\t            length = props.length;\n","\t\n","\t        while (length--) {\n","\t          var key = props[fromRight ? length : ++index];\n","\t          if (iteratee(iterable[key], key, iterable) === false) {\n","\t            break;\n","\t          }\n","\t        }\n","\t        return object;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with the optional `this`\n","\t     * binding of `thisArg`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createBind(func, bitmask, thisArg) {\n","\t      var isBind = bitmask & WRAP_BIND_FLAG,\n","\t          Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t        return fn.apply(isBind ? thisArg : this, arguments);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.lowerFirst`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} methodName The name of the `String` case method to use.\n","\t     * @returns {Function} Returns the new case function.\n","\t     */\n","\t    function createCaseFirst(methodName) {\n","\t      return function(string) {\n","\t        string = toString(string);\n","\t\n","\t        var strSymbols = hasUnicode(string)\n","\t          ? stringToArray(string)\n","\t          : undefined;\n","\t\n","\t        var chr = strSymbols\n","\t          ? strSymbols[0]\n","\t          : string.charAt(0);\n","\t\n","\t        var trailing = strSymbols\n","\t          ? castSlice(strSymbols, 1).join('')\n","\t          : string.slice(1);\n","\t\n","\t        return chr[methodName]() + trailing;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.camelCase`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} callback The function to combine each word.\n","\t     * @returns {Function} Returns the new compounder function.\n","\t     */\n","\t    function createCompounder(callback) {\n","\t      return function(string) {\n","\t        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that produces an instance of `Ctor` regardless of\n","\t     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} Ctor The constructor to wrap.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createCtor(Ctor) {\n","\t      return function() {\n","\t        // Use a `switch` statement to work with class constructors. See\n","\t        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n","\t        // for more details.\n","\t        var args = arguments;\n","\t        switch (args.length) {\n","\t          case 0: return new Ctor;\n","\t          case 1: return new Ctor(args[0]);\n","\t          case 2: return new Ctor(args[0], args[1]);\n","\t          case 3: return new Ctor(args[0], args[1], args[2]);\n","\t          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n","\t          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n","\t          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n","\t          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n","\t        }\n","\t        var thisBinding = baseCreate(Ctor.prototype),\n","\t            result = Ctor.apply(thisBinding, args);\n","\t\n","\t        // Mimic the constructor's `return` behavior.\n","\t        // See https://es5.github.io/#x13.2.2 for more details.\n","\t        return isObject(result) ? result : thisBinding;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to enable currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {number} arity The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createCurry(func, bitmask, arity) {\n","\t      var Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var length = arguments.length,\n","\t            args = Array(length),\n","\t            index = length,\n","\t            placeholder = getHolder(wrapper);\n","\t\n","\t        while (index--) {\n","\t          args[index] = arguments[index];\n","\t        }\n","\t        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n","\t          ? []\n","\t          : replaceHolders(args, placeholder);\n","\t\n","\t        length -= holders.length;\n","\t        if (length < arity) {\n","\t          return createRecurry(\n","\t            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n","\t            args, holders, undefined, undefined, arity - length);\n","\t        }\n","\t        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t        return apply(fn, this, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.find` or `_.findLast` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} findIndexFunc The function to find the collection index.\n","\t     * @returns {Function} Returns the new find function.\n","\t     */\n","\t    function createFind(findIndexFunc) {\n","\t      return function(collection, predicate, fromIndex) {\n","\t        var iterable = Object(collection);\n","\t        if (!isArrayLike(collection)) {\n","\t          var iteratee = getIteratee(predicate, 3);\n","\t          collection = keys(collection);\n","\t          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n","\t        }\n","\t        var index = findIndexFunc(collection, predicate, fromIndex);\n","\t        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.flow` or `_.flowRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new flow function.\n","\t     */\n","\t    function createFlow(fromRight) {\n","\t      return flatRest(function(funcs) {\n","\t        var length = funcs.length,\n","\t            index = length,\n","\t            prereq = LodashWrapper.prototype.thru;\n","\t\n","\t        if (fromRight) {\n","\t          funcs.reverse();\n","\t        }\n","\t        while (index--) {\n","\t          var func = funcs[index];\n","\t          if (typeof func != 'function') {\n","\t            throw new TypeError(FUNC_ERROR_TEXT);\n","\t          }\n","\t          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n","\t            var wrapper = new LodashWrapper([], true);\n","\t          }\n","\t        }\n","\t        index = wrapper ? index : length;\n","\t        while (++index < length) {\n","\t          func = funcs[index];\n","\t\n","\t          var funcName = getFuncName(func),\n","\t              data = funcName == 'wrapper' ? getData(func) : undefined;\n","\t\n","\t          if (data && isLaziable(data[0]) &&\n","\t                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n","\t                !data[4].length && data[9] == 1\n","\t              ) {\n","\t            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n","\t          } else {\n","\t            wrapper = (func.length == 1 && isLaziable(func))\n","\t              ? wrapper[funcName]()\n","\t              : wrapper.thru(func);\n","\t          }\n","\t        }\n","\t        return function() {\n","\t          var args = arguments,\n","\t              value = args[0];\n","\t\n","\t          if (wrapper && args.length == 1 && isArray(value)) {\n","\t            return wrapper.plant(value).value();\n","\t          }\n","\t          var index = 0,\n","\t              result = length ? funcs[index].apply(this, args) : value;\n","\t\n","\t          while (++index < length) {\n","\t            result = funcs[index].call(this, result);\n","\t          }\n","\t          return result;\n","\t        };\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with optional `this`\n","\t     * binding of `thisArg`, partial application, and currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function|string} func The function or method name to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [partialsRight] The arguments to append to those provided\n","\t     *  to the new function.\n","\t     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n","\t      var isAry = bitmask & WRAP_ARY_FLAG,\n","\t          isBind = bitmask & WRAP_BIND_FLAG,\n","\t          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n","\t          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n","\t          isFlip = bitmask & WRAP_FLIP_FLAG,\n","\t          Ctor = isBindKey ? undefined : createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var length = arguments.length,\n","\t            args = Array(length),\n","\t            index = length;\n","\t\n","\t        while (index--) {\n","\t          args[index] = arguments[index];\n","\t        }\n","\t        if (isCurried) {\n","\t          var placeholder = getHolder(wrapper),\n","\t              holdersCount = countHolders(args, placeholder);\n","\t        }\n","\t        if (partials) {\n","\t          args = composeArgs(args, partials, holders, isCurried);\n","\t        }\n","\t        if (partialsRight) {\n","\t          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n","\t        }\n","\t        length -= holdersCount;\n","\t        if (isCurried && length < arity) {\n","\t          var newHolders = replaceHolders(args, placeholder);\n","\t          return createRecurry(\n","\t            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n","\t            args, newHolders, argPos, ary, arity - length\n","\t          );\n","\t        }\n","\t        var thisBinding = isBind ? thisArg : this,\n","\t            fn = isBindKey ? thisBinding[func] : func;\n","\t\n","\t        length = args.length;\n","\t        if (argPos) {\n","\t          args = reorder(args, argPos);\n","\t        } else if (isFlip && length > 1) {\n","\t          args.reverse();\n","\t        }\n","\t        if (isAry && ary < length) {\n","\t          args.length = ary;\n","\t        }\n","\t        if (this && this !== root && this instanceof wrapper) {\n","\t          fn = Ctor || createCtor(fn);\n","\t        }\n","\t        return fn.apply(thisBinding, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.invertBy`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} setter The function to set accumulator values.\n","\t     * @param {Function} toIteratee The function to resolve iteratees.\n","\t     * @returns {Function} Returns the new inverter function.\n","\t     */\n","\t    function createInverter(setter, toIteratee) {\n","\t      return function(object, iteratee) {\n","\t        return baseInverter(object, setter, toIteratee(iteratee), {});\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a mathematical operation on two values.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} operator The function to perform the operation.\n","\t     * @param {number} [defaultValue] The value used for `undefined` arguments.\n","\t     * @returns {Function} Returns the new mathematical operation function.\n","\t     */\n","\t    function createMathOperation(operator, defaultValue) {\n","\t      return function(value, other) {\n","\t        var result;\n","\t        if (value === undefined && other === undefined) {\n","\t          return defaultValue;\n","\t        }\n","\t        if (value !== undefined) {\n","\t          result = value;\n","\t        }\n","\t        if (other !== undefined) {\n","\t          if (result === undefined) {\n","\t            return other;\n","\t          }\n","\t          if (typeof value == 'string' || typeof other == 'string') {\n","\t            value = baseToString(value);\n","\t            other = baseToString(other);\n","\t          } else {\n","\t            value = baseToNumber(value);\n","\t            other = baseToNumber(other);\n","\t          }\n","\t          result = operator(value, other);\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.over`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} arrayFunc The function to iterate over iteratees.\n","\t     * @returns {Function} Returns the new over function.\n","\t     */\n","\t    function createOver(arrayFunc) {\n","\t      return flatRest(function(iteratees) {\n","\t        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n","\t        return baseRest(function(args) {\n","\t          var thisArg = this;\n","\t          return arrayFunc(iteratees, function(iteratee) {\n","\t            return apply(iteratee, thisArg, args);\n","\t          });\n","\t        });\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates the padding for `string` based on `length`. The `chars` string\n","\t     * is truncated if the number of characters exceeds `length`.\n","\t     *\n","\t     * @private\n","\t     * @param {number} length The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padding for `string`.\n","\t     */\n","\t    function createPadding(length, chars) {\n","\t      chars = chars === undefined ? ' ' : baseToString(chars);\n","\t\n","\t      var charsLength = chars.length;\n","\t      if (charsLength < 2) {\n","\t        return charsLength ? baseRepeat(chars, length) : chars;\n","\t      }\n","\t      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n","\t      return hasUnicode(chars)\n","\t        ? castSlice(stringToArray(result), 0, length).join('')\n","\t        : result.slice(0, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with the `this` binding\n","\t     * of `thisArg` and `partials` prepended to the arguments it receives.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} thisArg The `this` binding of `func`.\n","\t     * @param {Array} partials The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createPartial(func, bitmask, thisArg, partials) {\n","\t      var isBind = bitmask & WRAP_BIND_FLAG,\n","\t          Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var argsIndex = -1,\n","\t            argsLength = arguments.length,\n","\t            leftIndex = -1,\n","\t            leftLength = partials.length,\n","\t            args = Array(leftLength + argsLength),\n","\t            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t\n","\t        while (++leftIndex < leftLength) {\n","\t          args[leftIndex] = partials[leftIndex];\n","\t        }\n","\t        while (argsLength--) {\n","\t          args[leftIndex++] = arguments[++argsIndex];\n","\t        }\n","\t        return apply(fn, isBind ? thisArg : this, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.range` or `_.rangeRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new range function.\n","\t     */\n","\t    function createRange(fromRight) {\n","\t      return function(start, end, step) {\n","\t        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n","\t          end = step = undefined;\n","\t        }\n","\t        // Ensure the sign of `-0` is preserved.\n","\t        start = toFinite(start);\n","\t        if (end === undefined) {\n","\t          end = start;\n","\t          start = 0;\n","\t        } else {\n","\t          end = toFinite(end);\n","\t        }\n","\t        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n","\t        return baseRange(start, end, step, fromRight);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a relational operation on two values.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} operator The function to perform the operation.\n","\t     * @returns {Function} Returns the new relational operation function.\n","\t     */\n","\t    function createRelationalOperation(operator) {\n","\t      return function(value, other) {\n","\t        if (!(typeof value == 'string' && typeof other == 'string')) {\n","\t          value = toNumber(value);\n","\t          other = toNumber(other);\n","\t        }\n","\t        return operator(value, other);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to continue currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {Function} wrapFunc The function to create the `func` wrapper.\n","\t     * @param {*} placeholder The placeholder value.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n","\t      var isCurry = bitmask & WRAP_CURRY_FLAG,\n","\t          newHolders = isCurry ? holders : undefined,\n","\t          newHoldersRight = isCurry ? undefined : holders,\n","\t          newPartials = isCurry ? partials : undefined,\n","\t          newPartialsRight = isCurry ? undefined : partials;\n","\t\n","\t      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n","\t      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n","\t\n","\t      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n","\t        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n","\t      }\n","\t      var newData = [\n","\t        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n","\t        newHoldersRight, argPos, ary, arity\n","\t      ];\n","\t\n","\t      var result = wrapFunc.apply(undefined, newData);\n","\t      if (isLaziable(func)) {\n","\t        setData(result, newData);\n","\t      }\n","\t      result.placeholder = placeholder;\n","\t      return setWrapToString(result, func, bitmask);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.round`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} methodName The name of the `Math` method to use when rounding.\n","\t     * @returns {Function} Returns the new round function.\n","\t     */\n","\t    function createRound(methodName) {\n","\t      var func = Math[methodName];\n","\t      return function(number, precision) {\n","\t        number = toNumber(number);\n","\t        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n","\t        if (precision) {\n","\t          // Shift with exponential notation to avoid floating-point issues.\n","\t          // See [MDN](https://mdn.io/round#Examples) for more details.\n","\t          var pair = (toString(number) + 'e').split('e'),\n","\t              value = func(pair[0] + 'e' + (+pair[1] + precision));\n","\t\n","\t          pair = (toString(value) + 'e').split('e');\n","\t          return +(pair[0] + 'e' + (+pair[1] - precision));\n","\t        }\n","\t        return func(number);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a set object of `values`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} values The values to add to the set.\n","\t     * @returns {Object} Returns the new set.\n","\t     */\n","\t    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n","\t      return new Set(values);\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates a `_.toPairs` or `_.toPairsIn` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} keysFunc The function to get the keys of a given object.\n","\t     * @returns {Function} Returns the new pairs function.\n","\t     */\n","\t    function createToPairs(keysFunc) {\n","\t      return function(object) {\n","\t        var tag = getTag(object);\n","\t        if (tag == mapTag) {\n","\t          return mapToArray(object);\n","\t        }\n","\t        if (tag == setTag) {\n","\t          return setToPairs(object);\n","\t        }\n","\t        return baseToPairs(object, keysFunc(object));\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that either curries or invokes `func` with optional\n","\t     * `this` binding and partially applied arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Function|string} func The function or method name to wrap.\n","\t     * @param {number} bitmask The bitmask flags.\n","\t     *    1 - `_.bind`\n","\t     *    2 - `_.bindKey`\n","\t     *    4 - `_.curry` or `_.curryRight` of a bound function\n","\t     *    8 - `_.curry`\n","\t     *   16 - `_.curryRight`\n","\t     *   32 - `_.partial`\n","\t     *   64 - `_.partialRight`\n","\t     *  128 - `_.rearg`\n","\t     *  256 - `_.ary`\n","\t     *  512 - `_.flip`\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to be partially applied.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n","\t      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n","\t      if (!isBindKey && typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      var length = partials ? partials.length : 0;\n","\t      if (!length) {\n","\t        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n","\t        partials = holders = undefined;\n","\t      }\n","\t      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n","\t      arity = arity === undefined ? arity : toInteger(arity);\n","\t      length -= holders ? holders.length : 0;\n","\t\n","\t      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n","\t        var partialsRight = partials,\n","\t            holdersRight = holders;\n","\t\n","\t        partials = holders = undefined;\n","\t      }\n","\t      var data = isBindKey ? undefined : getData(func);\n","\t\n","\t      var newData = [\n","\t        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n","\t        argPos, ary, arity\n","\t      ];\n","\t\n","\t      if (data) {\n","\t        mergeData(newData, data);\n","\t      }\n","\t      func = newData[0];\n","\t      bitmask = newData[1];\n","\t      thisArg = newData[2];\n","\t      partials = newData[3];\n","\t      holders = newData[4];\n","\t      arity = newData[9] = newData[9] === undefined\n","\t        ? (isBindKey ? 0 : func.length)\n","\t        : nativeMax(newData[9] - length, 0);\n","\t\n","\t      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n","\t        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n","\t      }\n","\t      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n","\t        var result = createBind(func, bitmask, thisArg);\n","\t      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n","\t        result = createCurry(func, bitmask, arity);\n","\t      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n","\t        result = createPartial(func, bitmask, thisArg, partials);\n","\t      } else {\n","\t        result = createHybrid.apply(undefined, newData);\n","\t      }\n","\t      var setter = data ? baseSetData : setData;\n","\t      return setWrapToString(setter(result, newData), func, bitmask);\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n","\t     * of source objects to the destination object for all destination properties\n","\t     * that resolve to `undefined`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} objValue The destination value.\n","\t     * @param {*} srcValue The source value.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {Object} object The parent object of `objValue`.\n","\t     * @returns {*} Returns the value to assign.\n","\t     */\n","\t    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n","\t      if (objValue === undefined ||\n","\t          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n","\t        return srcValue;\n","\t      }\n","\t      return objValue;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n","\t     * objects into destination objects that are passed thru.\n","\t     *\n","\t     * @private\n","\t     * @param {*} objValue The destination value.\n","\t     * @param {*} srcValue The source value.\n","\t     * @param {string} key The key of the property to merge.\n","\t     * @param {Object} object The parent object of `objValue`.\n","\t     * @param {Object} source The parent object of `srcValue`.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     * @returns {*} Returns the value to assign.\n","\t     */\n","\t    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n","\t      if (isObject(objValue) && isObject(srcValue)) {\n","\t        // Recursively merge objects and arrays (susceptible to call stack limits).\n","\t        stack.set(srcValue, objValue);\n","\t        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n","\t        stack['delete'](srcValue);\n","\t      }\n","\t      return objValue;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n","\t     * objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @param {string} key The key of the property to inspect.\n","\t     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n","\t     */\n","\t    function customOmitClone(value) {\n","\t      return isPlainObject(value) ? undefined : value;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for arrays with support for\n","\t     * partial deep comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to compare.\n","\t     * @param {Array} other The other array to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `array` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n","\t     */\n","\t    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n","\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n","\t          arrLength = array.length,\n","\t          othLength = other.length;\n","\t\n","\t      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n","\t        return false;\n","\t      }\n","\t      // Assume cyclic values are equal.\n","\t      var stacked = stack.get(array);\n","\t      if (stacked && stack.get(other)) {\n","\t        return stacked == other;\n","\t      }\n","\t      var index = -1,\n","\t          result = true,\n","\t          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n","\t\n","\t      stack.set(array, other);\n","\t      stack.set(other, array);\n","\t\n","\t      // Ignore non-index properties.\n","\t      while (++index < arrLength) {\n","\t        var arrValue = array[index],\n","\t            othValue = other[index];\n","\t\n","\t        if (customizer) {\n","\t          var compared = isPartial\n","\t            ? customizer(othValue, arrValue, index, other, array, stack)\n","\t            : customizer(arrValue, othValue, index, array, other, stack);\n","\t        }\n","\t        if (compared !== undefined) {\n","\t          if (compared) {\n","\t            continue;\n","\t          }\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t        // Recursively compare arrays (susceptible to call stack limits).\n","\t        if (seen) {\n","\t          if (!arraySome(other, function(othValue, othIndex) {\n","\t                if (!cacheHas(seen, othIndex) &&\n","\t                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n","\t                  return seen.push(othIndex);\n","\t                }\n","\t              })) {\n","\t            result = false;\n","\t            break;\n","\t          }\n","\t        } else if (!(\n","\t              arrValue === othValue ||\n","\t                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n","\t            )) {\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t      }\n","\t      stack['delete'](array);\n","\t      stack['delete'](other);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for comparing objects of\n","\t     * the same `toStringTag`.\n","\t     *\n","\t     * **Note:** This function only supports comparing values with tags of\n","\t     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {string} tag The `toStringTag` of the objects to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n","\t      switch (tag) {\n","\t        case dataViewTag:\n","\t          if ((object.byteLength != other.byteLength) ||\n","\t              (object.byteOffset != other.byteOffset)) {\n","\t            return false;\n","\t          }\n","\t          object = object.buffer;\n","\t          other = other.buffer;\n","\t\n","\t        case arrayBufferTag:\n","\t          if ((object.byteLength != other.byteLength) ||\n","\t              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n","\t            return false;\n","\t          }\n","\t          return true;\n","\t\n","\t        case boolTag:\n","\t        case dateTag:\n","\t        case numberTag:\n","\t          // Coerce booleans to `1` or `0` and dates to milliseconds.\n","\t          // Invalid dates are coerced to `NaN`.\n","\t          return eq(+object, +other);\n","\t\n","\t        case errorTag:\n","\t          return object.name == other.name && object.message == other.message;\n","\t\n","\t        case regexpTag:\n","\t        case stringTag:\n","\t          // Coerce regexes to strings and treat strings, primitives and objects,\n","\t          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n","\t          // for more details.\n","\t          return object == (other + '');\n","\t\n","\t        case mapTag:\n","\t          var convert = mapToArray;\n","\t\n","\t        case setTag:\n","\t          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n","\t          convert || (convert = setToArray);\n","\t\n","\t          if (object.size != other.size && !isPartial) {\n","\t            return false;\n","\t          }\n","\t          // Assume cyclic values are equal.\n","\t          var stacked = stack.get(object);\n","\t          if (stacked) {\n","\t            return stacked == other;\n","\t          }\n","\t          bitmask |= COMPARE_UNORDERED_FLAG;\n","\t\n","\t          // Recursively compare objects (susceptible to call stack limits).\n","\t          stack.set(object, other);\n","\t          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n","\t          stack['delete'](object);\n","\t          return result;\n","\t\n","\t        case symbolTag:\n","\t          if (symbolValueOf) {\n","\t            return symbolValueOf.call(object) == symbolValueOf.call(other);\n","\t          }\n","\t      }\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for objects with support for\n","\t     * partial deep comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n","\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n","\t          objProps = getAllKeys(object),\n","\t          objLength = objProps.length,\n","\t          othProps = getAllKeys(other),\n","\t          othLength = othProps.length;\n","\t\n","\t      if (objLength != othLength && !isPartial) {\n","\t        return false;\n","\t      }\n","\t      var index = objLength;\n","\t      while (index--) {\n","\t        var key = objProps[index];\n","\t        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      // Assume cyclic values are equal.\n","\t      var stacked = stack.get(object);\n","\t      if (stacked && stack.get(other)) {\n","\t        return stacked == other;\n","\t      }\n","\t      var result = true;\n","\t      stack.set(object, other);\n","\t      stack.set(other, object);\n","\t\n","\t      var skipCtor = isPartial;\n","\t      while (++index < objLength) {\n","\t        key = objProps[index];\n","\t        var objValue = object[key],\n","\t            othValue = other[key];\n","\t\n","\t        if (customizer) {\n","\t          var compared = isPartial\n","\t            ? customizer(othValue, objValue, key, other, object, stack)\n","\t            : customizer(objValue, othValue, key, object, other, stack);\n","\t        }\n","\t        // Recursively compare objects (susceptible to call stack limits).\n","\t        if (!(compared === undefined\n","\t              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n","\t              : compared\n","\t            )) {\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t        skipCtor || (skipCtor = key == 'constructor');\n","\t      }\n","\t      if (result && !skipCtor) {\n","\t        var objCtor = object.constructor,\n","\t            othCtor = other.constructor;\n","\t\n","\t        // Non `Object` object instances with different constructors are not equal.\n","\t        if (objCtor != othCtor &&\n","\t            ('constructor' in object && 'constructor' in other) &&\n","\t            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n","\t              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n","\t          result = false;\n","\t        }\n","\t      }\n","\t      stack['delete'](object);\n","\t      stack['delete'](other);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseRest` which flattens the rest array.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function flatRest(func) {\n","\t      return setToString(overRest(func, undefined, flatten), func + '');\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own enumerable property names and symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function getAllKeys(object) {\n","\t      return baseGetAllKeys(object, keys, getSymbols);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own and inherited enumerable property names and\n","\t     * symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function getAllKeysIn(object) {\n","\t      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets metadata for `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to query.\n","\t     * @returns {*} Returns the metadata for `func`.\n","\t     */\n","\t    var getData = !metaMap ? noop : function(func) {\n","\t      return metaMap.get(func);\n","\t    };\n","\t\n","\t    /**\n","\t     * Gets the name of `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to query.\n","\t     * @returns {string} Returns the function name.\n","\t     */\n","\t    function getFuncName(func) {\n","\t      var result = (func.name + ''),\n","\t          array = realNames[result],\n","\t          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n","\t\n","\t      while (length--) {\n","\t        var data = array[length],\n","\t            otherFunc = data.func;\n","\t        if (otherFunc == null || otherFunc == func) {\n","\t          return data.name;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the argument placeholder value for `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to inspect.\n","\t     * @returns {*} Returns the placeholder value.\n","\t     */\n","\t    function getHolder(func) {\n","\t      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n","\t      return object.placeholder;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n","\t     * this function returns the custom method, otherwise it returns `baseIteratee`.\n","\t     * If arguments are provided, the chosen function is invoked with them and\n","\t     * its result is returned.\n","\t     *\n","\t     * @private\n","\t     * @param {*} [value] The value to convert to an iteratee.\n","\t     * @param {number} [arity] The arity of the created iteratee.\n","\t     * @returns {Function} Returns the chosen function or its result.\n","\t     */\n","\t    function getIteratee() {\n","\t      var result = lodash.iteratee || iteratee;\n","\t      result = result === iteratee ? baseIteratee : result;\n","\t      return arguments.length ? result(arguments[0], arguments[1]) : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the data for `map`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} map The map to query.\n","\t     * @param {string} key The reference key.\n","\t     * @returns {*} Returns the map data.\n","\t     */\n","\t    function getMapData(map, key) {\n","\t      var data = map.__data__;\n","\t      return isKeyable(key)\n","\t        ? data[typeof key == 'string' ? 'string' : 'hash']\n","\t        : data.map;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the property names, values, and compare flags of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the match data of `object`.\n","\t     */\n","\t    function getMatchData(object) {\n","\t      var result = keys(object),\n","\t          length = result.length;\n","\t\n","\t      while (length--) {\n","\t        var key = result[length],\n","\t            value = object[key];\n","\t\n","\t        result[length] = [key, value, isStrictComparable(value)];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the native function at `key` of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {string} key The key of the method to get.\n","\t     * @returns {*} Returns the function if it's native, else `undefined`.\n","\t     */\n","\t    function getNative(object, key) {\n","\t      var value = getValue(object, key);\n","\t      return baseIsNative(value) ? value : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the raw `toStringTag`.\n","\t     */\n","\t    function getRawTag(value) {\n","\t      var isOwn = hasOwnProperty.call(value, symToStringTag),\n","\t          tag = value[symToStringTag];\n","\t\n","\t      try {\n","\t        value[symToStringTag] = undefined;\n","\t        var unmasked = true;\n","\t      } catch (e) {}\n","\t\n","\t      var result = nativeObjectToString.call(value);\n","\t      if (unmasked) {\n","\t        if (isOwn) {\n","\t          value[symToStringTag] = tag;\n","\t        } else {\n","\t          delete value[symToStringTag];\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of symbols.\n","\t     */\n","\t    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n","\t      if (object == null) {\n","\t        return [];\n","\t      }\n","\t      object = Object(object);\n","\t      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n","\t        return propertyIsEnumerable.call(object, symbol);\n","\t      });\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of symbols.\n","\t     */\n","\t    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n","\t      var result = [];\n","\t      while (object) {\n","\t        arrayPush(result, getSymbols(object));\n","\t        object = getPrototype(object);\n","\t      }\n","\t      return result;\n","\t    };\n","\t\n","\t    /**\n","\t     * Gets the `toStringTag` of `value`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the `toStringTag`.\n","\t     */\n","\t    var getTag = baseGetTag;\n","\t\n","\t    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n","\t    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n","\t        (Map && getTag(new Map) != mapTag) ||\n","\t        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n","\t        (Set && getTag(new Set) != setTag) ||\n","\t        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n","\t      getTag = function(value) {\n","\t        var result = baseGetTag(value),\n","\t            Ctor = result == objectTag ? value.constructor : undefined,\n","\t            ctorString = Ctor ? toSource(Ctor) : '';\n","\t\n","\t        if (ctorString) {\n","\t          switch (ctorString) {\n","\t            case dataViewCtorString: return dataViewTag;\n","\t            case mapCtorString: return mapTag;\n","\t            case promiseCtorString: return promiseTag;\n","\t            case setCtorString: return setTag;\n","\t            case weakMapCtorString: return weakMapTag;\n","\t          }\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n","\t     *\n","\t     * @private\n","\t     * @param {number} start The start of the view.\n","\t     * @param {number} end The end of the view.\n","\t     * @param {Array} transforms The transformations to apply to the view.\n","\t     * @returns {Object} Returns an object containing the `start` and `end`\n","\t     *  positions of the view.\n","\t     */\n","\t    function getView(start, end, transforms) {\n","\t      var index = -1,\n","\t          length = transforms.length;\n","\t\n","\t      while (++index < length) {\n","\t        var data = transforms[index],\n","\t            size = data.size;\n","\t\n","\t        switch (data.type) {\n","\t          case 'drop':      start += size; break;\n","\t          case 'dropRight': end -= size; break;\n","\t          case 'take':      end = nativeMin(end, start + size); break;\n","\t          case 'takeRight': start = nativeMax(start, end - size); break;\n","\t        }\n","\t      }\n","\t      return { 'start': start, 'end': end };\n","\t    }\n","\t\n","\t    /**\n","\t     * Extracts wrapper details from the `source` body comment.\n","\t     *\n","\t     * @private\n","\t     * @param {string} source The source to inspect.\n","\t     * @returns {Array} Returns the wrapper details.\n","\t     */\n","\t    function getWrapDetails(source) {\n","\t      var match = source.match(reWrapDetails);\n","\t      return match ? match[1].split(reSplitDetails) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` exists on `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @param {Function} hasFunc The function to check properties.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     */\n","\t    function hasPath(object, path, hasFunc) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length,\n","\t          result = false;\n","\t\n","\t      while (++index < length) {\n","\t        var key = toKey(path[index]);\n","\t        if (!(result = object != null && hasFunc(object, key))) {\n","\t          break;\n","\t        }\n","\t        object = object[key];\n","\t      }\n","\t      if (result || ++index != length) {\n","\t        return result;\n","\t      }\n","\t      length = object == null ? 0 : object.length;\n","\t      return !!length && isLength(length) && isIndex(key, length) &&\n","\t        (isArray(object) || isArguments(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an array clone.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to clone.\n","\t     * @returns {Array} Returns the initialized clone.\n","\t     */\n","\t    function initCloneArray(array) {\n","\t      var length = array.length,\n","\t          result = new array.constructor(length);\n","\t\n","\t      // Add properties assigned by `RegExp#exec`.\n","\t      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n","\t        result.index = array.index;\n","\t        result.input = array.input;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an object clone.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to clone.\n","\t     * @returns {Object} Returns the initialized clone.\n","\t     */\n","\t    function initCloneObject(object) {\n","\t      return (typeof object.constructor == 'function' && !isPrototype(object))\n","\t        ? baseCreate(getPrototype(object))\n","\t        : {};\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an object clone based on its `toStringTag`.\n","\t     *\n","\t     * **Note:** This function only supports cloning values with tags of\n","\t     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to clone.\n","\t     * @param {string} tag The `toStringTag` of the object to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the initialized clone.\n","\t     */\n","\t    function initCloneByTag(object, tag, isDeep) {\n","\t      var Ctor = object.constructor;\n","\t      switch (tag) {\n","\t        case arrayBufferTag:\n","\t          return cloneArrayBuffer(object);\n","\t\n","\t        case boolTag:\n","\t        case dateTag:\n","\t          return new Ctor(+object);\n","\t\n","\t        case dataViewTag:\n","\t          return cloneDataView(object, isDeep);\n","\t\n","\t        case float32Tag: case float64Tag:\n","\t        case int8Tag: case int16Tag: case int32Tag:\n","\t        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n","\t          return cloneTypedArray(object, isDeep);\n","\t\n","\t        case mapTag:\n","\t          return new Ctor;\n","\t\n","\t        case numberTag:\n","\t        case stringTag:\n","\t          return new Ctor(object);\n","\t\n","\t        case regexpTag:\n","\t          return cloneRegExp(object);\n","\t\n","\t        case setTag:\n","\t          return new Ctor;\n","\t\n","\t        case symbolTag:\n","\t          return cloneSymbol(object);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Inserts wrapper `details` in a comment at the top of the `source` body.\n","\t     *\n","\t     * @private\n","\t     * @param {string} source The source to modify.\n","\t     * @returns {Array} details The details to insert.\n","\t     * @returns {string} Returns the modified source.\n","\t     */\n","\t    function insertWrapDetails(source, details) {\n","\t      var length = details.length;\n","\t      if (!length) {\n","\t        return source;\n","\t      }\n","\t      var lastIndex = length - 1;\n","\t      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n","\t      details = details.join(length > 2 ? ', ' : ' ');\n","\t      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a flattenable `arguments` object or array.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n","\t     */\n","\t    function isFlattenable(value) {\n","\t      return isArray(value) || isArguments(value) ||\n","\t        !!(spreadableSymbol && value && value[spreadableSymbol]);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a valid array-like index.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n","\t     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n","\t     */\n","\t    function isIndex(value, length) {\n","\t      var type = typeof value;\n","\t      length = length == null ? MAX_SAFE_INTEGER : length;\n","\t\n","\t      return !!length &&\n","\t        (type == 'number' ||\n","\t          (type != 'symbol' && reIsUint.test(value))) &&\n","\t            (value > -1 && value % 1 == 0 && value < length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if the given arguments are from an iteratee call.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The potential iteratee value argument.\n","\t     * @param {*} index The potential iteratee index or key argument.\n","\t     * @param {*} object The potential iteratee object argument.\n","\t     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n","\t     *  else `false`.\n","\t     */\n","\t    function isIterateeCall(value, index, object) {\n","\t      if (!isObject(object)) {\n","\t        return false;\n","\t      }\n","\t      var type = typeof index;\n","\t      if (type == 'number'\n","\t            ? (isArrayLike(object) && isIndex(index, object.length))\n","\t            : (type == 'string' && index in object)\n","\t          ) {\n","\t        return eq(object[index], value);\n","\t      }\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a property name and not a property path.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @param {Object} [object] The object to query keys on.\n","\t     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n","\t     */\n","\t    function isKey(value, object) {\n","\t      if (isArray(value)) {\n","\t        return false;\n","\t      }\n","\t      var type = typeof value;\n","\t      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n","\t          value == null || isSymbol(value)) {\n","\t        return true;\n","\t      }\n","\t      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n","\t        (object != null && value in Object(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is suitable for use as unique object key.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n","\t     */\n","\t    function isKeyable(value) {\n","\t      var type = typeof value;\n","\t      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n","\t        ? (value !== '__proto__')\n","\t        : (value === null);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` has a lazy counterpart.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to check.\n","\t     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n","\t     *  else `false`.\n","\t     */\n","\t    function isLaziable(func) {\n","\t      var funcName = getFuncName(func),\n","\t          other = lodash[funcName];\n","\t\n","\t      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n","\t        return false;\n","\t      }\n","\t      if (func === other) {\n","\t        return true;\n","\t      }\n","\t      var data = getData(other);\n","\t      return !!data && func === data[0];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` has its source masked.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to check.\n","\t     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n","\t     */\n","\t    function isMasked(func) {\n","\t      return !!maskSrcKey && (maskSrcKey in func);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` is capable of being masked.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n","\t     */\n","\t    var isMaskable = coreJsData ? isFunction : stubFalse;\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely a prototype object.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n","\t     */\n","\t    function isPrototype(value) {\n","\t      var Ctor = value && value.constructor,\n","\t          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n","\t\n","\t      return value === proto;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` if suitable for strict\n","\t     *  equality comparisons, else `false`.\n","\t     */\n","\t    function isStrictComparable(value) {\n","\t      return value === value && !isObject(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `matchesProperty` for source values suitable\n","\t     * for strict equality comparisons, i.e. `===`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} key The key of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function matchesStrictComparable(key, srcValue) {\n","\t      return function(object) {\n","\t        if (object == null) {\n","\t          return false;\n","\t        }\n","\t        return object[key] === srcValue &&\n","\t          (srcValue !== undefined || (key in Object(object)));\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.memoize` which clears the memoized function's\n","\t     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to have its output memoized.\n","\t     * @returns {Function} Returns the new memoized function.\n","\t     */\n","\t    function memoizeCapped(func) {\n","\t      var result = memoize(func, function(key) {\n","\t        if (cache.size === MAX_MEMOIZE_SIZE) {\n","\t          cache.clear();\n","\t        }\n","\t        return key;\n","\t      });\n","\t\n","\t      var cache = result.cache;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Merges the function metadata of `source` into `data`.\n","\t     *\n","\t     * Merging metadata reduces the number of wrappers used to invoke a function.\n","\t     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n","\t     * may be applied regardless of execution order. Methods like `_.ary` and\n","\t     * `_.rearg` modify function arguments, making the order in which they are\n","\t     * executed important, preventing the merging of metadata. However, we make\n","\t     * an exception for a safe combined case where curried functions have `_.ary`\n","\t     * and or `_.rearg` applied.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} data The destination metadata.\n","\t     * @param {Array} source The source metadata.\n","\t     * @returns {Array} Returns `data`.\n","\t     */\n","\t    function mergeData(data, source) {\n","\t      var bitmask = data[1],\n","\t          srcBitmask = source[1],\n","\t          newBitmask = bitmask | srcBitmask,\n","\t          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n","\t\n","\t      var isCombo =\n","\t        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n","\t        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n","\t        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n","\t\n","\t      // Exit early if metadata can't be merged.\n","\t      if (!(isCommon || isCombo)) {\n","\t        return data;\n","\t      }\n","\t      // Use source `thisArg` if available.\n","\t      if (srcBitmask & WRAP_BIND_FLAG) {\n","\t        data[2] = source[2];\n","\t        // Set when currying a bound function.\n","\t        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n","\t      }\n","\t      // Compose partial arguments.\n","\t      var value = source[3];\n","\t      if (value) {\n","\t        var partials = data[3];\n","\t        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n","\t        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n","\t      }\n","\t      // Compose partial right arguments.\n","\t      value = source[5];\n","\t      if (value) {\n","\t        partials = data[5];\n","\t        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n","\t        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n","\t      }\n","\t      // Use source `argPos` if available.\n","\t      value = source[7];\n","\t      if (value) {\n","\t        data[7] = value;\n","\t      }\n","\t      // Use source `ary` if it's smaller.\n","\t      if (srcBitmask & WRAP_ARY_FLAG) {\n","\t        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n","\t      }\n","\t      // Use source `arity` if one is not provided.\n","\t      if (data[9] == null) {\n","\t        data[9] = source[9];\n","\t      }\n","\t      // Use source `func` and merge bitmasks.\n","\t      data[0] = source[0];\n","\t      data[1] = newBitmask;\n","\t\n","\t      return data;\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like\n","\t     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n","\t     * except that it includes inherited enumerable properties.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function nativeKeysIn(object) {\n","\t      var result = [];\n","\t      if (object != null) {\n","\t        for (var key in Object(object)) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a string using `Object.prototype.toString`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     */\n","\t    function objectToString(value) {\n","\t      return nativeObjectToString.call(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseRest` which transforms the rest array.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @param {Function} transform The rest array transform.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function overRest(func, start, transform) {\n","\t      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n","\t      return function() {\n","\t        var args = arguments,\n","\t            index = -1,\n","\t            length = nativeMax(args.length - start, 0),\n","\t            array = Array(length);\n","\t\n","\t        while (++index < length) {\n","\t          array[index] = args[start + index];\n","\t        }\n","\t        index = -1;\n","\t        var otherArgs = Array(start + 1);\n","\t        while (++index < start) {\n","\t          otherArgs[index] = args[index];\n","\t        }\n","\t        otherArgs[start] = transform(array);\n","\t        return apply(func, this, otherArgs);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the parent value at `path` of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array} path The path to get the parent value of.\n","\t     * @returns {*} Returns the parent value.\n","\t     */\n","\t    function parent(object, path) {\n","\t      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n","\t    }\n","\t\n","\t    /**\n","\t     * Reorder `array` according to the specified indexes where the element at\n","\t     * the first index is assigned as the first element, the element at\n","\t     * the second index is assigned as the second element, and so on.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to reorder.\n","\t     * @param {Array} indexes The arranged array indexes.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function reorder(array, indexes) {\n","\t      var arrLength = array.length,\n","\t          length = nativeMin(indexes.length, arrLength),\n","\t          oldArray = copyArray(array);\n","\t\n","\t      while (length--) {\n","\t        var index = indexes[length];\n","\t        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the value at `key`, unless `key` is \"__proto__\".\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {string} key The key of the property to get.\n","\t     * @returns {*} Returns the property value.\n","\t     */\n","\t    function safeGet(object, key) {\n","\t      if (key == '__proto__') {\n","\t        return;\n","\t      }\n","\t\n","\t      return object[key];\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets metadata for `func`.\n","\t     *\n","\t     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n","\t     * period of time, it will trip its breaker and transition to an identity\n","\t     * function to avoid garbage collection pauses in V8. See\n","\t     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n","\t     * for more details.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to associate metadata with.\n","\t     * @param {*} data The metadata.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var setData = shortOut(baseSetData);\n","\t\n","\t    /**\n","\t     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @returns {number|Object} Returns the timer id or timeout object.\n","\t     */\n","\t    var setTimeout = ctxSetTimeout || function(func, wait) {\n","\t      return root.setTimeout(func, wait);\n","\t    };\n","\t\n","\t    /**\n","\t     * Sets the `toString` method of `func` to return `string`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to modify.\n","\t     * @param {Function} string The `toString` result.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var setToString = shortOut(baseSetToString);\n","\t\n","\t    /**\n","\t     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n","\t     * with wrapper details in a comment at the top of the source body.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} wrapper The function to modify.\n","\t     * @param {Function} reference The reference function.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @returns {Function} Returns `wrapper`.\n","\t     */\n","\t    function setWrapToString(wrapper, reference, bitmask) {\n","\t      var source = (reference + '');\n","\t      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that'll short out and invoke `identity` instead\n","\t     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n","\t     * milliseconds.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new shortable function.\n","\t     */\n","\t    function shortOut(func) {\n","\t      var count = 0,\n","\t          lastCalled = 0;\n","\t\n","\t      return function() {\n","\t        var stamp = nativeNow(),\n","\t            remaining = HOT_SPAN - (stamp - lastCalled);\n","\t\n","\t        lastCalled = stamp;\n","\t        if (remaining > 0) {\n","\t          if (++count >= HOT_COUNT) {\n","\t            return arguments[0];\n","\t          }\n","\t        } else {\n","\t          count = 0;\n","\t        }\n","\t        return func.apply(undefined, arguments);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to shuffle.\n","\t     * @param {number} [size=array.length] The size of `array`.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function shuffleSelf(array, size) {\n","\t      var index = -1,\n","\t          length = array.length,\n","\t          lastIndex = length - 1;\n","\t\n","\t      size = size === undefined ? length : size;\n","\t      while (++index < size) {\n","\t        var rand = baseRandom(index, lastIndex),\n","\t            value = array[rand];\n","\t\n","\t        array[rand] = array[index];\n","\t        array[index] = value;\n","\t      }\n","\t      array.length = size;\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to a property path array.\n","\t     *\n","\t     * @private\n","\t     * @param {string} string The string to convert.\n","\t     * @returns {Array} Returns the property path array.\n","\t     */\n","\t    var stringToPath = memoizeCapped(function(string) {\n","\t      var result = [];\n","\t      if (string.charCodeAt(0) === 46 /* . */) {\n","\t        result.push('');\n","\t      }\n","\t      string.replace(rePropName, function(match, number, quote, subString) {\n","\t        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n","\t      });\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `value` to a string key if it's not a string or symbol.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {string|symbol} Returns the key.\n","\t     */\n","\t    function toKey(value) {\n","\t      if (typeof value == 'string' || isSymbol(value)) {\n","\t        return value;\n","\t      }\n","\t      var result = (value + '');\n","\t      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `func` to its source code.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to convert.\n","\t     * @returns {string} Returns the source code.\n","\t     */\n","\t    function toSource(func) {\n","\t      if (func != null) {\n","\t        try {\n","\t          return funcToString.call(func);\n","\t        } catch (e) {}\n","\t        try {\n","\t          return (func + '');\n","\t        } catch (e) {}\n","\t      }\n","\t      return '';\n","\t    }\n","\t\n","\t    /**\n","\t     * Updates wrapper `details` based on `bitmask` flags.\n","\t     *\n","\t     * @private\n","\t     * @returns {Array} details The details to modify.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @returns {Array} Returns `details`.\n","\t     */\n","\t    function updateWrapDetails(details, bitmask) {\n","\t      arrayEach(wrapFlags, function(pair) {\n","\t        var value = '_.' + pair[0];\n","\t        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n","\t          details.push(value);\n","\t        }\n","\t      });\n","\t      return details.sort();\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `wrapper`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} wrapper The wrapper to clone.\n","\t     * @returns {Object} Returns the cloned wrapper.\n","\t     */\n","\t    function wrapperClone(wrapper) {\n","\t      if (wrapper instanceof LazyWrapper) {\n","\t        return wrapper.clone();\n","\t      }\n","\t      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n","\t      result.__actions__ = copyArray(wrapper.__actions__);\n","\t      result.__index__  = wrapper.__index__;\n","\t      result.__values__ = wrapper.__values__;\n","\t      return result;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an array of elements split into groups the length of `size`.\n","\t     * If `array` can't be split evenly, the final chunk will be the remaining\n","\t     * elements.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to process.\n","\t     * @param {number} [size=1] The length of each chunk\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the new array of chunks.\n","\t     * @example\n","\t     *\n","\t     * _.chunk(['a', 'b', 'c', 'd'], 2);\n","\t     * // => [['a', 'b'], ['c', 'd']]\n","\t     *\n","\t     * _.chunk(['a', 'b', 'c', 'd'], 3);\n","\t     * // => [['a', 'b', 'c'], ['d']]\n","\t     */\n","\t    function chunk(array, size, guard) {\n","\t      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n","\t        size = 1;\n","\t      } else {\n","\t        size = nativeMax(toInteger(size), 0);\n","\t      }\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length || size < 1) {\n","\t        return [];\n","\t      }\n","\t      var index = 0,\n","\t          resIndex = 0,\n","\t          result = Array(nativeCeil(length / size));\n","\t\n","\t      while (index < length) {\n","\t        result[resIndex++] = baseSlice(array, index, (index += size));\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array with all falsey values removed. The values `false`, `null`,\n","\t     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to compact.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.compact([0, 1, false, 2, '', 3]);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function compact(array) {\n","\t      var index = -1,\n","\t          length = array == null ? 0 : array.length,\n","\t          resIndex = 0,\n","\t          result = [];\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (value) {\n","\t          result[resIndex++] = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a new array concatenating `array` with any additional arrays\n","\t     * and/or values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to concatenate.\n","\t     * @param {...*} [values] The values to concatenate.\n","\t     * @returns {Array} Returns the new concatenated array.\n","\t     * @example\n","\t     *\n","\t     * var array = [1];\n","\t     * var other = _.concat(array, 2, [3], [[4]]);\n","\t     *\n","\t     * console.log(other);\n","\t     * // => [1, 2, 3, [4]]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1]\n","\t     */\n","\t    function concat() {\n","\t      var length = arguments.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      var args = Array(length - 1),\n","\t          array = arguments[0],\n","\t          index = length;\n","\t\n","\t      while (index--) {\n","\t        args[index - 1] = arguments[index];\n","\t      }\n","\t      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of `array` values not included in the other given arrays\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. The order and references of result values are\n","\t     * determined by the first array.\n","\t     *\n","\t     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.without, _.xor\n","\t     * @example\n","\t     *\n","\t     * _.difference([2, 1], [2, 3]);\n","\t     * // => [1]\n","\t     */\n","\t    var difference = baseRest(function(array, values) {\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.difference` except that it accepts `iteratee` which\n","\t     * is invoked for each element of `array` and `values` to generate the criterion\n","\t     * by which they're compared. The order and references of result values are\n","\t     * determined by the first array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    var differenceBy = baseRest(function(array, values) {\n","\t      var iteratee = last(values);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.difference` except that it accepts `comparator`\n","\t     * which is invoked to compare elements of `array` to `values`. The order and\n","\t     * references of result values are determined by the first array. The comparator\n","\t     * is invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     *\n","\t     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n","\t     * // => [{ 'x': 2, 'y': 1 }]\n","\t     */\n","\t    var differenceWith = baseRest(function(array, values) {\n","\t      var comparator = last(values);\n","\t      if (isArrayLikeObject(comparator)) {\n","\t        comparator = undefined;\n","\t      }\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements dropped from the beginning.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to drop.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.drop([1, 2, 3]);\n","\t     * // => [2, 3]\n","\t     *\n","\t     * _.drop([1, 2, 3], 2);\n","\t     * // => [3]\n","\t     *\n","\t     * _.drop([1, 2, 3], 5);\n","\t     * // => []\n","\t     *\n","\t     * _.drop([1, 2, 3], 0);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function drop(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      return baseSlice(array, n < 0 ? 0 : n, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements dropped from the end.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to drop.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.dropRight([1, 2, 3]);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 2);\n","\t     * // => [1]\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 5);\n","\t     * // => []\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 0);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function dropRight(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      n = length - n;\n","\t      return baseSlice(array, 0, n < 0 ? 0 : n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` excluding elements dropped from the end.\n","\t     * Elements are dropped until `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.dropRightWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.dropRightWhile(users, ['active', false]);\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.dropRightWhile(users, 'active');\n","\t     * // => objects for ['barney', 'fred', 'pebbles']\n","\t     */\n","\t    function dropRightWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` excluding elements dropped from the beginning.\n","\t     * Elements are dropped until `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.dropWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.dropWhile(users, ['active', false]);\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.dropWhile(users, 'active');\n","\t     * // => objects for ['barney', 'fred', 'pebbles']\n","\t     */\n","\t    function dropWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Fills elements of `array` with `value` from `start` up to, but not\n","\t     * including, `end`.\n","\t     *\n","\t     * **Note:** This method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to fill.\n","\t     * @param {*} value The value to fill `array` with.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _.fill(array, 'a');\n","\t     * console.log(array);\n","\t     * // => ['a', 'a', 'a']\n","\t     *\n","\t     * _.fill(Array(3), 2);\n","\t     * // => [2, 2, 2]\n","\t     *\n","\t     * _.fill([4, 6, 8, 10], '*', 1, 3);\n","\t     * // => [4, '*', '*', 10]\n","\t     */\n","\t    function fill(array, value, start, end) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n","\t        start = 0;\n","\t        end = length;\n","\t      }\n","\t      return baseFill(array, value, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it returns the index of the first\n","\t     * element `predicate` returns truthy for instead of the element itself.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {number} Returns the index of the found element, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findIndex(users, { 'user': 'fred', 'active': false });\n","\t     * // => 1\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findIndex(users, ['active', false]);\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findIndex(users, 'active');\n","\t     * // => 2\n","\t     */\n","\t    function findIndex(array, predicate, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n","\t      if (index < 0) {\n","\t        index = nativeMax(length + index, 0);\n","\t      }\n","\t      return baseFindIndex(array, getIteratee(predicate, 3), index);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.findIndex` except that it iterates over elements\n","\t     * of `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=array.length-1] The index to search from.\n","\t     * @returns {number} Returns the index of the found element, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n","\t     * // => 2\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findLastIndex(users, ['active', false]);\n","\t     * // => 2\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findLastIndex(users, 'active');\n","\t     * // => 0\n","\t     */\n","\t    function findLastIndex(array, predicate, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = length - 1;\n","\t      if (fromIndex !== undefined) {\n","\t        index = toInteger(fromIndex);\n","\t        index = fromIndex < 0\n","\t          ? nativeMax(length + index, 0)\n","\t          : nativeMin(index, length - 1);\n","\t      }\n","\t      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * Flattens `array` a single level deep.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * _.flatten([1, [2, [3, [4]], 5]]);\n","\t     * // => [1, 2, [3, [4]], 5]\n","\t     */\n","\t    function flatten(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseFlatten(array, 1) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Recursively flattens `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n","\t     * // => [1, 2, 3, 4, 5]\n","\t     */\n","\t    function flattenDeep(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseFlatten(array, INFINITY) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Recursively flatten `array` up to `depth` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.4.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @param {number} [depth=1] The maximum recursion depth.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, [2, [3, [4]], 5]];\n","\t     *\n","\t     * _.flattenDepth(array, 1);\n","\t     * // => [1, 2, [3, [4]], 5]\n","\t     *\n","\t     * _.flattenDepth(array, 2);\n","\t     * // => [1, 2, 3, [4], 5]\n","\t     */\n","\t    function flattenDepth(array, depth) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      depth = depth === undefined ? 1 : toInteger(depth);\n","\t      return baseFlatten(array, depth);\n","\t    }\n","\t\n","\t    /**\n","\t     * The inverse of `_.toPairs`; this method returns an object composed\n","\t     * from key-value `pairs`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} pairs The key-value pairs.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.fromPairs([['a', 1], ['b', 2]]);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    function fromPairs(pairs) {\n","\t      var index = -1,\n","\t          length = pairs == null ? 0 : pairs.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var pair = pairs[index];\n","\t        result[pair[0]] = pair[1];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the first element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias first\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {*} Returns the first element of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.head([1, 2, 3]);\n","\t     * // => 1\n","\t     *\n","\t     * _.head([]);\n","\t     * // => undefined\n","\t     */\n","\t    function head(array) {\n","\t      return (array && array.length) ? array[0] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the index at which the first occurrence of `value` is found in `array`\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. If `fromIndex` is negative, it's used as the\n","\t     * offset from the end of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.indexOf([1, 2, 1, 2], 2);\n","\t     * // => 1\n","\t     *\n","\t     * // Search from the `fromIndex`.\n","\t     * _.indexOf([1, 2, 1, 2], 2, 2);\n","\t     * // => 3\n","\t     */\n","\t    function indexOf(array, value, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n","\t      if (index < 0) {\n","\t        index = nativeMax(length + index, 0);\n","\t      }\n","\t      return baseIndexOf(array, value, index);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets all but the last element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.initial([1, 2, 3]);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function initial(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseSlice(array, 0, -1) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of unique values that are included in all given arrays\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. The order and references of result values are\n","\t     * determined by the first array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * _.intersection([2, 1], [2, 3]);\n","\t     * // => [2]\n","\t     */\n","\t    var intersection = baseRest(function(arrays) {\n","\t      var mapped = arrayMap(arrays, castArrayLikeObject);\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.intersection` except that it accepts `iteratee`\n","\t     * which is invoked for each element of each `arrays` to generate the criterion\n","\t     * by which they're compared. The order and references of result values are\n","\t     * determined by the first array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [2.1]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }]\n","\t     */\n","\t    var intersectionBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays),\n","\t          mapped = arrayMap(arrays, castArrayLikeObject);\n","\t\n","\t      if (iteratee === last(mapped)) {\n","\t        iteratee = undefined;\n","\t      } else {\n","\t        mapped.pop();\n","\t      }\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.intersection` except that it accepts `comparator`\n","\t     * which is invoked to compare elements of `arrays`. The order and references\n","\t     * of result values are determined by the first array. The comparator is\n","\t     * invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.intersectionWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }]\n","\t     */\n","\t    var intersectionWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays),\n","\t          mapped = arrayMap(arrays, castArrayLikeObject);\n","\t\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      if (comparator) {\n","\t        mapped.pop();\n","\t      }\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped, undefined, comparator)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts all elements in `array` into a string separated by `separator`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to convert.\n","\t     * @param {string} [separator=','] The element separator.\n","\t     * @returns {string} Returns the joined string.\n","\t     * @example\n","\t     *\n","\t     * _.join(['a', 'b', 'c'], '~');\n","\t     * // => 'a~b~c'\n","\t     */\n","\t    function join(array, separator) {\n","\t      return array == null ? '' : nativeJoin.call(array, separator);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the last element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {*} Returns the last element of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.last([1, 2, 3]);\n","\t     * // => 3\n","\t     */\n","\t    function last(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? array[length - 1] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.indexOf` except that it iterates over elements of\n","\t     * `array` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=array.length-1] The index to search from.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.lastIndexOf([1, 2, 1, 2], 2);\n","\t     * // => 3\n","\t     *\n","\t     * // Search from the `fromIndex`.\n","\t     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n","\t     * // => 1\n","\t     */\n","\t    function lastIndexOf(array, value, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = length;\n","\t      if (fromIndex !== undefined) {\n","\t        index = toInteger(fromIndex);\n","\t        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n","\t      }\n","\t      return value === value\n","\t        ? strictLastIndexOf(array, value, index)\n","\t        : baseFindIndex(array, baseIsNaN, index, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n","\t     * element from the end is returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.11.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=0] The index of the element to return.\n","\t     * @returns {*} Returns the nth element of `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'd'];\n","\t     *\n","\t     * _.nth(array, 1);\n","\t     * // => 'b'\n","\t     *\n","\t     * _.nth(array, -2);\n","\t     * // => 'c';\n","\t     */\n","\t    function nth(array, n) {\n","\t      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all given values from `array` using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n","\t     * to remove elements from an array by predicate.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {...*} [values] The values to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n","\t     *\n","\t     * _.pull(array, 'a', 'c');\n","\t     * console.log(array);\n","\t     * // => ['b', 'b']\n","\t     */\n","\t    var pull = baseRest(pullAll);\n","\t\n","\t    /**\n","\t     * This method is like `_.pull` except that it accepts an array of values to remove.\n","\t     *\n","\t     * **Note:** Unlike `_.difference`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n","\t     *\n","\t     * _.pullAll(array, ['a', 'c']);\n","\t     * console.log(array);\n","\t     * // => ['b', 'b']\n","\t     */\n","\t    function pullAll(array, values) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values)\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n","\t     * invoked for each element of `array` and `values` to generate the criterion\n","\t     * by which they're compared. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n","\t     *\n","\t     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n","\t     * console.log(array);\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    function pullAllBy(array, values, iteratee) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values, getIteratee(iteratee, 2))\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.pullAll` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `array` to `values`. The comparator is\n","\t     * invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n","\t     *\n","\t     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n","\t     * console.log(array);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n","\t     */\n","\t    function pullAllWith(array, values, comparator) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values, undefined, comparator)\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes elements from `array` corresponding to `indexes` and returns an\n","\t     * array of removed elements.\n","\t     *\n","\t     * **Note:** Unlike `_.at`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n","\t     * @returns {Array} Returns the new array of removed elements.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'd'];\n","\t     * var pulled = _.pullAt(array, [1, 3]);\n","\t     *\n","\t     * console.log(array);\n","\t     * // => ['a', 'c']\n","\t     *\n","\t     * console.log(pulled);\n","\t     * // => ['b', 'd']\n","\t     */\n","\t    var pullAt = flatRest(function(array, indexes) {\n","\t      var length = array == null ? 0 : array.length,\n","\t          result = baseAt(array, indexes);\n","\t\n","\t      basePullAt(array, arrayMap(indexes, function(index) {\n","\t        return isIndex(index, length) ? +index : index;\n","\t      }).sort(compareAscending));\n","\t\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Removes all elements from `array` that `predicate` returns truthy for\n","\t     * and returns an array of the removed elements. The predicate is invoked\n","\t     * with three arguments: (value, index, array).\n","\t     *\n","\t     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n","\t     * to pull elements from an array by value.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new array of removed elements.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3, 4];\n","\t     * var evens = _.remove(array, function(n) {\n","\t     *   return n % 2 == 0;\n","\t     * });\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 3]\n","\t     *\n","\t     * console.log(evens);\n","\t     * // => [2, 4]\n","\t     */\n","\t    function remove(array, predicate) {\n","\t      var result = [];\n","\t      if (!(array && array.length)) {\n","\t        return result;\n","\t      }\n","\t      var index = -1,\n","\t          indexes = [],\n","\t          length = array.length;\n","\t\n","\t      predicate = getIteratee(predicate, 3);\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (predicate(value, index, array)) {\n","\t          result.push(value);\n","\t          indexes.push(index);\n","\t        }\n","\t      }\n","\t      basePullAt(array, indexes);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverses `array` so that the first element becomes the last, the second\n","\t     * element becomes the second to last, and so on.\n","\t     *\n","\t     * **Note:** This method mutates `array` and is based on\n","\t     * [`Array#reverse`](https://mdn.io/Array/reverse).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _.reverse(array);\n","\t     * // => [3, 2, 1]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [3, 2, 1]\n","\t     */\n","\t    function reverse(array) {\n","\t      return array == null ? array : nativeReverse.call(array);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` from `start` up to, but not including, `end`.\n","\t     *\n","\t     * **Note:** This method is used instead of\n","\t     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n","\t     * returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to slice.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function slice(array, start, end) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n","\t        start = 0;\n","\t        end = length;\n","\t      }\n","\t      else {\n","\t        start = start == null ? 0 : toInteger(start);\n","\t        end = end === undefined ? length : toInteger(end);\n","\t      }\n","\t      return baseSlice(array, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * Uses a binary search to determine the lowest index at which `value`\n","\t     * should be inserted into `array` in order to maintain its sort order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedIndex([30, 50], 40);\n","\t     * // => 1\n","\t     */\n","\t    function sortedIndex(array, value) {\n","\t      return baseSortedIndex(array, value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n","\t     * which is invoked for `value` and each element of `array` to compute their\n","\t     * sort ranking. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n","\t     *\n","\t     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n","\t     * // => 0\n","\t     */\n","\t    function sortedIndexBy(array, value, iteratee) {\n","\t      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.indexOf` except that it performs a binary\n","\t     * search on a sorted `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n","\t     * // => 1\n","\t     */\n","\t    function sortedIndexOf(array, value) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (length) {\n","\t        var index = baseSortedIndex(array, value);\n","\t        if (index < length && eq(array[index], value)) {\n","\t          return index;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedIndex` except that it returns the highest\n","\t     * index at which `value` should be inserted into `array` in order to\n","\t     * maintain its sort order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n","\t     * // => 4\n","\t     */\n","\t    function sortedLastIndex(array, value) {\n","\t      return baseSortedIndex(array, value, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n","\t     * which is invoked for `value` and each element of `array` to compute their\n","\t     * sort ranking. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n","\t     *\n","\t     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n","\t     * // => 1\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n","\t     * // => 1\n","\t     */\n","\t    function sortedLastIndexBy(array, value, iteratee) {\n","\t      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.lastIndexOf` except that it performs a binary\n","\t     * search on a sorted `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n","\t     * // => 3\n","\t     */\n","\t    function sortedLastIndexOf(array, value) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (length) {\n","\t        var index = baseSortedIndex(array, value, true) - 1;\n","\t        if (eq(array[index], value)) {\n","\t          return index;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it's designed and optimized\n","\t     * for sorted arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.sortedUniq([1, 1, 2]);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function sortedUniq(array) {\n","\t      return (array && array.length)\n","\t        ? baseSortedUniq(array)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniqBy` except that it's designed and optimized\n","\t     * for sorted arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n","\t     * // => [1.1, 2.3]\n","\t     */\n","\t    function sortedUniqBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets all but the first element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.tail([1, 2, 3]);\n","\t     * // => [2, 3]\n","\t     */\n","\t    function tail(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseSlice(array, 1, length) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements taken from the beginning.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to take.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.take([1, 2, 3]);\n","\t     * // => [1]\n","\t     *\n","\t     * _.take([1, 2, 3], 2);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.take([1, 2, 3], 5);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * _.take([1, 2, 3], 0);\n","\t     * // => []\n","\t     */\n","\t    function take(array, n, guard) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      return baseSlice(array, 0, n < 0 ? 0 : n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements taken from the end.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to take.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.takeRight([1, 2, 3]);\n","\t     * // => [3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 2);\n","\t     * // => [2, 3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 5);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 0);\n","\t     * // => []\n","\t     */\n","\t    function takeRight(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      n = length - n;\n","\t      return baseSlice(array, n < 0 ? 0 : n, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with elements taken from the end. Elements are\n","\t     * taken until `predicate` returns falsey. The predicate is invoked with\n","\t     * three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.takeRightWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.takeRightWhile(users, ['active', false]);\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.takeRightWhile(users, 'active');\n","\t     * // => []\n","\t     */\n","\t    function takeRightWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with elements taken from the beginning. Elements\n","\t     * are taken until `predicate` returns falsey. The predicate is invoked with\n","\t     * three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.takeWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.takeWhile(users, ['active', false]);\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.takeWhile(users, 'active');\n","\t     * // => []\n","\t     */\n","\t    function takeWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3))\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of unique values, in order, from all given arrays using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * _.union([2], [1, 2]);\n","\t     * // => [2, 1]\n","\t     */\n","\t    var union = baseRest(function(arrays) {\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.union` except that it accepts `iteratee` which is\n","\t     * invoked for each element of each `arrays` to generate the criterion by\n","\t     * which uniqueness is computed. Result values are chosen from the first\n","\t     * array in which the value occurs. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n","\t     * // => [2.1, 1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }, { 'x': 2 }]\n","\t     */\n","\t    var unionBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.union` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `arrays`. Result values are chosen from\n","\t     * the first array in which the value occurs. The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.unionWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n","\t     */\n","\t    var unionWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays);\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a duplicate-free version of an array, using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons, in which only the first occurrence of each element\n","\t     * is kept. The order of result values is determined by the order they occur\n","\t     * in the array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.uniq([2, 1, 2]);\n","\t     * // => [2, 1]\n","\t     */\n","\t    function uniq(array) {\n","\t      return (array && array.length) ? baseUniq(array) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * uniqueness is computed. The order of result values is determined by the\n","\t     * order they occur in the array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n","\t     * // => [2.1, 1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }, { 'x': 2 }]\n","\t     */\n","\t    function uniqBy(array, iteratee) {\n","\t      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `array`. The order of result values is\n","\t     * determined by the order they occur in the array.The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.uniqWith(objects, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n","\t     */\n","\t    function uniqWith(array, comparator) {\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zip` except that it accepts an array of grouped\n","\t     * elements and creates an array regrouping the elements to their pre-zip\n","\t     * configuration.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.2.0\n","\t     * @category Array\n","\t     * @param {Array} array The array of grouped elements to process.\n","\t     * @returns {Array} Returns the new array of regrouped elements.\n","\t     * @example\n","\t     *\n","\t     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n","\t     * // => [['a', 1, true], ['b', 2, false]]\n","\t     *\n","\t     * _.unzip(zipped);\n","\t     * // => [['a', 'b'], [1, 2], [true, false]]\n","\t     */\n","\t    function unzip(array) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      var length = 0;\n","\t      array = arrayFilter(array, function(group) {\n","\t        if (isArrayLikeObject(group)) {\n","\t          length = nativeMax(group.length, length);\n","\t          return true;\n","\t        }\n","\t      });\n","\t      return baseTimes(length, function(index) {\n","\t        return arrayMap(array, baseProperty(index));\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n","\t     * how regrouped values should be combined. The iteratee is invoked with the\n","\t     * elements of each group: (...group).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Array\n","\t     * @param {Array} array The array of grouped elements to process.\n","\t     * @param {Function} [iteratee=_.identity] The function to combine\n","\t     *  regrouped values.\n","\t     * @returns {Array} Returns the new array of regrouped elements.\n","\t     * @example\n","\t     *\n","\t     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n","\t     * // => [[1, 10, 100], [2, 20, 200]]\n","\t     *\n","\t     * _.unzipWith(zipped, _.add);\n","\t     * // => [3, 30, 300]\n","\t     */\n","\t    function unzipWith(array, iteratee) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      var result = unzip(array);\n","\t      if (iteratee == null) {\n","\t        return result;\n","\t      }\n","\t      return arrayMap(result, function(group) {\n","\t        return apply(iteratee, undefined, group);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array excluding all given values using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * **Note:** Unlike `_.pull`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...*} [values] The values to exclude.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.difference, _.xor\n","\t     * @example\n","\t     *\n","\t     * _.without([2, 1, 2, 3], 1, 2);\n","\t     * // => [3]\n","\t     */\n","\t    var without = baseRest(function(array, values) {\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, values)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of unique values that is the\n","\t     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n","\t     * of the given arrays. The order of result values is determined by the order\n","\t     * they occur in the arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.difference, _.without\n","\t     * @example\n","\t     *\n","\t     * _.xor([2, 1], [2, 3]);\n","\t     * // => [1, 3]\n","\t     */\n","\t    var xor = baseRest(function(arrays) {\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.xor` except that it accepts `iteratee` which is\n","\t     * invoked for each element of each `arrays` to generate the criterion by\n","\t     * which by which they're compared. The order of result values is determined\n","\t     * by the order they occur in the arrays. The iteratee is invoked with one\n","\t     * argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [1.2, 3.4]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    var xorBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.xor` except that it accepts `comparator` which is\n","\t     * invoked to compare elements of `arrays`. The order of result values is\n","\t     * determined by the order they occur in the arrays. The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.xorWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n","\t     */\n","\t    var xorWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays);\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of grouped elements, the first of which contains the\n","\t     * first elements of the given arrays, the second of which contains the\n","\t     * second elements of the given arrays, and so on.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to process.\n","\t     * @returns {Array} Returns the new array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * _.zip(['a', 'b'], [1, 2], [true, false]);\n","\t     * // => [['a', 1, true], ['b', 2, false]]\n","\t     */\n","\t    var zip = baseRest(unzip);\n","\t\n","\t    /**\n","\t     * This method is like `_.fromPairs` except that it accepts two arrays,\n","\t     * one of property identifiers and one of corresponding values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.4.0\n","\t     * @category Array\n","\t     * @param {Array} [props=[]] The property identifiers.\n","\t     * @param {Array} [values=[]] The property values.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.zipObject(['a', 'b'], [1, 2]);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    function zipObject(props, values) {\n","\t      return baseZipObject(props || [], values || [], assignValue);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zipObject` except that it supports property paths.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.1.0\n","\t     * @category Array\n","\t     * @param {Array} [props=[]] The property identifiers.\n","\t     * @param {Array} [values=[]] The property values.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n","\t     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n","\t     */\n","\t    function zipObjectDeep(props, values) {\n","\t      return baseZipObject(props || [], values || [], baseSet);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zip` except that it accepts `iteratee` to specify\n","\t     * how grouped values should be combined. The iteratee is invoked with the\n","\t     * elements of each group: (...group).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to process.\n","\t     * @param {Function} [iteratee=_.identity] The function to combine\n","\t     *  grouped values.\n","\t     * @returns {Array} Returns the new array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n","\t     *   return a + b + c;\n","\t     * });\n","\t     * // => [111, 222]\n","\t     */\n","\t    var zipWith = baseRest(function(arrays) {\n","\t      var length = arrays.length,\n","\t          iteratee = length > 1 ? arrays[length - 1] : undefined;\n","\t\n","\t      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n","\t      return unzipWith(arrays, iteratee);\n","\t    });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n","\t     * chain sequences enabled. The result of such sequences must be unwrapped\n","\t     * with `_#value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.3.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to wrap.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36 },\n","\t     *   { 'user': 'fred',    'age': 40 },\n","\t     *   { 'user': 'pebbles', 'age': 1 }\n","\t     * ];\n","\t     *\n","\t     * var youngest = _\n","\t     *   .chain(users)\n","\t     *   .sortBy('age')\n","\t     *   .map(function(o) {\n","\t     *     return o.user + ' is ' + o.age;\n","\t     *   })\n","\t     *   .head()\n","\t     *   .value();\n","\t     * // => 'pebbles is 1'\n","\t     */\n","\t    function chain(value) {\n","\t      var result = lodash(value);\n","\t      result.__chain__ = true;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method invokes `interceptor` and returns `value`. The interceptor\n","\t     * is invoked with one argument; (value). The purpose of this method is to\n","\t     * \"tap into\" a method chain sequence in order to modify intermediate results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to provide to `interceptor`.\n","\t     * @param {Function} interceptor The function to invoke.\n","\t     * @returns {*} Returns `value`.\n","\t     * @example\n","\t     *\n","\t     * _([1, 2, 3])\n","\t     *  .tap(function(array) {\n","\t     *    // Mutate input array.\n","\t     *    array.pop();\n","\t     *  })\n","\t     *  .reverse()\n","\t     *  .value();\n","\t     * // => [2, 1]\n","\t     */\n","\t    function tap(value, interceptor) {\n","\t      interceptor(value);\n","\t      return value;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.tap` except that it returns the result of `interceptor`.\n","\t     * The purpose of this method is to \"pass thru\" values replacing intermediate\n","\t     * results in a method chain sequence.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to provide to `interceptor`.\n","\t     * @param {Function} interceptor The function to invoke.\n","\t     * @returns {*} Returns the result of `interceptor`.\n","\t     * @example\n","\t     *\n","\t     * _('  abc  ')\n","\t     *  .chain()\n","\t     *  .trim()\n","\t     *  .thru(function(value) {\n","\t     *    return [value];\n","\t     *  })\n","\t     *  .value();\n","\t     * // => ['abc']\n","\t     */\n","\t    function thru(value, interceptor) {\n","\t      return interceptor(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is the wrapper version of `_.at`.\n","\t     *\n","\t     * @name at\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Seq\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n","\t     *\n","\t     * _(object).at(['a[0].b.c', 'a[1]']).value();\n","\t     * // => [3, 4]\n","\t     */\n","\t    var wrapperAt = flatRest(function(paths) {\n","\t      var length = paths.length,\n","\t          start = length ? paths[0] : 0,\n","\t          value = this.__wrapped__,\n","\t          interceptor = function(object) { return baseAt(object, paths); };\n","\t\n","\t      if (length > 1 || this.__actions__.length ||\n","\t          !(value instanceof LazyWrapper) || !isIndex(start)) {\n","\t        return this.thru(interceptor);\n","\t      }\n","\t      value = value.slice(start, +start + (length ? 1 : 0));\n","\t      value.__actions__.push({\n","\t        'func': thru,\n","\t        'args': [interceptor],\n","\t        'thisArg': undefined\n","\t      });\n","\t      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n","\t        if (length && !array.length) {\n","\t          array.push(undefined);\n","\t        }\n","\t        return array;\n","\t      });\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n","\t     *\n","\t     * @name chain\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36 },\n","\t     *   { 'user': 'fred',   'age': 40 }\n","\t     * ];\n","\t     *\n","\t     * // A sequence without explicit chaining.\n","\t     * _(users).head();\n","\t     * // => { 'user': 'barney', 'age': 36 }\n","\t     *\n","\t     * // A sequence with explicit chaining.\n","\t     * _(users)\n","\t     *   .chain()\n","\t     *   .head()\n","\t     *   .pick('user')\n","\t     *   .value();\n","\t     * // => { 'user': 'barney' }\n","\t     */\n","\t    function wrapperChain() {\n","\t      return chain(this);\n","\t    }\n","\t\n","\t    /**\n","\t     * Executes the chain sequence and returns the wrapped result.\n","\t     *\n","\t     * @name commit\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2];\n","\t     * var wrapped = _(array).push(3);\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * wrapped = wrapped.commit();\n","\t     * console.log(array);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * wrapped.last();\n","\t     * // => 3\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function wrapperCommit() {\n","\t      return new LodashWrapper(this.value(), this.__chain__);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the next value on a wrapped object following the\n","\t     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n","\t     *\n","\t     * @name next\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the next iterator value.\n","\t     * @example\n","\t     *\n","\t     * var wrapped = _([1, 2]);\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': false, 'value': 1 }\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': false, 'value': 2 }\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': true, 'value': undefined }\n","\t     */\n","\t    function wrapperNext() {\n","\t      if (this.__values__ === undefined) {\n","\t        this.__values__ = toArray(this.value());\n","\t      }\n","\t      var done = this.__index__ >= this.__values__.length,\n","\t          value = done ? undefined : this.__values__[this.__index__++];\n","\t\n","\t      return { 'done': done, 'value': value };\n","\t    }\n","\t\n","\t    /**\n","\t     * Enables the wrapper to be iterable.\n","\t     *\n","\t     * @name Symbol.iterator\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the wrapper object.\n","\t     * @example\n","\t     *\n","\t     * var wrapped = _([1, 2]);\n","\t     *\n","\t     * wrapped[Symbol.iterator]() === wrapped;\n","\t     * // => true\n","\t     *\n","\t     * Array.from(wrapped);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function wrapperToIterator() {\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n","\t     *\n","\t     * @name plant\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to plant.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var wrapped = _([1, 2]).map(square);\n","\t     * var other = wrapped.plant([3, 4]);\n","\t     *\n","\t     * other.value();\n","\t     * // => [9, 16]\n","\t     *\n","\t     * wrapped.value();\n","\t     * // => [1, 4]\n","\t     */\n","\t    function wrapperPlant(value) {\n","\t      var result,\n","\t          parent = this;\n","\t\n","\t      while (parent instanceof baseLodash) {\n","\t        var clone = wrapperClone(parent);\n","\t        clone.__index__ = 0;\n","\t        clone.__values__ = undefined;\n","\t        if (result) {\n","\t          previous.__wrapped__ = clone;\n","\t        } else {\n","\t          result = clone;\n","\t        }\n","\t        var previous = clone;\n","\t        parent = parent.__wrapped__;\n","\t      }\n","\t      previous.__wrapped__ = value;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is the wrapper version of `_.reverse`.\n","\t     *\n","\t     * **Note:** This method mutates the wrapped array.\n","\t     *\n","\t     * @name reverse\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _(array).reverse().value()\n","\t     * // => [3, 2, 1]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [3, 2, 1]\n","\t     */\n","\t    function wrapperReverse() {\n","\t      var value = this.__wrapped__;\n","\t      if (value instanceof LazyWrapper) {\n","\t        var wrapped = value;\n","\t        if (this.__actions__.length) {\n","\t          wrapped = new LazyWrapper(this);\n","\t        }\n","\t        wrapped = wrapped.reverse();\n","\t        wrapped.__actions__.push({\n","\t          'func': thru,\n","\t          'args': [reverse],\n","\t          'thisArg': undefined\n","\t        });\n","\t        return new LodashWrapper(wrapped, this.__chain__);\n","\t      }\n","\t      return this.thru(reverse);\n","\t    }\n","\t\n","\t    /**\n","\t     * Executes the chain sequence to resolve the unwrapped value.\n","\t     *\n","\t     * @name value\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias toJSON, valueOf\n","\t     * @category Seq\n","\t     * @returns {*} Returns the resolved unwrapped value.\n","\t     * @example\n","\t     *\n","\t     * _([1, 2, 3]).value();\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function wrapperValue() {\n","\t      return baseWrapperValue(this.__wrapped__, this.__actions__);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The corresponding value of\n","\t     * each key is the number of times the key was returned by `iteratee`. The\n","\t     * iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n","\t     * // => { '4': 1, '6': 2 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.countBy(['one', 'two', 'three'], 'length');\n","\t     * // => { '3': 2, '5': 1 }\n","\t     */\n","\t    var countBy = createAggregator(function(result, value, key) {\n","\t      if (hasOwnProperty.call(result, key)) {\n","\t        ++result[key];\n","\t      } else {\n","\t        baseAssignValue(result, key, 1);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n","\t     * Iteration is stopped once `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * **Note:** This method returns `true` for\n","\t     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n","\t     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n","\t     * elements of empty collections.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.every([true, 1, null, 'yes'], Boolean);\n","\t     * // => false\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.every(users, { 'user': 'barney', 'active': false });\n","\t     * // => false\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.every(users, ['active', false]);\n","\t     * // => true\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.every(users, 'active');\n","\t     * // => false\n","\t     */\n","\t    function every(collection, predicate, guard) {\n","\t      var func = isArray(collection) ? arrayEvery : baseEvery;\n","\t      if (guard && isIterateeCall(collection, predicate, guard)) {\n","\t        predicate = undefined;\n","\t      }\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection`, returning an array of all elements\n","\t     * `predicate` returns truthy for. The predicate is invoked with three\n","\t     * arguments: (value, index|key, collection).\n","\t     *\n","\t     * **Note:** Unlike `_.remove`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     * @see _.reject\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.filter(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.filter(users, { 'age': 36, 'active': true });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.filter(users, ['active', false]);\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.filter(users, 'active');\n","\t     * // => objects for ['barney']\n","\t     */\n","\t    function filter(collection, predicate) {\n","\t      var func = isArray(collection) ? arrayFilter : baseFilter;\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection`, returning the first element\n","\t     * `predicate` returns truthy for. The predicate is invoked with three\n","\t     * arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {*} Returns the matched element, else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',    'age': 40, 'active': false },\n","\t     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.find(users, function(o) { return o.age < 40; });\n","\t     * // => object for 'barney'\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.find(users, { 'age': 1, 'active': true });\n","\t     * // => object for 'pebbles'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.find(users, ['active', false]);\n","\t     * // => object for 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.find(users, 'active');\n","\t     * // => object for 'barney'\n","\t     */\n","\t    var find = createFind(findIndex);\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=collection.length-1] The index to search from.\n","\t     * @returns {*} Returns the matched element, else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * _.findLast([1, 2, 3, 4], function(n) {\n","\t     *   return n % 2 == 1;\n","\t     * });\n","\t     * // => 3\n","\t     */\n","\t    var findLast = createFind(findLastIndex);\n","\t\n","\t    /**\n","\t     * Creates a flattened array of values by running each element in `collection`\n","\t     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n","\t     * with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [n, n];\n","\t     * }\n","\t     *\n","\t     * _.flatMap([1, 2], duplicate);\n","\t     * // => [1, 1, 2, 2]\n","\t     */\n","\t    function flatMap(collection, iteratee) {\n","\t      return baseFlatten(map(collection, iteratee), 1);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.flatMap` except that it recursively flattens the\n","\t     * mapped results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [[[n, n]]];\n","\t     * }\n","\t     *\n","\t     * _.flatMapDeep([1, 2], duplicate);\n","\t     * // => [1, 1, 2, 2]\n","\t     */\n","\t    function flatMapDeep(collection, iteratee) {\n","\t      return baseFlatten(map(collection, iteratee), INFINITY);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.flatMap` except that it recursively flattens the\n","\t     * mapped results up to `depth` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {number} [depth=1] The maximum recursion depth.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [[[n, n]]];\n","\t     * }\n","\t     *\n","\t     * _.flatMapDepth([1, 2], duplicate, 2);\n","\t     * // => [[1, 1], [2, 2]]\n","\t     */\n","\t    function flatMapDepth(collection, iteratee, depth) {\n","\t      depth = depth === undefined ? 1 : toInteger(depth);\n","\t      return baseFlatten(map(collection, iteratee), depth);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n","\t     * The iteratee is invoked with three arguments: (value, index|key, collection).\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n","\t     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n","\t     * or `_.forOwn` for object iteration.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias each\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     * @see _.forEachRight\n","\t     * @example\n","\t     *\n","\t     * _.forEach([1, 2], function(value) {\n","\t     *   console.log(value);\n","\t     * });\n","\t     * // => Logs `1` then `2`.\n","\t     *\n","\t     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n","\t     */\n","\t    function forEach(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayEach : baseEach;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forEach` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @alias eachRight\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     * @see _.forEach\n","\t     * @example\n","\t     *\n","\t     * _.forEachRight([1, 2], function(value) {\n","\t     *   console.log(value);\n","\t     * });\n","\t     * // => Logs `2` then `1`.\n","\t     */\n","\t    function forEachRight(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The order of grouped values\n","\t     * is determined by the order they occur in `collection`. The corresponding\n","\t     * value of each key is an array of elements responsible for generating the\n","\t     * key. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n","\t     * // => { '4': [4.2], '6': [6.1, 6.3] }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.groupBy(['one', 'two', 'three'], 'length');\n","\t     * // => { '3': ['one', 'two'], '5': ['three'] }\n","\t     */\n","\t    var groupBy = createAggregator(function(result, value, key) {\n","\t      if (hasOwnProperty.call(result, key)) {\n","\t        result[key].push(value);\n","\t      } else {\n","\t        baseAssignValue(result, key, [value]);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `value` is in `collection`. If `collection` is a string, it's\n","\t     * checked for a substring of `value`, otherwise\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n","\t     * the offset from the end of `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object|string} collection The collection to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n","\t     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.includes([1, 2, 3], 1);\n","\t     * // => true\n","\t     *\n","\t     * _.includes([1, 2, 3], 1, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.includes({ 'a': 1, 'b': 2 }, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.includes('abcd', 'bc');\n","\t     * // => true\n","\t     */\n","\t    function includes(collection, value, fromIndex, guard) {\n","\t      collection = isArrayLike(collection) ? collection : values(collection);\n","\t      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n","\t\n","\t      var length = collection.length;\n","\t      if (fromIndex < 0) {\n","\t        fromIndex = nativeMax(length + fromIndex, 0);\n","\t      }\n","\t      return isString(collection)\n","\t        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n","\t        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n","\t    }\n","\t\n","\t    /**\n","\t     * Invokes the method at `path` of each element in `collection`, returning\n","\t     * an array of the results of each invoked method. Any additional arguments\n","\t     * are provided to each invoked method. If `path` is a function, it's invoked\n","\t     * for, and `this` bound to, each element in `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Array|Function|string} path The path of the method to invoke or\n","\t     *  the function invoked per iteration.\n","\t     * @param {...*} [args] The arguments to invoke each method with.\n","\t     * @returns {Array} Returns the array of results.\n","\t     * @example\n","\t     *\n","\t     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n","\t     * // => [[1, 5, 7], [1, 2, 3]]\n","\t     *\n","\t     * _.invokeMap([123, 456], String.prototype.split, '');\n","\t     * // => [['1', '2', '3'], ['4', '5', '6']]\n","\t     */\n","\t    var invokeMap = baseRest(function(collection, path, args) {\n","\t      var index = -1,\n","\t          isFunc = typeof path == 'function',\n","\t          result = isArrayLike(collection) ? Array(collection.length) : [];\n","\t\n","\t      baseEach(collection, function(value) {\n","\t        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n","\t      });\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The corresponding value of\n","\t     * each key is the last element responsible for generating the key. The\n","\t     * iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * var array = [\n","\t     *   { 'dir': 'left', 'code': 97 },\n","\t     *   { 'dir': 'right', 'code': 100 }\n","\t     * ];\n","\t     *\n","\t     * _.keyBy(array, function(o) {\n","\t     *   return String.fromCharCode(o.code);\n","\t     * });\n","\t     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n","\t     *\n","\t     * _.keyBy(array, 'dir');\n","\t     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n","\t     */\n","\t    var keyBy = createAggregator(function(result, value, key) {\n","\t      baseAssignValue(result, key, value);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of values by running each element in `collection` thru\n","\t     * `iteratee`. The iteratee is invoked with three arguments:\n","\t     * (value, index|key, collection).\n","\t     *\n","\t     * Many lodash methods are guarded to work as iteratees for methods like\n","\t     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n","\t     *\n","\t     * The guarded methods are:\n","\t     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n","\t     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n","\t     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n","\t     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new mapped array.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * _.map([4, 8], square);\n","\t     * // => [16, 64]\n","\t     *\n","\t     * _.map({ 'a': 4, 'b': 8 }, square);\n","\t     * // => [16, 64] (iteration order is not guaranteed)\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney' },\n","\t     *   { 'user': 'fred' }\n","\t     * ];\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.map(users, 'user');\n","\t     * // => ['barney', 'fred']\n","\t     */\n","\t    function map(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayMap : baseMap;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortBy` except that it allows specifying the sort\n","\t     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n","\t     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n","\t     * descending or \"asc\" for ascending sort order of corresponding values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n","\t     *  The iteratees to sort by.\n","\t     * @param {string[]} [orders] The sort orders of `iteratees`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'fred',   'age': 48 },\n","\t     *   { 'user': 'barney', 'age': 34 },\n","\t     *   { 'user': 'fred',   'age': 40 },\n","\t     *   { 'user': 'barney', 'age': 36 }\n","\t     * ];\n","\t     *\n","\t     * // Sort by `user` in ascending order and by `age` in descending order.\n","\t     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n","\t     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n","\t     */\n","\t    function orderBy(collection, iteratees, orders, guard) {\n","\t      if (collection == null) {\n","\t        return [];\n","\t      }\n","\t      if (!isArray(iteratees)) {\n","\t        iteratees = iteratees == null ? [] : [iteratees];\n","\t      }\n","\t      orders = guard ? undefined : orders;\n","\t      if (!isArray(orders)) {\n","\t        orders = orders == null ? [] : [orders];\n","\t      }\n","\t      return baseOrderBy(collection, iteratees, orders);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of elements split into two groups, the first of which\n","\t     * contains elements `predicate` returns truthy for, the second of which\n","\t     * contains elements `predicate` returns falsey for. The predicate is\n","\t     * invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',    'age': 40, 'active': true },\n","\t     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.partition(users, function(o) { return o.active; });\n","\t     * // => objects for [['fred'], ['barney', 'pebbles']]\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.partition(users, { 'age': 1, 'active': false });\n","\t     * // => objects for [['pebbles'], ['barney', 'fred']]\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.partition(users, ['active', false]);\n","\t     * // => objects for [['barney', 'pebbles'], ['fred']]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.partition(users, 'active');\n","\t     * // => objects for [['fred'], ['barney', 'pebbles']]\n","\t     */\n","\t    var partition = createAggregator(function(result, value, key) {\n","\t      result[key ? 0 : 1].push(value);\n","\t    }, function() { return [[], []]; });\n","\t\n","\t    /**\n","\t     * Reduces `collection` to a value which is the accumulated result of running\n","\t     * each element in `collection` thru `iteratee`, where each successive\n","\t     * invocation is supplied the return value of the previous. If `accumulator`\n","\t     * is not given, the first element of `collection` is used as the initial\n","\t     * value. The iteratee is invoked with four arguments:\n","\t     * (accumulator, value, index|key, collection).\n","\t     *\n","\t     * Many lodash methods are guarded to work as iteratees for methods like\n","\t     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n","\t     *\n","\t     * The guarded methods are:\n","\t     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n","\t     * and `sortBy`\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The initial value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @see _.reduceRight\n","\t     * @example\n","\t     *\n","\t     * _.reduce([1, 2], function(sum, n) {\n","\t     *   return sum + n;\n","\t     * }, 0);\n","\t     * // => 3\n","\t     *\n","\t     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n","\t     *   (result[value] || (result[value] = [])).push(key);\n","\t     *   return result;\n","\t     * }, {});\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n","\t     */\n","\t    function reduce(collection, iteratee, accumulator) {\n","\t      var func = isArray(collection) ? arrayReduce : baseReduce,\n","\t          initAccum = arguments.length < 3;\n","\t\n","\t      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.reduce` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The initial value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @see _.reduce\n","\t     * @example\n","\t     *\n","\t     * var array = [[0, 1], [2, 3], [4, 5]];\n","\t     *\n","\t     * _.reduceRight(array, function(flattened, other) {\n","\t     *   return flattened.concat(other);\n","\t     * }, []);\n","\t     * // => [4, 5, 2, 3, 0, 1]\n","\t     */\n","\t    function reduceRight(collection, iteratee, accumulator) {\n","\t      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n","\t          initAccum = arguments.length < 3;\n","\t\n","\t      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.filter`; this method returns the elements of `collection`\n","\t     * that `predicate` does **not** return truthy for.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     * @see _.filter\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.reject(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.reject(users, { 'age': 40, 'active': true });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.reject(users, ['active', false]);\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.reject(users, 'active');\n","\t     * // => objects for ['barney']\n","\t     */\n","\t    function reject(collection, predicate) {\n","\t      var func = isArray(collection) ? arrayFilter : baseFilter;\n","\t      return func(collection, negate(getIteratee(predicate, 3)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets a random element from `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     * @example\n","\t     *\n","\t     * _.sample([1, 2, 3, 4]);\n","\t     * // => 2\n","\t     */\n","\t    function sample(collection) {\n","\t      var func = isArray(collection) ? arraySample : baseSample;\n","\t      return func(collection);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets `n` random elements at unique keys from `collection` up to the\n","\t     * size of `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @param {number} [n=1] The number of elements to sample.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the random elements.\n","\t     * @example\n","\t     *\n","\t     * _.sampleSize([1, 2, 3], 2);\n","\t     * // => [3, 1]\n","\t     *\n","\t     * _.sampleSize([1, 2, 3], 4);\n","\t     * // => [2, 3, 1]\n","\t     */\n","\t    function sampleSize(collection, n, guard) {\n","\t      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n","\t        n = 1;\n","\t      } else {\n","\t        n = toInteger(n);\n","\t      }\n","\t      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n","\t      return func(collection, n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of shuffled values, using a version of the\n","\t     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     * @example\n","\t     *\n","\t     * _.shuffle([1, 2, 3, 4]);\n","\t     * // => [4, 1, 3, 2]\n","\t     */\n","\t    function shuffle(collection) {\n","\t      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n","\t      return func(collection);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the size of `collection` by returning its length for array-like\n","\t     * values or the number of own enumerable string keyed properties for objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object|string} collection The collection to inspect.\n","\t     * @returns {number} Returns the collection size.\n","\t     * @example\n","\t     *\n","\t     * _.size([1, 2, 3]);\n","\t     * // => 3\n","\t     *\n","\t     * _.size({ 'a': 1, 'b': 2 });\n","\t     * // => 2\n","\t     *\n","\t     * _.size('pebbles');\n","\t     * // => 7\n","\t     */\n","\t    function size(collection) {\n","\t      if (collection == null) {\n","\t        return 0;\n","\t      }\n","\t      if (isArrayLike(collection)) {\n","\t        return isString(collection) ? stringSize(collection) : collection.length;\n","\t      }\n","\t      var tag = getTag(collection);\n","\t      if (tag == mapTag || tag == setTag) {\n","\t        return collection.size;\n","\t      }\n","\t      return baseKeys(collection).length;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `predicate` returns truthy for **any** element of `collection`.\n","\t     * Iteration is stopped once `predicate` returns truthy. The predicate is\n","\t     * invoked with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.some([null, 0, 'yes', false], Boolean);\n","\t     * // => true\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'active': true },\n","\t     *   { 'user': 'fred',   'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.some(users, { 'user': 'barney', 'active': false });\n","\t     * // => false\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.some(users, ['active', false]);\n","\t     * // => true\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.some(users, 'active');\n","\t     * // => true\n","\t     */\n","\t    function some(collection, predicate, guard) {\n","\t      var func = isArray(collection) ? arraySome : baseSome;\n","\t      if (guard && isIterateeCall(collection, predicate, guard)) {\n","\t        predicate = undefined;\n","\t      }\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of elements, sorted in ascending order by the results of\n","\t     * running each element in a collection thru each iteratee. This method\n","\t     * performs a stable sort, that is, it preserves the original sort order of\n","\t     * equal elements. The iteratees are invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n","\t     *  The iteratees to sort by.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'fred',   'age': 48 },\n","\t     *   { 'user': 'barney', 'age': 36 },\n","\t     *   { 'user': 'fred',   'age': 40 },\n","\t     *   { 'user': 'barney', 'age': 34 }\n","\t     * ];\n","\t     *\n","\t     * _.sortBy(users, [function(o) { return o.user; }]);\n","\t     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n","\t     *\n","\t     * _.sortBy(users, ['user', 'age']);\n","\t     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n","\t     */\n","\t    var sortBy = baseRest(function(collection, iteratees) {\n","\t      if (collection == null) {\n","\t        return [];\n","\t      }\n","\t      var length = iteratees.length;\n","\t      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n","\t        iteratees = [];\n","\t      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n","\t        iteratees = [iteratees[0]];\n","\t      }\n","\t      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n","\t    });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Gets the timestamp of the number of milliseconds that have elapsed since\n","\t     * the Unix epoch (1 January 1970 00:00:00 UTC).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Date\n","\t     * @returns {number} Returns the timestamp.\n","\t     * @example\n","\t     *\n","\t     * _.defer(function(stamp) {\n","\t     *   console.log(_.now() - stamp);\n","\t     * }, _.now());\n","\t     * // => Logs the number of milliseconds it took for the deferred invocation.\n","\t     */\n","\t    var now = ctxNow || function() {\n","\t      return root.Date.now();\n","\t    };\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * The opposite of `_.before`; this method creates a function that invokes\n","\t     * `func` once it's called `n` or more times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {number} n The number of calls before `func` is invoked.\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * var saves = ['profile', 'settings'];\n","\t     *\n","\t     * var done = _.after(saves.length, function() {\n","\t     *   console.log('done saving!');\n","\t     * });\n","\t     *\n","\t     * _.forEach(saves, function(type) {\n","\t     *   asyncSave({ 'type': type, 'complete': done });\n","\t     * });\n","\t     * // => Logs 'done saving!' after the two async saves have completed.\n","\t     */\n","\t    function after(n, func) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      n = toInteger(n);\n","\t      return function() {\n","\t        if (--n < 1) {\n","\t          return func.apply(this, arguments);\n","\t        }\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func`, with up to `n` arguments,\n","\t     * ignoring any additional arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to cap arguments for.\n","\t     * @param {number} [n=func.length] The arity cap.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new capped function.\n","\t     * @example\n","\t     *\n","\t     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function ary(func, n, guard) {\n","\t      n = guard ? undefined : n;\n","\t      n = (func && n == null) ? func.length : n;\n","\t      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func`, with the `this` binding and arguments\n","\t     * of the created function, while it's called less than `n` times. Subsequent\n","\t     * calls to the created function return the result of the last `func` invocation.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {number} n The number of calls at which `func` is no longer invoked.\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * jQuery(element).on('click', _.before(5, addContactToList));\n","\t     * // => Allows adding up to 4 contacts to the list.\n","\t     */\n","\t    function before(n, func) {\n","\t      var result;\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      n = toInteger(n);\n","\t      return function() {\n","\t        if (--n > 0) {\n","\t          result = func.apply(this, arguments);\n","\t        }\n","\t        if (n <= 1) {\n","\t          func = undefined;\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n","\t     * and `partials` prepended to the arguments it receives.\n","\t     *\n","\t     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n","\t     * may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n","\t     * property of bound functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to bind.\n","\t     * @param {*} thisArg The `this` binding of `func`.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new bound function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, punctuation) {\n","\t     *   return greeting + ' ' + this.user + punctuation;\n","\t     * }\n","\t     *\n","\t     * var object = { 'user': 'fred' };\n","\t     *\n","\t     * var bound = _.bind(greet, object, 'hi');\n","\t     * bound('!');\n","\t     * // => 'hi fred!'\n","\t     *\n","\t     * // Bound with placeholders.\n","\t     * var bound = _.bind(greet, object, _, '!');\n","\t     * bound('hi');\n","\t     * // => 'hi fred!'\n","\t     */\n","\t    var bind = baseRest(function(func, thisArg, partials) {\n","\t      var bitmask = WRAP_BIND_FLAG;\n","\t      if (partials.length) {\n","\t        var holders = replaceHolders(partials, getHolder(bind));\n","\t        bitmask |= WRAP_PARTIAL_FLAG;\n","\t      }\n","\t      return createWrap(func, bitmask, thisArg, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the method at `object[key]` with `partials`\n","\t     * prepended to the arguments it receives.\n","\t     *\n","\t     * This method differs from `_.bind` by allowing bound functions to reference\n","\t     * methods that may be redefined or don't yet exist. See\n","\t     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n","\t     * for more details.\n","\t     *\n","\t     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.10.0\n","\t     * @category Function\n","\t     * @param {Object} object The object to invoke the method on.\n","\t     * @param {string} key The key of the method.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new bound function.\n","\t     * @example\n","\t     *\n","\t     * var object = {\n","\t     *   'user': 'fred',\n","\t     *   'greet': function(greeting, punctuation) {\n","\t     *     return greeting + ' ' + this.user + punctuation;\n","\t     *   }\n","\t     * };\n","\t     *\n","\t     * var bound = _.bindKey(object, 'greet', 'hi');\n","\t     * bound('!');\n","\t     * // => 'hi fred!'\n","\t     *\n","\t     * object.greet = function(greeting, punctuation) {\n","\t     *   return greeting + 'ya ' + this.user + punctuation;\n","\t     * };\n","\t     *\n","\t     * bound('!');\n","\t     * // => 'hiya fred!'\n","\t     *\n","\t     * // Bound with placeholders.\n","\t     * var bound = _.bindKey(object, 'greet', _, '!');\n","\t     * bound('hi');\n","\t     * // => 'hiya fred!'\n","\t     */\n","\t    var bindKey = baseRest(function(object, key, partials) {\n","\t      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n","\t      if (partials.length) {\n","\t        var holders = replaceHolders(partials, getHolder(bindKey));\n","\t        bitmask |= WRAP_PARTIAL_FLAG;\n","\t      }\n","\t      return createWrap(key, bitmask, object, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that accepts arguments of `func` and either invokes\n","\t     * `func` returning its result, if at least `arity` number of arguments have\n","\t     * been provided, or returns a function that accepts the remaining `func`\n","\t     * arguments, and so on. The arity of `func` may be specified if `func.length`\n","\t     * is not sufficient.\n","\t     *\n","\t     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n","\t     * may be used as a placeholder for provided arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of curried functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to curry.\n","\t     * @param {number} [arity=func.length] The arity of `func`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new curried function.\n","\t     * @example\n","\t     *\n","\t     * var abc = function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * };\n","\t     *\n","\t     * var curried = _.curry(abc);\n","\t     *\n","\t     * curried(1)(2)(3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2)(3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2, 3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * // Curried with placeholders.\n","\t     * curried(1)(_, 3)(2);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function curry(func, arity, guard) {\n","\t      arity = guard ? undefined : arity;\n","\t      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n","\t      result.placeholder = curry.placeholder;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.curry` except that arguments are applied to `func`\n","\t     * in the manner of `_.partialRight` instead of `_.partial`.\n","\t     *\n","\t     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for provided arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of curried functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to curry.\n","\t     * @param {number} [arity=func.length] The arity of `func`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new curried function.\n","\t     * @example\n","\t     *\n","\t     * var abc = function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * };\n","\t     *\n","\t     * var curried = _.curryRight(abc);\n","\t     *\n","\t     * curried(3)(2)(1);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(2, 3)(1);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2, 3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * // Curried with placeholders.\n","\t     * curried(3)(1, _)(2);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function curryRight(func, arity, guard) {\n","\t      arity = guard ? undefined : arity;\n","\t      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n","\t      result.placeholder = curryRight.placeholder;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a debounced function that delays invoking `func` until after `wait`\n","\t     * milliseconds have elapsed since the last time the debounced function was\n","\t     * invoked. The debounced function comes with a `cancel` method to cancel\n","\t     * delayed `func` invocations and a `flush` method to immediately invoke them.\n","\t     * Provide `options` to indicate whether `func` should be invoked on the\n","\t     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n","\t     * with the last arguments provided to the debounced function. Subsequent\n","\t     * calls to the debounced function return the result of the last `func`\n","\t     * invocation.\n","\t     *\n","\t     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n","\t     * invoked on the trailing edge of the timeout only if the debounced function\n","\t     * is invoked more than once during the `wait` timeout.\n","\t     *\n","\t     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n","\t     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n","\t     *\n","\t     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n","\t     * for details over the differences between `_.debounce` and `_.throttle`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to debounce.\n","\t     * @param {number} [wait=0] The number of milliseconds to delay.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.leading=false]\n","\t     *  Specify invoking on the leading edge of the timeout.\n","\t     * @param {number} [options.maxWait]\n","\t     *  The maximum time `func` is allowed to be delayed before it's invoked.\n","\t     * @param {boolean} [options.trailing=true]\n","\t     *  Specify invoking on the trailing edge of the timeout.\n","\t     * @returns {Function} Returns the new debounced function.\n","\t     * @example\n","\t     *\n","\t     * // Avoid costly calculations while the window size is in flux.\n","\t     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n","\t     *\n","\t     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n","\t     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n","\t     *   'leading': true,\n","\t     *   'trailing': false\n","\t     * }));\n","\t     *\n","\t     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n","\t     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n","\t     * var source = new EventSource('/stream');\n","\t     * jQuery(source).on('message', debounced);\n","\t     *\n","\t     * // Cancel the trailing debounced invocation.\n","\t     * jQuery(window).on('popstate', debounced.cancel);\n","\t     */\n","\t    function debounce(func, wait, options) {\n","\t      var lastArgs,\n","\t          lastThis,\n","\t          maxWait,\n","\t          result,\n","\t          timerId,\n","\t          lastCallTime,\n","\t          lastInvokeTime = 0,\n","\t          leading = false,\n","\t          maxing = false,\n","\t          trailing = true;\n","\t\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      wait = toNumber(wait) || 0;\n","\t      if (isObject(options)) {\n","\t        leading = !!options.leading;\n","\t        maxing = 'maxWait' in options;\n","\t        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n","\t        trailing = 'trailing' in options ? !!options.trailing : trailing;\n","\t      }\n","\t\n","\t      function invokeFunc(time) {\n","\t        var args = lastArgs,\n","\t            thisArg = lastThis;\n","\t\n","\t        lastArgs = lastThis = undefined;\n","\t        lastInvokeTime = time;\n","\t        result = func.apply(thisArg, args);\n","\t        return result;\n","\t      }\n","\t\n","\t      function leadingEdge(time) {\n","\t        // Reset any `maxWait` timer.\n","\t        lastInvokeTime = time;\n","\t        // Start the timer for the trailing edge.\n","\t        timerId = setTimeout(timerExpired, wait);\n","\t        // Invoke the leading edge.\n","\t        return leading ? invokeFunc(time) : result;\n","\t      }\n","\t\n","\t      function remainingWait(time) {\n","\t        var timeSinceLastCall = time - lastCallTime,\n","\t            timeSinceLastInvoke = time - lastInvokeTime,\n","\t            timeWaiting = wait - timeSinceLastCall;\n","\t\n","\t        return maxing\n","\t          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n","\t          : timeWaiting;\n","\t      }\n","\t\n","\t      function shouldInvoke(time) {\n","\t        var timeSinceLastCall = time - lastCallTime,\n","\t            timeSinceLastInvoke = time - lastInvokeTime;\n","\t\n","\t        // Either this is the first call, activity has stopped and we're at the\n","\t        // trailing edge, the system time has gone backwards and we're treating\n","\t        // it as the trailing edge, or we've hit the `maxWait` limit.\n","\t        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n","\t          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n","\t      }\n","\t\n","\t      function timerExpired() {\n","\t        var time = now();\n","\t        if (shouldInvoke(time)) {\n","\t          return trailingEdge(time);\n","\t        }\n","\t        // Restart the timer.\n","\t        timerId = setTimeout(timerExpired, remainingWait(time));\n","\t      }\n","\t\n","\t      function trailingEdge(time) {\n","\t        timerId = undefined;\n","\t\n","\t        // Only invoke if we have `lastArgs` which means `func` has been\n","\t        // debounced at least once.\n","\t        if (trailing && lastArgs) {\n","\t          return invokeFunc(time);\n","\t        }\n","\t        lastArgs = lastThis = undefined;\n","\t        return result;\n","\t      }\n","\t\n","\t      function cancel() {\n","\t        if (timerId !== undefined) {\n","\t          clearTimeout(timerId);\n","\t        }\n","\t        lastInvokeTime = 0;\n","\t        lastArgs = lastCallTime = lastThis = timerId = undefined;\n","\t      }\n","\t\n","\t      function flush() {\n","\t        return timerId === undefined ? result : trailingEdge(now());\n","\t      }\n","\t\n","\t      function debounced() {\n","\t        var time = now(),\n","\t            isInvoking = shouldInvoke(time);\n","\t\n","\t        lastArgs = arguments;\n","\t        lastThis = this;\n","\t        lastCallTime = time;\n","\t\n","\t        if (isInvoking) {\n","\t          if (timerId === undefined) {\n","\t            return leadingEdge(lastCallTime);\n","\t          }\n","\t          if (maxing) {\n","\t            // Handle invocations in a tight loop.\n","\t            timerId = setTimeout(timerExpired, wait);\n","\t            return invokeFunc(lastCallTime);\n","\t          }\n","\t        }\n","\t        if (timerId === undefined) {\n","\t          timerId = setTimeout(timerExpired, wait);\n","\t        }\n","\t        return result;\n","\t      }\n","\t      debounced.cancel = cancel;\n","\t      debounced.flush = flush;\n","\t      return debounced;\n","\t    }\n","\t\n","\t    /**\n","\t     * Defers invoking the `func` until the current call stack has cleared. Any\n","\t     * additional arguments are provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to defer.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {number} Returns the timer id.\n","\t     * @example\n","\t     *\n","\t     * _.defer(function(text) {\n","\t     *   console.log(text);\n","\t     * }, 'deferred');\n","\t     * // => Logs 'deferred' after one millisecond.\n","\t     */\n","\t    var defer = baseRest(function(func, args) {\n","\t      return baseDelay(func, 1, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n","\t     * provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {number} Returns the timer id.\n","\t     * @example\n","\t     *\n","\t     * _.delay(function(text) {\n","\t     *   console.log(text);\n","\t     * }, 1000, 'later');\n","\t     * // => Logs 'later' after one second.\n","\t     */\n","\t    var delay = baseRest(function(func, wait, args) {\n","\t      return baseDelay(func, toNumber(wait) || 0, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with arguments reversed.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to flip arguments for.\n","\t     * @returns {Function} Returns the new flipped function.\n","\t     * @example\n","\t     *\n","\t     * var flipped = _.flip(function() {\n","\t     *   return _.toArray(arguments);\n","\t     * });\n","\t     *\n","\t     * flipped('a', 'b', 'c', 'd');\n","\t     * // => ['d', 'c', 'b', 'a']\n","\t     */\n","\t    function flip(func) {\n","\t      return createWrap(func, WRAP_FLIP_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that memoizes the result of `func`. If `resolver` is\n","\t     * provided, it determines the cache key for storing the result based on the\n","\t     * arguments provided to the memoized function. By default, the first argument\n","\t     * provided to the memoized function is used as the map cache key. The `func`\n","\t     * is invoked with the `this` binding of the memoized function.\n","\t     *\n","\t     * **Note:** The cache is exposed as the `cache` property on the memoized\n","\t     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n","\t     * constructor with one whose instances implement the\n","\t     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n","\t     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to have its output memoized.\n","\t     * @param {Function} [resolver] The function to resolve the cache key.\n","\t     * @returns {Function} Returns the new memoized function.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     * var other = { 'c': 3, 'd': 4 };\n","\t     *\n","\t     * var values = _.memoize(_.values);\n","\t     * values(object);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * values(other);\n","\t     * // => [3, 4]\n","\t     *\n","\t     * object.a = 2;\n","\t     * values(object);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * // Modify the result cache.\n","\t     * values.cache.set(object, ['a', 'b']);\n","\t     * values(object);\n","\t     * // => ['a', 'b']\n","\t     *\n","\t     * // Replace `_.memoize.Cache`.\n","\t     * _.memoize.Cache = WeakMap;\n","\t     */\n","\t    function memoize(func, resolver) {\n","\t      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      var memoized = function() {\n","\t        var args = arguments,\n","\t            key = resolver ? resolver.apply(this, args) : args[0],\n","\t            cache = memoized.cache;\n","\t\n","\t        if (cache.has(key)) {\n","\t          return cache.get(key);\n","\t        }\n","\t        var result = func.apply(this, args);\n","\t        memoized.cache = cache.set(key, result) || cache;\n","\t        return result;\n","\t      };\n","\t      memoized.cache = new (memoize.Cache || MapCache);\n","\t      return memoized;\n","\t    }\n","\t\n","\t    // Expose `MapCache`.\n","\t    memoize.Cache = MapCache;\n","\t\n","\t    /**\n","\t     * Creates a function that negates the result of the predicate `func`. The\n","\t     * `func` predicate is invoked with the `this` binding and arguments of the\n","\t     * created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} predicate The predicate to negate.\n","\t     * @returns {Function} Returns the new negated function.\n","\t     * @example\n","\t     *\n","\t     * function isEven(n) {\n","\t     *   return n % 2 == 0;\n","\t     * }\n","\t     *\n","\t     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n","\t     * // => [1, 3, 5]\n","\t     */\n","\t    function negate(predicate) {\n","\t      if (typeof predicate != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      return function() {\n","\t        var args = arguments;\n","\t        switch (args.length) {\n","\t          case 0: return !predicate.call(this);\n","\t          case 1: return !predicate.call(this, args[0]);\n","\t          case 2: return !predicate.call(this, args[0], args[1]);\n","\t          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n","\t        }\n","\t        return !predicate.apply(this, args);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that is restricted to invoking `func` once. Repeat calls\n","\t     * to the function return the value of the first invocation. The `func` is\n","\t     * invoked with the `this` binding and arguments of the created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * var initialize = _.once(createApplication);\n","\t     * initialize();\n","\t     * initialize();\n","\t     * // => `createApplication` is invoked once\n","\t     */\n","\t    function once(func) {\n","\t      return before(2, func);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with its arguments transformed.\n","\t     *\n","\t     * @static\n","\t     * @since 4.0.0\n","\t     * @memberOf _\n","\t     * @category Function\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {...(Function|Function[])} [transforms=[_.identity]]\n","\t     *  The argument transforms.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * function doubled(n) {\n","\t     *   return n * 2;\n","\t     * }\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var func = _.overArgs(function(x, y) {\n","\t     *   return [x, y];\n","\t     * }, [square, doubled]);\n","\t     *\n","\t     * func(9, 3);\n","\t     * // => [81, 6]\n","\t     *\n","\t     * func(10, 5);\n","\t     * // => [100, 10]\n","\t     */\n","\t    var overArgs = castRest(function(func, transforms) {\n","\t      transforms = (transforms.length == 1 && isArray(transforms[0]))\n","\t        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n","\t        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n","\t\n","\t      var funcsLength = transforms.length;\n","\t      return baseRest(function(args) {\n","\t        var index = -1,\n","\t            length = nativeMin(args.length, funcsLength);\n","\t\n","\t        while (++index < length) {\n","\t          args[index] = transforms[index].call(this, args[index]);\n","\t        }\n","\t        return apply(func, this, args);\n","\t      });\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with `partials` prepended to the\n","\t     * arguments it receives. This method is like `_.bind` except it does **not**\n","\t     * alter the `this` binding.\n","\t     *\n","\t     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of partially\n","\t     * applied functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.2.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to partially apply arguments to.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new partially applied function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, name) {\n","\t     *   return greeting + ' ' + name;\n","\t     * }\n","\t     *\n","\t     * var sayHelloTo = _.partial(greet, 'hello');\n","\t     * sayHelloTo('fred');\n","\t     * // => 'hello fred'\n","\t     *\n","\t     * // Partially applied with placeholders.\n","\t     * var greetFred = _.partial(greet, _, 'fred');\n","\t     * greetFred('hi');\n","\t     * // => 'hi fred'\n","\t     */\n","\t    var partial = baseRest(function(func, partials) {\n","\t      var holders = replaceHolders(partials, getHolder(partial));\n","\t      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.partial` except that partially applied arguments\n","\t     * are appended to the arguments it receives.\n","\t     *\n","\t     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of partially\n","\t     * applied functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to partially apply arguments to.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new partially applied function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, name) {\n","\t     *   return greeting + ' ' + name;\n","\t     * }\n","\t     *\n","\t     * var greetFred = _.partialRight(greet, 'fred');\n","\t     * greetFred('hi');\n","\t     * // => 'hi fred'\n","\t     *\n","\t     * // Partially applied with placeholders.\n","\t     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n","\t     * sayHelloTo('fred');\n","\t     * // => 'hello fred'\n","\t     */\n","\t    var partialRight = baseRest(function(func, partials) {\n","\t      var holders = replaceHolders(partials, getHolder(partialRight));\n","\t      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with arguments arranged according\n","\t     * to the specified `indexes` where the argument value at the first index is\n","\t     * provided as the first argument, the argument value at the second index is\n","\t     * provided as the second argument, and so on.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to rearrange arguments for.\n","\t     * @param {...(number|number[])} indexes The arranged argument indexes.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var rearged = _.rearg(function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * }, [2, 0, 1]);\n","\t     *\n","\t     * rearged('b', 'c', 'a')\n","\t     * // => ['a', 'b', 'c']\n","\t     */\n","\t    var rearg = flatRest(function(func, indexes) {\n","\t      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of the\n","\t     * created function and arguments from `start` and beyond provided as\n","\t     * an array.\n","\t     *\n","\t     * **Note:** This method is based on the\n","\t     * [rest parameter](https://mdn.io/rest_parameters).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var say = _.rest(function(what, names) {\n","\t     *   return what + ' ' + _.initial(names).join(', ') +\n","\t     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n","\t     * });\n","\t     *\n","\t     * say('hello', 'fred', 'barney', 'pebbles');\n","\t     * // => 'hello fred, barney, & pebbles'\n","\t     */\n","\t    function rest(func, start) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      start = start === undefined ? start : toInteger(start);\n","\t      return baseRest(func, start);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of the\n","\t     * create function and an array of arguments much like\n","\t     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n","\t     *\n","\t     * **Note:** This method is based on the\n","\t     * [spread operator](https://mdn.io/spread_operator).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to spread arguments over.\n","\t     * @param {number} [start=0] The start position of the spread.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var say = _.spread(function(who, what) {\n","\t     *   return who + ' says ' + what;\n","\t     * });\n","\t     *\n","\t     * say(['fred', 'hello']);\n","\t     * // => 'fred says hello'\n","\t     *\n","\t     * var numbers = Promise.all([\n","\t     *   Promise.resolve(40),\n","\t     *   Promise.resolve(36)\n","\t     * ]);\n","\t     *\n","\t     * numbers.then(_.spread(function(x, y) {\n","\t     *   return x + y;\n","\t     * }));\n","\t     * // => a Promise of 76\n","\t     */\n","\t    function spread(func, start) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n","\t      return baseRest(function(args) {\n","\t        var array = args[start],\n","\t            otherArgs = castSlice(args, 0, start);\n","\t\n","\t        if (array) {\n","\t          arrayPush(otherArgs, array);\n","\t        }\n","\t        return apply(func, this, otherArgs);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a throttled function that only invokes `func` at most once per\n","\t     * every `wait` milliseconds. The throttled function comes with a `cancel`\n","\t     * method to cancel delayed `func` invocations and a `flush` method to\n","\t     * immediately invoke them. Provide `options` to indicate whether `func`\n","\t     * should be invoked on the leading and/or trailing edge of the `wait`\n","\t     * timeout. The `func` is invoked with the last arguments provided to the\n","\t     * throttled function. Subsequent calls to the throttled function return the\n","\t     * result of the last `func` invocation.\n","\t     *\n","\t     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n","\t     * invoked on the trailing edge of the timeout only if the throttled function\n","\t     * is invoked more than once during the `wait` timeout.\n","\t     *\n","\t     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n","\t     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n","\t     *\n","\t     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n","\t     * for details over the differences between `_.throttle` and `_.debounce`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to throttle.\n","\t     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.leading=true]\n","\t     *  Specify invoking on the leading edge of the timeout.\n","\t     * @param {boolean} [options.trailing=true]\n","\t     *  Specify invoking on the trailing edge of the timeout.\n","\t     * @returns {Function} Returns the new throttled function.\n","\t     * @example\n","\t     *\n","\t     * // Avoid excessively updating the position while scrolling.\n","\t     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n","\t     *\n","\t     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n","\t     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n","\t     * jQuery(element).on('click', throttled);\n","\t     *\n","\t     * // Cancel the trailing throttled invocation.\n","\t     * jQuery(window).on('popstate', throttled.cancel);\n","\t     */\n","\t    function throttle(func, wait, options) {\n","\t      var leading = true,\n","\t          trailing = true;\n","\t\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      if (isObject(options)) {\n","\t        leading = 'leading' in options ? !!options.leading : leading;\n","\t        trailing = 'trailing' in options ? !!options.trailing : trailing;\n","\t      }\n","\t      return debounce(func, wait, {\n","\t        'leading': leading,\n","\t        'maxWait': wait,\n","\t        'trailing': trailing\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that accepts up to one argument, ignoring any\n","\t     * additional arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to cap arguments for.\n","\t     * @returns {Function} Returns the new capped function.\n","\t     * @example\n","\t     *\n","\t     * _.map(['6', '8', '10'], _.unary(parseInt));\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function unary(func) {\n","\t      return ary(func, 1);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that provides `value` to `wrapper` as its first\n","\t     * argument. Any additional arguments provided to the function are appended\n","\t     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n","\t     * binding of the created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {*} value The value to wrap.\n","\t     * @param {Function} [wrapper=identity] The wrapper function.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var p = _.wrap(_.escape, function(func, text) {\n","\t     *   return '<p>' + func(text) + '</p>';\n","\t     * });\n","\t     *\n","\t     * p('fred, barney, & pebbles');\n","\t     * // => '<p>fred, barney, &amp; pebbles</p>'\n","\t     */\n","\t    function wrap(value, wrapper) {\n","\t      return partial(castFunction(wrapper), value);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Casts `value` as an array if it's not one.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.4.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Array} Returns the cast array.\n","\t     * @example\n","\t     *\n","\t     * _.castArray(1);\n","\t     * // => [1]\n","\t     *\n","\t     * _.castArray({ 'a': 1 });\n","\t     * // => [{ 'a': 1 }]\n","\t     *\n","\t     * _.castArray('abc');\n","\t     * // => ['abc']\n","\t     *\n","\t     * _.castArray(null);\n","\t     * // => [null]\n","\t     *\n","\t     * _.castArray(undefined);\n","\t     * // => [undefined]\n","\t     *\n","\t     * _.castArray();\n","\t     * // => []\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     * console.log(_.castArray(array) === array);\n","\t     * // => true\n","\t     */\n","\t    function castArray() {\n","\t      if (!arguments.length) {\n","\t        return [];\n","\t      }\n","\t      var value = arguments[0];\n","\t      return isArray(value) ? value : [value];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a shallow clone of `value`.\n","\t     *\n","\t     * **Note:** This method is loosely based on the\n","\t     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n","\t     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n","\t     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n","\t     * arrays. The own enumerable properties of `arguments` objects are cloned\n","\t     * as plain objects. An empty object is returned for uncloneable values such\n","\t     * as error objects, functions, DOM nodes, and WeakMaps.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to clone.\n","\t     * @returns {*} Returns the cloned value.\n","\t     * @see _.cloneDeep\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n","\t     *\n","\t     * var shallow = _.clone(objects);\n","\t     * console.log(shallow[0] === objects[0]);\n","\t     * // => true\n","\t     */\n","\t    function clone(value) {\n","\t      return baseClone(value, CLONE_SYMBOLS_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.clone` except that it accepts `customizer` which\n","\t     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n","\t     * cloning is handled by the method instead. The `customizer` is invoked with\n","\t     * up to four arguments; (value [, index|key, object, stack]).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to clone.\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @returns {*} Returns the cloned value.\n","\t     * @see _.cloneDeepWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(value) {\n","\t     *   if (_.isElement(value)) {\n","\t     *     return value.cloneNode(false);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var el = _.cloneWith(document.body, customizer);\n","\t     *\n","\t     * console.log(el === document.body);\n","\t     * // => false\n","\t     * console.log(el.nodeName);\n","\t     * // => 'BODY'\n","\t     * console.log(el.childNodes.length);\n","\t     * // => 0\n","\t     */\n","\t    function cloneWith(value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.clone` except that it recursively clones `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to recursively clone.\n","\t     * @returns {*} Returns the deep cloned value.\n","\t     * @see _.clone\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n","\t     *\n","\t     * var deep = _.cloneDeep(objects);\n","\t     * console.log(deep[0] === objects[0]);\n","\t     * // => false\n","\t     */\n","\t    function cloneDeep(value) {\n","\t      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.cloneWith` except that it recursively clones `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to recursively clone.\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @returns {*} Returns the deep cloned value.\n","\t     * @see _.cloneWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(value) {\n","\t     *   if (_.isElement(value)) {\n","\t     *     return value.cloneNode(true);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var el = _.cloneDeepWith(document.body, customizer);\n","\t     *\n","\t     * console.log(el === document.body);\n","\t     * // => false\n","\t     * console.log(el.nodeName);\n","\t     * // => 'BODY'\n","\t     * console.log(el.childNodes.length);\n","\t     * // => 20\n","\t     */\n","\t    function cloneDeepWith(value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `object` conforms to `source` by invoking the predicate\n","\t     * properties of `source` with the corresponding property values of `object`.\n","\t     *\n","\t     * **Note:** This method is equivalent to `_.conforms` when `source` is\n","\t     * partially applied.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.14.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     *\n","\t     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n","\t     * // => true\n","\t     *\n","\t     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n","\t     * // => false\n","\t     */\n","\t    function conformsTo(object, source) {\n","\t      return source == null || baseConformsTo(object, source, keys(source));\n","\t    }\n","\t\n","\t    /**\n","\t     * Performs a\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * comparison between two values to determine if they are equivalent.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     * var other = { 'a': 1 };\n","\t     *\n","\t     * _.eq(object, object);\n","\t     * // => true\n","\t     *\n","\t     * _.eq(object, other);\n","\t     * // => false\n","\t     *\n","\t     * _.eq('a', 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.eq('a', Object('a'));\n","\t     * // => false\n","\t     *\n","\t     * _.eq(NaN, NaN);\n","\t     * // => true\n","\t     */\n","\t    function eq(value, other) {\n","\t      return value === other || (value !== value && other !== other);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is greater than `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n","\t     *  else `false`.\n","\t     * @see _.lt\n","\t     * @example\n","\t     *\n","\t     * _.gt(3, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.gt(3, 3);\n","\t     * // => false\n","\t     *\n","\t     * _.gt(1, 3);\n","\t     * // => false\n","\t     */\n","\t    var gt = createRelationalOperation(baseGt);\n","\t\n","\t    /**\n","\t     * Checks if `value` is greater than or equal to `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n","\t     *  `other`, else `false`.\n","\t     * @see _.lte\n","\t     * @example\n","\t     *\n","\t     * _.gte(3, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.gte(3, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.gte(1, 3);\n","\t     * // => false\n","\t     */\n","\t    var gte = createRelationalOperation(function(value, other) {\n","\t      return value >= other;\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely an `arguments` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArguments(function() { return arguments; }());\n","\t     * // => true\n","\t     *\n","\t     * _.isArguments([1, 2, 3]);\n","\t     * // => false\n","\t     */\n","\t    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n","\t      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n","\t        !propertyIsEnumerable.call(value, 'callee');\n","\t    };\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as an `Array` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArray([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArray(document.body.children);\n","\t     * // => false\n","\t     *\n","\t     * _.isArray('abc');\n","\t     * // => false\n","\t     *\n","\t     * _.isArray(_.noop);\n","\t     * // => false\n","\t     */\n","\t    var isArray = Array.isArray;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as an `ArrayBuffer` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayBuffer(new ArrayBuffer(2));\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayBuffer(new Array(2));\n","\t     * // => false\n","\t     */\n","\t    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n","\t\n","\t    /**\n","\t     * Checks if `value` is array-like. A value is considered array-like if it's\n","\t     * not a function and has a `value.length` that's an integer greater than or\n","\t     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayLike([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike(document.body.children);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike('abc');\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike(_.noop);\n","\t     * // => false\n","\t     */\n","\t    function isArrayLike(value) {\n","\t      return value != null && isLength(value.length) && !isFunction(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isArrayLike` except that it also checks if `value`\n","\t     * is an object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array-like object,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayLikeObject([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLikeObject(document.body.children);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLikeObject('abc');\n","\t     * // => false\n","\t     *\n","\t     * _.isArrayLikeObject(_.noop);\n","\t     * // => false\n","\t     */\n","\t    function isArrayLikeObject(value) {\n","\t      return isObjectLike(value) && isArrayLike(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a boolean primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isBoolean(false);\n","\t     * // => true\n","\t     *\n","\t     * _.isBoolean(null);\n","\t     * // => false\n","\t     */\n","\t    function isBoolean(value) {\n","\t      return value === true || value === false ||\n","\t        (isObjectLike(value) && baseGetTag(value) == boolTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a buffer.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isBuffer(new Buffer(2));\n","\t     * // => true\n","\t     *\n","\t     * _.isBuffer(new Uint8Array(2));\n","\t     * // => false\n","\t     */\n","\t    var isBuffer = nativeIsBuffer || stubFalse;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Date` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isDate(new Date);\n","\t     * // => true\n","\t     *\n","\t     * _.isDate('Mon April 23 2012');\n","\t     * // => false\n","\t     */\n","\t    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely a DOM element.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isElement(document.body);\n","\t     * // => true\n","\t     *\n","\t     * _.isElement('<body>');\n","\t     * // => false\n","\t     */\n","\t    function isElement(value) {\n","\t      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an empty object, collection, map, or set.\n","\t     *\n","\t     * Objects are considered empty if they have no own enumerable string keyed\n","\t     * properties.\n","\t     *\n","\t     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n","\t     * jQuery-like collections are considered empty if they have a `length` of `0`.\n","\t     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isEmpty(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty(true);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty(1);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty([1, 2, 3]);\n","\t     * // => false\n","\t     *\n","\t     * _.isEmpty({ 'a': 1 });\n","\t     * // => false\n","\t     */\n","\t    function isEmpty(value) {\n","\t      if (value == null) {\n","\t        return true;\n","\t      }\n","\t      if (isArrayLike(value) &&\n","\t          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n","\t            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n","\t        return !value.length;\n","\t      }\n","\t      var tag = getTag(value);\n","\t      if (tag == mapTag || tag == setTag) {\n","\t        return !value.size;\n","\t      }\n","\t      if (isPrototype(value)) {\n","\t        return !baseKeys(value).length;\n","\t      }\n","\t      for (var key in value) {\n","\t        if (hasOwnProperty.call(value, key)) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Performs a deep comparison between two values to determine if they are\n","\t     * equivalent.\n","\t     *\n","\t     * **Note:** This method supports comparing arrays, array buffers, booleans,\n","\t     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n","\t     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n","\t     * by their own, not inherited, enumerable properties. Functions and DOM\n","\t     * nodes are compared by strict equality, i.e. `===`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     * var other = { 'a': 1 };\n","\t     *\n","\t     * _.isEqual(object, other);\n","\t     * // => true\n","\t     *\n","\t     * object === other;\n","\t     * // => false\n","\t     */\n","\t    function isEqual(value, other) {\n","\t      return baseIsEqual(value, other);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isEqual` except that it accepts `customizer` which\n","\t     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n","\t     * are handled by the method instead. The `customizer` is invoked with up to\n","\t     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function isGreeting(value) {\n","\t     *   return /^h(?:i|ello)$/.test(value);\n","\t     * }\n","\t     *\n","\t     * function customizer(objValue, othValue) {\n","\t     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n","\t     *     return true;\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var array = ['hello', 'goodbye'];\n","\t     * var other = ['hi', 'goodbye'];\n","\t     *\n","\t     * _.isEqualWith(array, other, customizer);\n","\t     * // => true\n","\t     */\n","\t    function isEqualWith(value, other, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      var result = customizer ? customizer(value, other) : undefined;\n","\t      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n","\t     * `SyntaxError`, `TypeError`, or `URIError` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isError(new Error);\n","\t     * // => true\n","\t     *\n","\t     * _.isError(Error);\n","\t     * // => false\n","\t     */\n","\t    function isError(value) {\n","\t      if (!isObjectLike(value)) {\n","\t        return false;\n","\t      }\n","\t      var tag = baseGetTag(value);\n","\t      return tag == errorTag || tag == domExcTag ||\n","\t        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a finite primitive number.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isFinite(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isFinite(Number.MIN_VALUE);\n","\t     * // => true\n","\t     *\n","\t     * _.isFinite(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isFinite('3');\n","\t     * // => false\n","\t     */\n","\t    function isFinite(value) {\n","\t      return typeof value == 'number' && nativeIsFinite(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Function` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isFunction(_);\n","\t     * // => true\n","\t     *\n","\t     * _.isFunction(/abc/);\n","\t     * // => false\n","\t     */\n","\t    function isFunction(value) {\n","\t      if (!isObject(value)) {\n","\t        return false;\n","\t      }\n","\t      // The use of `Object#toString` avoids issues with the `typeof` operator\n","\t      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n","\t      var tag = baseGetTag(value);\n","\t      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an integer.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isInteger(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isInteger(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isInteger(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isInteger('3');\n","\t     * // => false\n","\t     */\n","\t    function isInteger(value) {\n","\t      return typeof value == 'number' && value == toInteger(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a valid array-like length.\n","\t     *\n","\t     * **Note:** This method is loosely based on\n","\t     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isLength(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isLength(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isLength(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isLength('3');\n","\t     * // => false\n","\t     */\n","\t    function isLength(value) {\n","\t      return typeof value == 'number' &&\n","\t        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is the\n","\t     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n","\t     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isObject({});\n","\t     * // => true\n","\t     *\n","\t     * _.isObject([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isObject(_.noop);\n","\t     * // => true\n","\t     *\n","\t     * _.isObject(null);\n","\t     * // => false\n","\t     */\n","\t    function isObject(value) {\n","\t      var type = typeof value;\n","\t      return value != null && (type == 'object' || type == 'function');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is object-like. A value is object-like if it's not `null`\n","\t     * and has a `typeof` result of \"object\".\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isObjectLike({});\n","\t     * // => true\n","\t     *\n","\t     * _.isObjectLike([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isObjectLike(_.noop);\n","\t     * // => false\n","\t     *\n","\t     * _.isObjectLike(null);\n","\t     * // => false\n","\t     */\n","\t    function isObjectLike(value) {\n","\t      return value != null && typeof value == 'object';\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Map` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isMap(new Map);\n","\t     * // => true\n","\t     *\n","\t     * _.isMap(new WeakMap);\n","\t     * // => false\n","\t     */\n","\t    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n","\t\n","\t    /**\n","\t     * Performs a partial deep comparison between `object` and `source` to\n","\t     * determine if `object` contains equivalent property values.\n","\t     *\n","\t     * **Note:** This method is equivalent to `_.matches` when `source` is\n","\t     * partially applied.\n","\t     *\n","\t     * Partial comparisons will match empty array and empty object `source`\n","\t     * values against any array or object value, respectively. See `_.isEqual`\n","\t     * for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     *\n","\t     * _.isMatch(object, { 'b': 2 });\n","\t     * // => true\n","\t     *\n","\t     * _.isMatch(object, { 'b': 1 });\n","\t     * // => false\n","\t     */\n","\t    function isMatch(object, source) {\n","\t      return object === source || baseIsMatch(object, source, getMatchData(source));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isMatch` except that it accepts `customizer` which\n","\t     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n","\t     * are handled by the method instead. The `customizer` is invoked with five\n","\t     * arguments: (objValue, srcValue, index|key, object, source).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function isGreeting(value) {\n","\t     *   return /^h(?:i|ello)$/.test(value);\n","\t     * }\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n","\t     *     return true;\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var object = { 'greeting': 'hello' };\n","\t     * var source = { 'greeting': 'hi' };\n","\t     *\n","\t     * _.isMatchWith(object, source, customizer);\n","\t     * // => true\n","\t     */\n","\t    function isMatchWith(object, source, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseIsMatch(object, source, getMatchData(source), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `NaN`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n","\t     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n","\t     * `undefined` and other non-number values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNaN(NaN);\n","\t     * // => true\n","\t     *\n","\t     * _.isNaN(new Number(NaN));\n","\t     * // => true\n","\t     *\n","\t     * isNaN(undefined);\n","\t     * // => true\n","\t     *\n","\t     * _.isNaN(undefined);\n","\t     * // => false\n","\t     */\n","\t    function isNaN(value) {\n","\t      // An `NaN` primitive is the only value that is not equal to itself.\n","\t      // Perform the `toStringTag` check first to avoid errors with some\n","\t      // ActiveX objects in IE.\n","\t      return isNumber(value) && value != +value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a pristine native function.\n","\t     *\n","\t     * **Note:** This method can't reliably detect native functions in the presence\n","\t     * of the core-js package because core-js circumvents this kind of detection.\n","\t     * Despite multiple requests, the core-js maintainer has made it clear: any\n","\t     * attempt to fix the detection will be obstructed. As a result, we're left\n","\t     * with little choice but to throw an error. Unfortunately, this also affects\n","\t     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n","\t     * which rely on core-js.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a native function,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNative(Array.prototype.push);\n","\t     * // => true\n","\t     *\n","\t     * _.isNative(_);\n","\t     * // => false\n","\t     */\n","\t    function isNative(value) {\n","\t      if (isMaskable(value)) {\n","\t        throw new Error(CORE_ERROR_TEXT);\n","\t      }\n","\t      return baseIsNative(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `null`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNull(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isNull(void 0);\n","\t     * // => false\n","\t     */\n","\t    function isNull(value) {\n","\t      return value === null;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `null` or `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNil(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isNil(void 0);\n","\t     * // => true\n","\t     *\n","\t     * _.isNil(NaN);\n","\t     * // => false\n","\t     */\n","\t    function isNil(value) {\n","\t      return value == null;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Number` primitive or object.\n","\t     *\n","\t     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n","\t     * classified as numbers, use the `_.isFinite` method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNumber(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber(Number.MIN_VALUE);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber(Infinity);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber('3');\n","\t     * // => false\n","\t     */\n","\t    function isNumber(value) {\n","\t      return typeof value == 'number' ||\n","\t        (isObjectLike(value) && baseGetTag(value) == numberTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a plain object, that is, an object created by the\n","\t     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.8.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * _.isPlainObject(new Foo);\n","\t     * // => false\n","\t     *\n","\t     * _.isPlainObject([1, 2, 3]);\n","\t     * // => false\n","\t     *\n","\t     * _.isPlainObject({ 'x': 0, 'y': 0 });\n","\t     * // => true\n","\t     *\n","\t     * _.isPlainObject(Object.create(null));\n","\t     * // => true\n","\t     */\n","\t    function isPlainObject(value) {\n","\t      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n","\t        return false;\n","\t      }\n","\t      var proto = getPrototype(value);\n","\t      if (proto === null) {\n","\t        return true;\n","\t      }\n","\t      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n","\t      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n","\t        funcToString.call(Ctor) == objectCtorString;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `RegExp` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isRegExp(/abc/);\n","\t     * // => true\n","\t     *\n","\t     * _.isRegExp('/abc/');\n","\t     * // => false\n","\t     */\n","\t    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n","\t\n","\t    /**\n","\t     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n","\t     * double precision number which isn't the result of a rounded unsafe integer.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSafeInteger(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isSafeInteger(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isSafeInteger(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isSafeInteger('3');\n","\t     * // => false\n","\t     */\n","\t    function isSafeInteger(value) {\n","\t      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Set` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSet(new Set);\n","\t     * // => true\n","\t     *\n","\t     * _.isSet(new WeakSet);\n","\t     * // => false\n","\t     */\n","\t    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `String` primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isString('abc');\n","\t     * // => true\n","\t     *\n","\t     * _.isString(1);\n","\t     * // => false\n","\t     */\n","\t    function isString(value) {\n","\t      return typeof value == 'string' ||\n","\t        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Symbol` primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSymbol(Symbol.iterator);\n","\t     * // => true\n","\t     *\n","\t     * _.isSymbol('abc');\n","\t     * // => false\n","\t     */\n","\t    function isSymbol(value) {\n","\t      return typeof value == 'symbol' ||\n","\t        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a typed array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isTypedArray(new Uint8Array);\n","\t     * // => true\n","\t     *\n","\t     * _.isTypedArray([]);\n","\t     * // => false\n","\t     */\n","\t    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n","\t\n","\t    /**\n","\t     * Checks if `value` is `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isUndefined(void 0);\n","\t     * // => true\n","\t     *\n","\t     * _.isUndefined(null);\n","\t     * // => false\n","\t     */\n","\t    function isUndefined(value) {\n","\t      return value === undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `WeakMap` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isWeakMap(new WeakMap);\n","\t     * // => true\n","\t     *\n","\t     * _.isWeakMap(new Map);\n","\t     * // => false\n","\t     */\n","\t    function isWeakMap(value) {\n","\t      return isObjectLike(value) && getTag(value) == weakMapTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `WeakSet` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isWeakSet(new WeakSet);\n","\t     * // => true\n","\t     *\n","\t     * _.isWeakSet(new Set);\n","\t     * // => false\n","\t     */\n","\t    function isWeakSet(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is less than `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than `other`,\n","\t     *  else `false`.\n","\t     * @see _.gt\n","\t     * @example\n","\t     *\n","\t     * _.lt(1, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lt(3, 3);\n","\t     * // => false\n","\t     *\n","\t     * _.lt(3, 1);\n","\t     * // => false\n","\t     */\n","\t    var lt = createRelationalOperation(baseLt);\n","\t\n","\t    /**\n","\t     * Checks if `value` is less than or equal to `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than or equal to\n","\t     *  `other`, else `false`.\n","\t     * @see _.gte\n","\t     * @example\n","\t     *\n","\t     * _.lte(1, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lte(3, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lte(3, 1);\n","\t     * // => false\n","\t     */\n","\t    var lte = createRelationalOperation(function(value, other) {\n","\t      return value <= other;\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `value` to an array.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Array} Returns the converted array.\n","\t     * @example\n","\t     *\n","\t     * _.toArray({ 'a': 1, 'b': 2 });\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.toArray('abc');\n","\t     * // => ['a', 'b', 'c']\n","\t     *\n","\t     * _.toArray(1);\n","\t     * // => []\n","\t     *\n","\t     * _.toArray(null);\n","\t     * // => []\n","\t     */\n","\t    function toArray(value) {\n","\t      if (!value) {\n","\t        return [];\n","\t      }\n","\t      if (isArrayLike(value)) {\n","\t        return isString(value) ? stringToArray(value) : copyArray(value);\n","\t      }\n","\t      if (symIterator && value[symIterator]) {\n","\t        return iteratorToArray(value[symIterator]());\n","\t      }\n","\t      var tag = getTag(value),\n","\t          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n","\t\n","\t      return func(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a finite number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.12.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted number.\n","\t     * @example\n","\t     *\n","\t     * _.toFinite(3.2);\n","\t     * // => 3.2\n","\t     *\n","\t     * _.toFinite(Number.MIN_VALUE);\n","\t     * // => 5e-324\n","\t     *\n","\t     * _.toFinite(Infinity);\n","\t     * // => 1.7976931348623157e+308\n","\t     *\n","\t     * _.toFinite('3.2');\n","\t     * // => 3.2\n","\t     */\n","\t    function toFinite(value) {\n","\t      if (!value) {\n","\t        return value === 0 ? value : 0;\n","\t      }\n","\t      value = toNumber(value);\n","\t      if (value === INFINITY || value === -INFINITY) {\n","\t        var sign = (value < 0 ? -1 : 1);\n","\t        return sign * MAX_INTEGER;\n","\t      }\n","\t      return value === value ? value : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to an integer.\n","\t     *\n","\t     * **Note:** This method is loosely based on\n","\t     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toInteger(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toInteger(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toInteger(Infinity);\n","\t     * // => 1.7976931348623157e+308\n","\t     *\n","\t     * _.toInteger('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toInteger(value) {\n","\t      var result = toFinite(value),\n","\t          remainder = result % 1;\n","\t\n","\t      return result === result ? (remainder ? result - remainder : result) : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to an integer suitable for use as the length of an\n","\t     * array-like object.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toLength(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toLength(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toLength(Infinity);\n","\t     * // => 4294967295\n","\t     *\n","\t     * _.toLength('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toLength(value) {\n","\t      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to process.\n","\t     * @returns {number} Returns the number.\n","\t     * @example\n","\t     *\n","\t     * _.toNumber(3.2);\n","\t     * // => 3.2\n","\t     *\n","\t     * _.toNumber(Number.MIN_VALUE);\n","\t     * // => 5e-324\n","\t     *\n","\t     * _.toNumber(Infinity);\n","\t     * // => Infinity\n","\t     *\n","\t     * _.toNumber('3.2');\n","\t     * // => 3.2\n","\t     */\n","\t    function toNumber(value) {\n","\t      if (typeof value == 'number') {\n","\t        return value;\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return NAN;\n","\t      }\n","\t      if (isObject(value)) {\n","\t        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n","\t        value = isObject(other) ? (other + '') : other;\n","\t      }\n","\t      if (typeof value != 'string') {\n","\t        return value === 0 ? value : +value;\n","\t      }\n","\t      value = value.replace(reTrim, '');\n","\t      var isBinary = reIsBinary.test(value);\n","\t      return (isBinary || reIsOctal.test(value))\n","\t        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n","\t        : (reIsBadHex.test(value) ? NAN : +value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a plain object flattening inherited enumerable string\n","\t     * keyed properties of `value` to own properties of the plain object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Object} Returns the converted plain object.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.assign({ 'a': 1 }, new Foo);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     *\n","\t     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n","\t     * // => { 'a': 1, 'b': 2, 'c': 3 }\n","\t     */\n","\t    function toPlainObject(value) {\n","\t      return copyObject(value, keysIn(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a safe integer. A safe integer can be compared and\n","\t     * represented correctly.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toSafeInteger(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toSafeInteger(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toSafeInteger(Infinity);\n","\t     * // => 9007199254740991\n","\t     *\n","\t     * _.toSafeInteger('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toSafeInteger(value) {\n","\t      return value\n","\t        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n","\t        : (value === 0 ? value : 0);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a string. An empty string is returned for `null`\n","\t     * and `undefined` values. The sign of `-0` is preserved.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.toString(null);\n","\t     * // => ''\n","\t     *\n","\t     * _.toString(-0);\n","\t     * // => '-0'\n","\t     *\n","\t     * _.toString([1, 2, 3]);\n","\t     * // => '1,2,3'\n","\t     */\n","\t    function toString(value) {\n","\t      return value == null ? '' : baseToString(value);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Assigns own enumerable string keyed properties of source objects to the\n","\t     * destination object. Source objects are applied from left to right.\n","\t     * Subsequent sources overwrite property assignments of previous sources.\n","\t     *\n","\t     * **Note:** This method mutates `object` and is loosely based on\n","\t     * [`Object.assign`](https://mdn.io/Object/assign).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.10.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * function Bar() {\n","\t     *   this.c = 3;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.b = 2;\n","\t     * Bar.prototype.d = 4;\n","\t     *\n","\t     * _.assign({ 'a': 0 }, new Foo, new Bar);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    var assign = createAssigner(function(object, source) {\n","\t      if (isPrototype(source) || isArrayLike(source)) {\n","\t        copyObject(source, keys(source), object);\n","\t        return;\n","\t      }\n","\t      for (var key in source) {\n","\t        if (hasOwnProperty.call(source, key)) {\n","\t          assignValue(object, key, source[key]);\n","\t        }\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it iterates over own and\n","\t     * inherited source properties.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias extend\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assign\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * function Bar() {\n","\t     *   this.c = 3;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.b = 2;\n","\t     * Bar.prototype.d = 4;\n","\t     *\n","\t     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n","\t     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n","\t     */\n","\t    var assignIn = createAssigner(function(object, source) {\n","\t      copyObject(source, keysIn(source), object);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assignIn` except that it accepts `customizer`\n","\t     * which is invoked to produce the assigned values. If `customizer` returns\n","\t     * `undefined`, assignment is handled by the method instead. The `customizer`\n","\t     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias extendWith\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   return _.isUndefined(objValue) ? srcValue : objValue;\n","\t     * }\n","\t     *\n","\t     * var defaults = _.partialRight(_.assignInWith, customizer);\n","\t     *\n","\t     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      copyObject(source, keysIn(source), object, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it accepts `customizer`\n","\t     * which is invoked to produce the assigned values. If `customizer` returns\n","\t     * `undefined`, assignment is handled by the method instead. The `customizer`\n","\t     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignInWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   return _.isUndefined(objValue) ? srcValue : objValue;\n","\t     * }\n","\t     *\n","\t     * var defaults = _.partialRight(_.assignWith, customizer);\n","\t     *\n","\t     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      copyObject(source, keys(source), object, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of values corresponding to `paths` of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Array} Returns the picked values.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n","\t     *\n","\t     * _.at(object, ['a[0].b.c', 'a[1]']);\n","\t     * // => [3, 4]\n","\t     */\n","\t    var at = flatRest(baseAt);\n","\t\n","\t    /**\n","\t     * Creates an object that inherits from the `prototype` object. If a\n","\t     * `properties` object is given, its own enumerable string keyed properties\n","\t     * are assigned to the created object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.3.0\n","\t     * @category Object\n","\t     * @param {Object} prototype The object to inherit from.\n","\t     * @param {Object} [properties] The properties to assign to the object.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * function Shape() {\n","\t     *   this.x = 0;\n","\t     *   this.y = 0;\n","\t     * }\n","\t     *\n","\t     * function Circle() {\n","\t     *   Shape.call(this);\n","\t     * }\n","\t     *\n","\t     * Circle.prototype = _.create(Shape.prototype, {\n","\t     *   'constructor': Circle\n","\t     * });\n","\t     *\n","\t     * var circle = new Circle;\n","\t     * circle instanceof Circle;\n","\t     * // => true\n","\t     *\n","\t     * circle instanceof Shape;\n","\t     * // => true\n","\t     */\n","\t    function create(prototype, properties) {\n","\t      var result = baseCreate(prototype);\n","\t      return properties == null ? result : baseAssign(result, properties);\n","\t    }\n","\t\n","\t    /**\n","\t     * Assigns own and inherited enumerable string keyed properties of source\n","\t     * objects to the destination object for all destination properties that\n","\t     * resolve to `undefined`. Source objects are applied from left to right.\n","\t     * Once a property is set, additional values of the same property are ignored.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.defaultsDeep\n","\t     * @example\n","\t     *\n","\t     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var defaults = baseRest(function(object, sources) {\n","\t      object = Object(object);\n","\t\n","\t      var index = -1;\n","\t      var length = sources.length;\n","\t      var guard = length > 2 ? sources[2] : undefined;\n","\t\n","\t      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n","\t        length = 1;\n","\t      }\n","\t\n","\t      while (++index < length) {\n","\t        var source = sources[index];\n","\t        var props = keysIn(source);\n","\t        var propsIndex = -1;\n","\t        var propsLength = props.length;\n","\t\n","\t        while (++propsIndex < propsLength) {\n","\t          var key = props[propsIndex];\n","\t          var value = object[key];\n","\t\n","\t          if (value === undefined ||\n","\t              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n","\t            object[key] = source[key];\n","\t          }\n","\t        }\n","\t      }\n","\t\n","\t      return object;\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.defaults` except that it recursively assigns\n","\t     * default properties.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.defaults\n","\t     * @example\n","\t     *\n","\t     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n","\t     * // => { 'a': { 'b': 2, 'c': 3 } }\n","\t     */\n","\t    var defaultsDeep = baseRest(function(args) {\n","\t      args.push(undefined, customDefaultsMerge);\n","\t      return apply(mergeWith, undefined, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it returns the key of the first\n","\t     * element `predicate` returns truthy for instead of the element itself.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {string|undefined} Returns the key of the matched element,\n","\t     *  else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'barney':  { 'age': 36, 'active': true },\n","\t     *   'fred':    { 'age': 40, 'active': false },\n","\t     *   'pebbles': { 'age': 1,  'active': true }\n","\t     * };\n","\t     *\n","\t     * _.findKey(users, function(o) { return o.age < 40; });\n","\t     * // => 'barney' (iteration order is not guaranteed)\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findKey(users, { 'age': 1, 'active': true });\n","\t     * // => 'pebbles'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findKey(users, ['active', false]);\n","\t     * // => 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findKey(users, 'active');\n","\t     * // => 'barney'\n","\t     */\n","\t    function findKey(object, predicate) {\n","\t      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.findKey` except that it iterates over elements of\n","\t     * a collection in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {string|undefined} Returns the key of the matched element,\n","\t     *  else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'barney':  { 'age': 36, 'active': true },\n","\t     *   'fred':    { 'age': 40, 'active': false },\n","\t     *   'pebbles': { 'age': 1,  'active': true }\n","\t     * };\n","\t     *\n","\t     * _.findLastKey(users, function(o) { return o.age < 40; });\n","\t     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findLastKey(users, { 'age': 36, 'active': true });\n","\t     * // => 'barney'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findLastKey(users, ['active', false]);\n","\t     * // => 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findLastKey(users, 'active');\n","\t     * // => 'pebbles'\n","\t     */\n","\t    function findLastKey(object, predicate) {\n","\t      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over own and inherited enumerable string keyed properties of an\n","\t     * object and invokes `iteratee` for each property. The iteratee is invoked\n","\t     * with three arguments: (value, key, object). Iteratee functions may exit\n","\t     * iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forInRight\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forIn(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n","\t     */\n","\t    function forIn(object, iteratee) {\n","\t      return object == null\n","\t        ? object\n","\t        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forIn` except that it iterates over properties of\n","\t     * `object` in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forInRight(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n","\t     */\n","\t    function forInRight(object, iteratee) {\n","\t      return object == null\n","\t        ? object\n","\t        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over own enumerable string keyed properties of an object and\n","\t     * invokes `iteratee` for each property. The iteratee is invoked with three\n","\t     * arguments: (value, key, object). Iteratee functions may exit iteration\n","\t     * early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forOwnRight\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forOwn(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n","\t     */\n","\t    function forOwn(object, iteratee) {\n","\t      return object && baseForOwn(object, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forOwn` except that it iterates over properties of\n","\t     * `object` in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forOwn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forOwnRight(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n","\t     */\n","\t    function forOwnRight(object, iteratee) {\n","\t      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of function property names from own enumerable properties\n","\t     * of `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @returns {Array} Returns the function names.\n","\t     * @see _.functionsIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = _.constant('a');\n","\t     *   this.b = _.constant('b');\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = _.constant('c');\n","\t     *\n","\t     * _.functions(new Foo);\n","\t     * // => ['a', 'b']\n","\t     */\n","\t    function functions(object) {\n","\t      return object == null ? [] : baseFunctions(object, keys(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of function property names from own and inherited\n","\t     * enumerable properties of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @returns {Array} Returns the function names.\n","\t     * @see _.functions\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = _.constant('a');\n","\t     *   this.b = _.constant('b');\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = _.constant('c');\n","\t     *\n","\t     * _.functionsIn(new Foo);\n","\t     * // => ['a', 'b', 'c']\n","\t     */\n","\t    function functionsIn(object) {\n","\t      return object == null ? [] : baseFunctions(object, keysIn(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the value at `path` of `object`. If the resolved value is\n","\t     * `undefined`, the `defaultValue` is returned in its place.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.get(object, 'a[0].b.c');\n","\t     * // => 3\n","\t     *\n","\t     * _.get(object, ['a', '0', 'b', 'c']);\n","\t     * // => 3\n","\t     *\n","\t     * _.get(object, 'a.b.c', 'default');\n","\t     * // => 'default'\n","\t     */\n","\t    function get(object, path, defaultValue) {\n","\t      var result = object == null ? undefined : baseGet(object, path);\n","\t      return result === undefined ? defaultValue : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` is a direct property of `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': { 'b': 2 } };\n","\t     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n","\t     *\n","\t     * _.has(object, 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.has(object, 'a.b');\n","\t     * // => true\n","\t     *\n","\t     * _.has(object, ['a', 'b']);\n","\t     * // => true\n","\t     *\n","\t     * _.has(other, 'a');\n","\t     * // => false\n","\t     */\n","\t    function has(object, path) {\n","\t      return object != null && hasPath(object, path, baseHas);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` is a direct or inherited property of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n","\t     *\n","\t     * _.hasIn(object, 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, 'a.b');\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, ['a', 'b']);\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, 'b');\n","\t     * // => false\n","\t     */\n","\t    function hasIn(object, path) {\n","\t      return object != null && hasPath(object, path, baseHasIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of the inverted keys and values of `object`.\n","\t     * If `object` contains duplicate values, subsequent values overwrite\n","\t     * property assignments of previous values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to invert.\n","\t     * @returns {Object} Returns the new inverted object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n","\t     *\n","\t     * _.invert(object);\n","\t     * // => { '1': 'c', '2': 'b' }\n","\t     */\n","\t    var invert = createInverter(function(result, value, key) {\n","\t      if (value != null &&\n","\t          typeof value.toString != 'function') {\n","\t        value = nativeObjectToString.call(value);\n","\t      }\n","\t\n","\t      result[value] = key;\n","\t    }, constant(identity));\n","\t\n","\t    /**\n","\t     * This method is like `_.invert` except that the inverted object is generated\n","\t     * from the results of running each element of `object` thru `iteratee`. The\n","\t     * corresponding inverted value of each inverted key is an array of keys\n","\t     * responsible for generating the inverted value. The iteratee is invoked\n","\t     * with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.1.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to invert.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Object} Returns the new inverted object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n","\t     *\n","\t     * _.invertBy(object);\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] }\n","\t     *\n","\t     * _.invertBy(object, function(value) {\n","\t     *   return 'group' + value;\n","\t     * });\n","\t     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n","\t     */\n","\t    var invertBy = createInverter(function(result, value, key) {\n","\t      if (value != null &&\n","\t          typeof value.toString != 'function') {\n","\t        value = nativeObjectToString.call(value);\n","\t      }\n","\t\n","\t      if (hasOwnProperty.call(result, value)) {\n","\t        result[value].push(key);\n","\t      } else {\n","\t        result[value] = [key];\n","\t      }\n","\t    }, getIteratee);\n","\t\n","\t    /**\n","\t     * Invokes the method at `path` of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {*} Returns the result of the invoked method.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n","\t     *\n","\t     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n","\t     * // => [2, 3]\n","\t     */\n","\t    var invoke = baseRest(baseInvoke);\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable property names of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects. See the\n","\t     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n","\t     * for more details.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.keys(new Foo);\n","\t     * // => ['a', 'b'] (iteration order is not guaranteed)\n","\t     *\n","\t     * _.keys('hi');\n","\t     * // => ['0', '1']\n","\t     */\n","\t    function keys(object) {\n","\t      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable property names of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.keysIn(new Foo);\n","\t     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n","\t     */\n","\t    function keysIn(object) {\n","\t      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.mapValues`; this method creates an object with the\n","\t     * same values as `object` and keys generated by running each own enumerable\n","\t     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n","\t     * with three arguments: (value, key, object).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns the new mapped object.\n","\t     * @see _.mapValues\n","\t     * @example\n","\t     *\n","\t     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n","\t     *   return key + value;\n","\t     * });\n","\t     * // => { 'a1': 1, 'b2': 2 }\n","\t     */\n","\t    function mapKeys(object, iteratee) {\n","\t      var result = {};\n","\t      iteratee = getIteratee(iteratee, 3);\n","\t\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        baseAssignValue(result, iteratee(value, key, object), value);\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object with the same keys as `object` and values generated\n","\t     * by running each own enumerable string keyed property of `object` thru\n","\t     * `iteratee`. The iteratee is invoked with three arguments:\n","\t     * (value, key, object).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns the new mapped object.\n","\t     * @see _.mapKeys\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'fred':    { 'user': 'fred',    'age': 40 },\n","\t     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n","\t     * };\n","\t     *\n","\t     * _.mapValues(users, function(o) { return o.age; });\n","\t     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.mapValues(users, 'age');\n","\t     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n","\t     */\n","\t    function mapValues(object, iteratee) {\n","\t      var result = {};\n","\t      iteratee = getIteratee(iteratee, 3);\n","\t\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        baseAssignValue(result, key, iteratee(value, key, object));\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it recursively merges own and\n","\t     * inherited enumerable string keyed properties of source objects into the\n","\t     * destination object. Source properties that resolve to `undefined` are\n","\t     * skipped if a destination value exists. Array and plain object properties\n","\t     * are merged recursively. Other objects and value types are overridden by\n","\t     * assignment. Source objects are applied from left to right. Subsequent\n","\t     * sources overwrite property assignments of previous sources.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {\n","\t     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n","\t     * };\n","\t     *\n","\t     * var other = {\n","\t     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n","\t     * };\n","\t     *\n","\t     * _.merge(object, other);\n","\t     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n","\t     */\n","\t    var merge = createAssigner(function(object, source, srcIndex) {\n","\t      baseMerge(object, source, srcIndex);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.merge` except that it accepts `customizer` which\n","\t     * is invoked to produce the merged values of the destination and source\n","\t     * properties. If `customizer` returns `undefined`, merging is handled by the\n","\t     * method instead. The `customizer` is invoked with six arguments:\n","\t     * (objValue, srcValue, key, object, source, stack).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} customizer The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   if (_.isArray(objValue)) {\n","\t     *     return objValue.concat(srcValue);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var object = { 'a': [1], 'b': [2] };\n","\t     * var other = { 'a': [3], 'b': [4] };\n","\t     *\n","\t     * _.mergeWith(object, other, customizer);\n","\t     * // => { 'a': [1, 3], 'b': [2, 4] }\n","\t     */\n","\t    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      baseMerge(object, source, srcIndex, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.pick`; this method creates an object composed of the\n","\t     * own and inherited enumerable property paths of `object` that are not omitted.\n","\t     *\n","\t     * **Note:** This method is considerably slower than `_.pick`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {...(string|string[])} [paths] The property paths to omit.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.omit(object, ['a', 'c']);\n","\t     * // => { 'b': '2' }\n","\t     */\n","\t    var omit = flatRest(function(object, paths) {\n","\t      var result = {};\n","\t      if (object == null) {\n","\t        return result;\n","\t      }\n","\t      var isDeep = false;\n","\t      paths = arrayMap(paths, function(path) {\n","\t        path = castPath(path, object);\n","\t        isDeep || (isDeep = path.length > 1);\n","\t        return path;\n","\t      });\n","\t      copyObject(object, getAllKeysIn(object), result);\n","\t      if (isDeep) {\n","\t        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n","\t      }\n","\t      var length = paths.length;\n","\t      while (length--) {\n","\t        baseUnset(result, paths[length]);\n","\t      }\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.pickBy`; this method creates an object composed of\n","\t     * the own and inherited enumerable string keyed properties of `object` that\n","\t     * `predicate` doesn't return truthy for. The predicate is invoked with two\n","\t     * arguments: (value, key).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.omitBy(object, _.isNumber);\n","\t     * // => { 'b': '2' }\n","\t     */\n","\t    function omitBy(object, predicate) {\n","\t      return pickBy(object, negate(getIteratee(predicate)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of the picked `object` properties.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.pick(object, ['a', 'c']);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    var pick = flatRest(function(object, paths) {\n","\t      return object == null ? {} : basePick(object, paths);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an object composed of the `object` properties `predicate` returns\n","\t     * truthy for. The predicate is invoked with two arguments: (value, key).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.pickBy(object, _.isNumber);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    function pickBy(object, predicate) {\n","\t      if (object == null) {\n","\t        return {};\n","\t      }\n","\t      var props = arrayMap(getAllKeysIn(object), function(prop) {\n","\t        return [prop];\n","\t      });\n","\t      predicate = getIteratee(predicate);\n","\t      return basePickBy(object, props, function(value, path) {\n","\t        return predicate(value, path[0]);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.get` except that if the resolved value is a\n","\t     * function it's invoked with the `this` binding of its parent object and\n","\t     * its result is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to resolve.\n","\t     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n","\t     *\n","\t     * _.result(object, 'a[0].b.c1');\n","\t     * // => 3\n","\t     *\n","\t     * _.result(object, 'a[0].b.c2');\n","\t     * // => 4\n","\t     *\n","\t     * _.result(object, 'a[0].b.c3', 'default');\n","\t     * // => 'default'\n","\t     *\n","\t     * _.result(object, 'a[0].b.c3', _.constant('default'));\n","\t     * // => 'default'\n","\t     */\n","\t    function result(object, path, defaultValue) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length;\n","\t\n","\t      // Ensure the loop is entered when path is empty.\n","\t      if (!length) {\n","\t        length = 1;\n","\t        object = undefined;\n","\t      }\n","\t      while (++index < length) {\n","\t        var value = object == null ? undefined : object[toKey(path[index])];\n","\t        if (value === undefined) {\n","\t          index = length;\n","\t          value = defaultValue;\n","\t        }\n","\t        object = isFunction(value) ? value.call(object) : value;\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n","\t     * it's created. Arrays are created for missing index properties while objects\n","\t     * are created for all other missing properties. Use `_.setWith` to customize\n","\t     * `path` creation.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.set(object, 'a[0].b.c', 4);\n","\t     * console.log(object.a[0].b.c);\n","\t     * // => 4\n","\t     *\n","\t     * _.set(object, ['x', '0', 'y', 'z'], 5);\n","\t     * console.log(object.x[0].y.z);\n","\t     * // => 5\n","\t     */\n","\t    function set(object, path, value) {\n","\t      return object == null ? object : baseSet(object, path, value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.set` except that it accepts `customizer` which is\n","\t     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n","\t     * path creation is handled by the method instead. The `customizer` is invoked\n","\t     * with three arguments: (nsValue, key, nsObject).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {};\n","\t     *\n","\t     * _.setWith(object, '[0][1]', 'a', Object);\n","\t     * // => { '0': { '1': 'a' } }\n","\t     */\n","\t    function setWith(object, path, value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return object == null ? object : baseSet(object, path, value, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own enumerable string keyed-value pairs for `object`\n","\t     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n","\t     * entries are returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias entries\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the key-value pairs.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.toPairs(new Foo);\n","\t     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n","\t     */\n","\t    var toPairs = createToPairs(keys);\n","\t\n","\t    /**\n","\t     * Creates an array of own and inherited enumerable string keyed-value pairs\n","\t     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n","\t     * or set, its entries are returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias entriesIn\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the key-value pairs.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.toPairsIn(new Foo);\n","\t     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n","\t     */\n","\t    var toPairsIn = createToPairs(keysIn);\n","\t\n","\t    /**\n","\t     * An alternative to `_.reduce`; this method transforms `object` to a new\n","\t     * `accumulator` object which is the result of running each of its own\n","\t     * enumerable string keyed properties thru `iteratee`, with each invocation\n","\t     * potentially mutating the `accumulator` object. If `accumulator` is not\n","\t     * provided, a new object with the same `[[Prototype]]` will be used. The\n","\t     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The custom accumulator value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @example\n","\t     *\n","\t     * _.transform([2, 3, 4], function(result, n) {\n","\t     *   result.push(n *= n);\n","\t     *   return n % 2 == 0;\n","\t     * }, []);\n","\t     * // => [4, 9]\n","\t     *\n","\t     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n","\t     *   (result[value] || (result[value] = [])).push(key);\n","\t     * }, {});\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] }\n","\t     */\n","\t    function transform(object, iteratee, accumulator) {\n","\t      var isArr = isArray(object),\n","\t          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n","\t\n","\t      iteratee = getIteratee(iteratee, 4);\n","\t      if (accumulator == null) {\n","\t        var Ctor = object && object.constructor;\n","\t        if (isArrLike) {\n","\t          accumulator = isArr ? new Ctor : [];\n","\t        }\n","\t        else if (isObject(object)) {\n","\t          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n","\t        }\n","\t        else {\n","\t          accumulator = {};\n","\t        }\n","\t      }\n","\t      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n","\t        return iteratee(accumulator, value, index, object);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes the property at `path` of `object`.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to unset.\n","\t     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n","\t     * _.unset(object, 'a[0].b.c');\n","\t     * // => true\n","\t     *\n","\t     * console.log(object);\n","\t     * // => { 'a': [{ 'b': {} }] };\n","\t     *\n","\t     * _.unset(object, ['a', '0', 'b', 'c']);\n","\t     * // => true\n","\t     *\n","\t     * console.log(object);\n","\t     * // => { 'a': [{ 'b': {} }] };\n","\t     */\n","\t    function unset(object, path) {\n","\t      return object == null ? true : baseUnset(object, path);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.set` except that accepts `updater` to produce the\n","\t     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n","\t     * is invoked with one argument: (value).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n","\t     * console.log(object.a[0].b.c);\n","\t     * // => 9\n","\t     *\n","\t     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n","\t     * console.log(object.x[0].y.z);\n","\t     * // => 0\n","\t     */\n","\t    function update(object, path, updater) {\n","\t      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.update` except that it accepts `customizer` which is\n","\t     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n","\t     * path creation is handled by the method instead. The `customizer` is invoked\n","\t     * with three arguments: (nsValue, key, nsObject).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {};\n","\t     *\n","\t     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n","\t     * // => { '0': { '1': 'a' } }\n","\t     */\n","\t    function updateWith(object, path, updater, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable string keyed property values of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property values.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.values(new Foo);\n","\t     * // => [1, 2] (iteration order is not guaranteed)\n","\t     *\n","\t     * _.values('hi');\n","\t     * // => ['h', 'i']\n","\t     */\n","\t    function values(object) {\n","\t      return object == null ? [] : baseValues(object, keys(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable string keyed property\n","\t     * values of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property values.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.valuesIn(new Foo);\n","\t     * // => [1, 2, 3] (iteration order is not guaranteed)\n","\t     */\n","\t    function valuesIn(object) {\n","\t      return object == null ? [] : baseValues(object, keysIn(object));\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Number\n","\t     * @param {number} number The number to clamp.\n","\t     * @param {number} [lower] The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the clamped number.\n","\t     * @example\n","\t     *\n","\t     * _.clamp(-10, -5, 5);\n","\t     * // => -5\n","\t     *\n","\t     * _.clamp(10, -5, 5);\n","\t     * // => 5\n","\t     */\n","\t    function clamp(number, lower, upper) {\n","\t      if (upper === undefined) {\n","\t        upper = lower;\n","\t        lower = undefined;\n","\t      }\n","\t      if (upper !== undefined) {\n","\t        upper = toNumber(upper);\n","\t        upper = upper === upper ? upper : 0;\n","\t      }\n","\t      if (lower !== undefined) {\n","\t        lower = toNumber(lower);\n","\t        lower = lower === lower ? lower : 0;\n","\t      }\n","\t      return baseClamp(toNumber(number), lower, upper);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `n` is between `start` and up to, but not including, `end`. If\n","\t     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n","\t     * If `start` is greater than `end` the params are swapped to support\n","\t     * negative ranges.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.3.0\n","\t     * @category Number\n","\t     * @param {number} number The number to check.\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n","\t     * @see _.range, _.rangeRight\n","\t     * @example\n","\t     *\n","\t     * _.inRange(3, 2, 4);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(4, 8);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(4, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(2, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(1.2, 2);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(5.2, 4);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(-3, -2, -6);\n","\t     * // => true\n","\t     */\n","\t    function inRange(number, start, end) {\n","\t      start = toFinite(start);\n","\t      if (end === undefined) {\n","\t        end = start;\n","\t        start = 0;\n","\t      } else {\n","\t        end = toFinite(end);\n","\t      }\n","\t      number = toNumber(number);\n","\t      return baseInRange(number, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * Produces a random number between the inclusive `lower` and `upper` bounds.\n","\t     * If only one argument is provided a number between `0` and the given number\n","\t     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n","\t     * floats, a floating-point number is returned instead of an integer.\n","\t     *\n","\t     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n","\t     * floating-point values which can produce unexpected results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.7.0\n","\t     * @category Number\n","\t     * @param {number} [lower=0] The lower bound.\n","\t     * @param {number} [upper=1] The upper bound.\n","\t     * @param {boolean} [floating] Specify returning a floating-point number.\n","\t     * @returns {number} Returns the random number.\n","\t     * @example\n","\t     *\n","\t     * _.random(0, 5);\n","\t     * // => an integer between 0 and 5\n","\t     *\n","\t     * _.random(5);\n","\t     * // => also an integer between 0 and 5\n","\t     *\n","\t     * _.random(5, true);\n","\t     * // => a floating-point number between 0 and 5\n","\t     *\n","\t     * _.random(1.2, 5.2);\n","\t     * // => a floating-point number between 1.2 and 5.2\n","\t     */\n","\t    function random(lower, upper, floating) {\n","\t      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n","\t        upper = floating = undefined;\n","\t      }\n","\t      if (floating === undefined) {\n","\t        if (typeof upper == 'boolean') {\n","\t          floating = upper;\n","\t          upper = undefined;\n","\t        }\n","\t        else if (typeof lower == 'boolean') {\n","\t          floating = lower;\n","\t          lower = undefined;\n","\t        }\n","\t      }\n","\t      if (lower === undefined && upper === undefined) {\n","\t        lower = 0;\n","\t        upper = 1;\n","\t      }\n","\t      else {\n","\t        lower = toFinite(lower);\n","\t        if (upper === undefined) {\n","\t          upper = lower;\n","\t          lower = 0;\n","\t        } else {\n","\t          upper = toFinite(upper);\n","\t        }\n","\t      }\n","\t      if (lower > upper) {\n","\t        var temp = lower;\n","\t        lower = upper;\n","\t        upper = temp;\n","\t      }\n","\t      if (floating || lower % 1 || upper % 1) {\n","\t        var rand = nativeRandom();\n","\t        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n","\t      }\n","\t      return baseRandom(lower, upper);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the camel cased string.\n","\t     * @example\n","\t     *\n","\t     * _.camelCase('Foo Bar');\n","\t     * // => 'fooBar'\n","\t     *\n","\t     * _.camelCase('--foo-bar--');\n","\t     * // => 'fooBar'\n","\t     *\n","\t     * _.camelCase('__FOO_BAR__');\n","\t     * // => 'fooBar'\n","\t     */\n","\t    var camelCase = createCompounder(function(result, word, index) {\n","\t      word = word.toLowerCase();\n","\t      return result + (index ? capitalize(word) : word);\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to upper case and the remaining\n","\t     * to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to capitalize.\n","\t     * @returns {string} Returns the capitalized string.\n","\t     * @example\n","\t     *\n","\t     * _.capitalize('FRED');\n","\t     * // => 'Fred'\n","\t     */\n","\t    function capitalize(string) {\n","\t      return upperFirst(toString(string).toLowerCase());\n","\t    }\n","\t\n","\t    /**\n","\t     * Deburrs `string` by converting\n","\t     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n","\t     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n","\t     * letters to basic Latin letters and removing\n","\t     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to deburr.\n","\t     * @returns {string} Returns the deburred string.\n","\t     * @example\n","\t     *\n","\t     * _.deburr('déjà vu');\n","\t     * // => 'deja vu'\n","\t     */\n","\t    function deburr(string) {\n","\t      string = toString(string);\n","\t      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `string` ends with the given target string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {string} [target] The string to search for.\n","\t     * @param {number} [position=string.length] The position to search up to.\n","\t     * @returns {boolean} Returns `true` if `string` ends with `target`,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.endsWith('abc', 'c');\n","\t     * // => true\n","\t     *\n","\t     * _.endsWith('abc', 'b');\n","\t     * // => false\n","\t     *\n","\t     * _.endsWith('abc', 'b', 2);\n","\t     * // => true\n","\t     */\n","\t    function endsWith(string, target, position) {\n","\t      string = toString(string);\n","\t      target = baseToString(target);\n","\t\n","\t      var length = string.length;\n","\t      position = position === undefined\n","\t        ? length\n","\t        : baseClamp(toInteger(position), 0, length);\n","\t\n","\t      var end = position;\n","\t      position -= target.length;\n","\t      return position >= 0 && string.slice(position, end) == target;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n","\t     * corresponding HTML entities.\n","\t     *\n","\t     * **Note:** No other characters are escaped. To escape additional\n","\t     * characters use a third-party library like [_he_](https://mths.be/he).\n","\t     *\n","\t     * Though the \">\" character is escaped for symmetry, characters like\n","\t     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n","\t     * unless they're part of a tag or unquoted attribute value. See\n","\t     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n","\t     * (under \"semi-related fun fact\") for more details.\n","\t     *\n","\t     * When working with HTML you should always\n","\t     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n","\t     * XSS vectors.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to escape.\n","\t     * @returns {string} Returns the escaped string.\n","\t     * @example\n","\t     *\n","\t     * _.escape('fred, barney, & pebbles');\n","\t     * // => 'fred, barney, &amp; pebbles'\n","\t     */\n","\t    function escape(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasUnescapedHtml.test(string))\n","\t        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n","\t     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to escape.\n","\t     * @returns {string} Returns the escaped string.\n","\t     * @example\n","\t     *\n","\t     * _.escapeRegExp('[lodash](https://lodash.com/)');\n","\t     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n","\t     */\n","\t    function escapeRegExp(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasRegExpChar.test(string))\n","\t        ? string.replace(reRegExpChar, '\\\\$&')\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the kebab cased string.\n","\t     * @example\n","\t     *\n","\t     * _.kebabCase('Foo Bar');\n","\t     * // => 'foo-bar'\n","\t     *\n","\t     * _.kebabCase('fooBar');\n","\t     * // => 'foo-bar'\n","\t     *\n","\t     * _.kebabCase('__FOO_BAR__');\n","\t     * // => 'foo-bar'\n","\t     */\n","\t    var kebabCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? '-' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `string`, as space separated words, to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the lower cased string.\n","\t     * @example\n","\t     *\n","\t     * _.lowerCase('--Foo-Bar--');\n","\t     * // => 'foo bar'\n","\t     *\n","\t     * _.lowerCase('fooBar');\n","\t     * // => 'foo bar'\n","\t     *\n","\t     * _.lowerCase('__FOO_BAR__');\n","\t     * // => 'foo bar'\n","\t     */\n","\t    var lowerCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.lowerFirst('Fred');\n","\t     * // => 'fred'\n","\t     *\n","\t     * _.lowerFirst('FRED');\n","\t     * // => 'fRED'\n","\t     */\n","\t    var lowerFirst = createCaseFirst('toLowerCase');\n","\t\n","\t    /**\n","\t     * Pads `string` on the left and right sides if it's shorter than `length`.\n","\t     * Padding characters are truncated if they can't be evenly divided by `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.pad('abc', 8);\n","\t     * // => '  abc   '\n","\t     *\n","\t     * _.pad('abc', 8, '_-');\n","\t     * // => '_-abc_-_'\n","\t     *\n","\t     * _.pad('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function pad(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      if (!length || strLength >= length) {\n","\t        return string;\n","\t      }\n","\t      var mid = (length - strLength) / 2;\n","\t      return (\n","\t        createPadding(nativeFloor(mid), chars) +\n","\t        string +\n","\t        createPadding(nativeCeil(mid), chars)\n","\t      );\n","\t    }\n","\t\n","\t    /**\n","\t     * Pads `string` on the right side if it's shorter than `length`. Padding\n","\t     * characters are truncated if they exceed `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.padEnd('abc', 6);\n","\t     * // => 'abc   '\n","\t     *\n","\t     * _.padEnd('abc', 6, '_-');\n","\t     * // => 'abc_-_'\n","\t     *\n","\t     * _.padEnd('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function padEnd(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      return (length && strLength < length)\n","\t        ? (string + createPadding(length - strLength, chars))\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Pads `string` on the left side if it's shorter than `length`. Padding\n","\t     * characters are truncated if they exceed `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.padStart('abc', 6);\n","\t     * // => '   abc'\n","\t     *\n","\t     * _.padStart('abc', 6, '_-');\n","\t     * // => '_-_abc'\n","\t     *\n","\t     * _.padStart('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function padStart(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      return (length && strLength < length)\n","\t        ? (createPadding(length - strLength, chars) + string)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to an integer of the specified radix. If `radix` is\n","\t     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n","\t     * hexadecimal, in which case a `radix` of `16` is used.\n","\t     *\n","\t     * **Note:** This method aligns with the\n","\t     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category String\n","\t     * @param {string} string The string to convert.\n","\t     * @param {number} [radix=10] The radix to interpret `value` by.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.parseInt('08');\n","\t     * // => 8\n","\t     *\n","\t     * _.map(['6', '08', '10'], _.parseInt);\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function parseInt(string, radix, guard) {\n","\t      if (guard || radix == null) {\n","\t        radix = 0;\n","\t      } else if (radix) {\n","\t        radix = +radix;\n","\t      }\n","\t      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n","\t    }\n","\t\n","\t    /**\n","\t     * Repeats the given string `n` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to repeat.\n","\t     * @param {number} [n=1] The number of times to repeat the string.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the repeated string.\n","\t     * @example\n","\t     *\n","\t     * _.repeat('*', 3);\n","\t     * // => '***'\n","\t     *\n","\t     * _.repeat('abc', 2);\n","\t     * // => 'abcabc'\n","\t     *\n","\t     * _.repeat('abc', 0);\n","\t     * // => ''\n","\t     */\n","\t    function repeat(string, n, guard) {\n","\t      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n","\t        n = 1;\n","\t      } else {\n","\t        n = toInteger(n);\n","\t      }\n","\t      return baseRepeat(toString(string), n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Replaces matches for `pattern` in `string` with `replacement`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`String#replace`](https://mdn.io/String/replace).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to modify.\n","\t     * @param {RegExp|string} pattern The pattern to replace.\n","\t     * @param {Function|string} replacement The match replacement.\n","\t     * @returns {string} Returns the modified string.\n","\t     * @example\n","\t     *\n","\t     * _.replace('Hi Fred', 'Fred', 'Barney');\n","\t     * // => 'Hi Barney'\n","\t     */\n","\t    function replace() {\n","\t      var args = arguments,\n","\t          string = toString(args[0]);\n","\t\n","\t      return args.length < 3 ? string : string.replace(args[1], args[2]);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the snake cased string.\n","\t     * @example\n","\t     *\n","\t     * _.snakeCase('Foo Bar');\n","\t     * // => 'foo_bar'\n","\t     *\n","\t     * _.snakeCase('fooBar');\n","\t     * // => 'foo_bar'\n","\t     *\n","\t     * _.snakeCase('--FOO-BAR--');\n","\t     * // => 'foo_bar'\n","\t     */\n","\t    var snakeCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? '_' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Splits `string` by `separator`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`String#split`](https://mdn.io/String/split).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to split.\n","\t     * @param {RegExp|string} separator The separator pattern to split by.\n","\t     * @param {number} [limit] The length to truncate results to.\n","\t     * @returns {Array} Returns the string segments.\n","\t     * @example\n","\t     *\n","\t     * _.split('a-b-c', '-', 2);\n","\t     * // => ['a', 'b']\n","\t     */\n","\t    function split(string, separator, limit) {\n","\t      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n","\t        separator = limit = undefined;\n","\t      }\n","\t      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n","\t      if (!limit) {\n","\t        return [];\n","\t      }\n","\t      string = toString(string);\n","\t      if (string && (\n","\t            typeof separator == 'string' ||\n","\t            (separator != null && !isRegExp(separator))\n","\t          )) {\n","\t        separator = baseToString(separator);\n","\t        if (!separator && hasUnicode(string)) {\n","\t          return castSlice(stringToArray(string), 0, limit);\n","\t        }\n","\t      }\n","\t      return string.split(separator, limit);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.1.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the start cased string.\n","\t     * @example\n","\t     *\n","\t     * _.startCase('--foo-bar--');\n","\t     * // => 'Foo Bar'\n","\t     *\n","\t     * _.startCase('fooBar');\n","\t     * // => 'Foo Bar'\n","\t     *\n","\t     * _.startCase('__FOO_BAR__');\n","\t     * // => 'FOO BAR'\n","\t     */\n","\t    var startCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + upperFirst(word);\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `string` starts with the given target string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {string} [target] The string to search for.\n","\t     * @param {number} [position=0] The position to search from.\n","\t     * @returns {boolean} Returns `true` if `string` starts with `target`,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.startsWith('abc', 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.startsWith('abc', 'b');\n","\t     * // => false\n","\t     *\n","\t     * _.startsWith('abc', 'b', 1);\n","\t     * // => true\n","\t     */\n","\t    function startsWith(string, target, position) {\n","\t      string = toString(string);\n","\t      position = position == null\n","\t        ? 0\n","\t        : baseClamp(toInteger(position), 0, string.length);\n","\t\n","\t      target = baseToString(target);\n","\t      return string.slice(position, position + target.length) == target;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a compiled template function that can interpolate data properties\n","\t     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n","\t     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n","\t     * properties may be accessed as free variables in the template. If a setting\n","\t     * object is given, it takes precedence over `_.templateSettings` values.\n","\t     *\n","\t     * **Note:** In the development build `_.template` utilizes\n","\t     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n","\t     * for easier debugging.\n","\t     *\n","\t     * For more information on precompiling templates see\n","\t     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n","\t     *\n","\t     * For more information on Chrome extension sandboxes see\n","\t     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category String\n","\t     * @param {string} [string=''] The template string.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {RegExp} [options.escape=_.templateSettings.escape]\n","\t     *  The HTML \"escape\" delimiter.\n","\t     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n","\t     *  The \"evaluate\" delimiter.\n","\t     * @param {Object} [options.imports=_.templateSettings.imports]\n","\t     *  An object to import into the template as free variables.\n","\t     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n","\t     *  The \"interpolate\" delimiter.\n","\t     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n","\t     *  The sourceURL of the compiled template.\n","\t     * @param {string} [options.variable='obj']\n","\t     *  The data object variable name.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the compiled template function.\n","\t     * @example\n","\t     *\n","\t     * // Use the \"interpolate\" delimiter to create a compiled template.\n","\t     * var compiled = _.template('hello <%= user %>!');\n","\t     * compiled({ 'user': 'fred' });\n","\t     * // => 'hello fred!'\n","\t     *\n","\t     * // Use the HTML \"escape\" delimiter to escape data property values.\n","\t     * var compiled = _.template('<b><%- value %></b>');\n","\t     * compiled({ 'value': '<script>' });\n","\t     * // => '<b>&lt;script&gt;</b>'\n","\t     *\n","\t     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n","\t     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n","\t     * compiled({ 'users': ['fred', 'barney'] });\n","\t     * // => '<li>fred</li><li>barney</li>'\n","\t     *\n","\t     * // Use the internal `print` function in \"evaluate\" delimiters.\n","\t     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n","\t     * compiled({ 'user': 'barney' });\n","\t     * // => 'hello barney!'\n","\t     *\n","\t     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n","\t     * // Disable support by replacing the \"interpolate\" delimiter.\n","\t     * var compiled = _.template('hello ${ user }!');\n","\t     * compiled({ 'user': 'pebbles' });\n","\t     * // => 'hello pebbles!'\n","\t     *\n","\t     * // Use backslashes to treat delimiters as plain text.\n","\t     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n","\t     * compiled({ 'value': 'ignored' });\n","\t     * // => '<%- value %>'\n","\t     *\n","\t     * // Use the `imports` option to import `jQuery` as `jq`.\n","\t     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n","\t     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n","\t     * compiled({ 'users': ['fred', 'barney'] });\n","\t     * // => '<li>fred</li><li>barney</li>'\n","\t     *\n","\t     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n","\t     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n","\t     * compiled(data);\n","\t     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n","\t     *\n","\t     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n","\t     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n","\t     * compiled.source;\n","\t     * // => function(data) {\n","\t     * //   var __t, __p = '';\n","\t     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n","\t     * //   return __p;\n","\t     * // }\n","\t     *\n","\t     * // Use custom template delimiters.\n","\t     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n","\t     * var compiled = _.template('hello {{ user }}!');\n","\t     * compiled({ 'user': 'mustache' });\n","\t     * // => 'hello mustache!'\n","\t     *\n","\t     * // Use the `source` property to inline compiled templates for meaningful\n","\t     * // line numbers in error messages and stack traces.\n","\t     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n","\t     *   var JST = {\\\n","\t     *     \"main\": ' + _.template(mainText).source + '\\\n","\t     *   };\\\n","\t     * ');\n","\t     */\n","\t    function template(string, options, guard) {\n","\t      // Based on John Resig's `tmpl` implementation\n","\t      // (http://ejohn.org/blog/javascript-micro-templating/)\n","\t      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n","\t      var settings = lodash.templateSettings;\n","\t\n","\t      if (guard && isIterateeCall(string, options, guard)) {\n","\t        options = undefined;\n","\t      }\n","\t      string = toString(string);\n","\t      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n","\t\n","\t      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n","\t          importsKeys = keys(imports),\n","\t          importsValues = baseValues(imports, importsKeys);\n","\t\n","\t      var isEscaping,\n","\t          isEvaluating,\n","\t          index = 0,\n","\t          interpolate = options.interpolate || reNoMatch,\n","\t          source = \"__p += '\";\n","\t\n","\t      // Compile the regexp to match each delimiter.\n","\t      var reDelimiters = RegExp(\n","\t        (options.escape || reNoMatch).source + '|' +\n","\t        interpolate.source + '|' +\n","\t        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n","\t        (options.evaluate || reNoMatch).source + '|$'\n","\t      , 'g');\n","\t\n","\t      // Use a sourceURL for easier debugging.\n","\t      var sourceURL = '//# sourceURL=' +\n","\t        ('sourceURL' in options\n","\t          ? options.sourceURL\n","\t          : ('lodash.templateSources[' + (++templateCounter) + ']')\n","\t        ) + '\\n';\n","\t\n","\t      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n","\t        interpolateValue || (interpolateValue = esTemplateValue);\n","\t\n","\t        // Escape characters that can't be included in string literals.\n","\t        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n","\t\n","\t        // Replace delimiters with snippets.\n","\t        if (escapeValue) {\n","\t          isEscaping = true;\n","\t          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n","\t        }\n","\t        if (evaluateValue) {\n","\t          isEvaluating = true;\n","\t          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n","\t        }\n","\t        if (interpolateValue) {\n","\t          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n","\t        }\n","\t        index = offset + match.length;\n","\t\n","\t        // The JS engine embedded in Adobe products needs `match` returned in\n","\t        // order to produce the correct `offset` value.\n","\t        return match;\n","\t      });\n","\t\n","\t      source += \"';\\n\";\n","\t\n","\t      // If `variable` is not specified wrap a with-statement around the generated\n","\t      // code to add the data object to the top of the scope chain.\n","\t      var variable = options.variable;\n","\t      if (!variable) {\n","\t        source = 'with (obj) {\\n' + source + '\\n}\\n';\n","\t      }\n","\t      // Cleanup code by stripping empty strings.\n","\t      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n","\t        .replace(reEmptyStringMiddle, '$1')\n","\t        .replace(reEmptyStringTrailing, '$1;');\n","\t\n","\t      // Frame code as the function body.\n","\t      source = 'function(' + (variable || 'obj') + ') {\\n' +\n","\t        (variable\n","\t          ? ''\n","\t          : 'obj || (obj = {});\\n'\n","\t        ) +\n","\t        \"var __t, __p = ''\" +\n","\t        (isEscaping\n","\t           ? ', __e = _.escape'\n","\t           : ''\n","\t        ) +\n","\t        (isEvaluating\n","\t          ? ', __j = Array.prototype.join;\\n' +\n","\t            \"function print() { __p += __j.call(arguments, '') }\\n\"\n","\t          : ';\\n'\n","\t        ) +\n","\t        source +\n","\t        'return __p\\n}';\n","\t\n","\t      var result = attempt(function() {\n","\t        return Function(importsKeys, sourceURL + 'return ' + source)\n","\t          .apply(undefined, importsValues);\n","\t      });\n","\t\n","\t      // Provide the compiled function's source by its `toString` method or\n","\t      // the `source` property as a convenience for inlining compiled templates.\n","\t      result.source = source;\n","\t      if (isError(result)) {\n","\t        throw result;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as a whole, to lower case just like\n","\t     * [String#toLowerCase](https://mdn.io/toLowerCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the lower cased string.\n","\t     * @example\n","\t     *\n","\t     * _.toLower('--Foo-Bar--');\n","\t     * // => '--foo-bar--'\n","\t     *\n","\t     * _.toLower('fooBar');\n","\t     * // => 'foobar'\n","\t     *\n","\t     * _.toLower('__FOO_BAR__');\n","\t     * // => '__foo_bar__'\n","\t     */\n","\t    function toLower(value) {\n","\t      return toString(value).toLowerCase();\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as a whole, to upper case just like\n","\t     * [String#toUpperCase](https://mdn.io/toUpperCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the upper cased string.\n","\t     * @example\n","\t     *\n","\t     * _.toUpper('--foo-bar--');\n","\t     * // => '--FOO-BAR--'\n","\t     *\n","\t     * _.toUpper('fooBar');\n","\t     * // => 'FOOBAR'\n","\t     *\n","\t     * _.toUpper('__foo_bar__');\n","\t     * // => '__FOO_BAR__'\n","\t     */\n","\t    function toUpper(value) {\n","\t      return toString(value).toUpperCase();\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes leading and trailing whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trim('  abc  ');\n","\t     * // => 'abc'\n","\t     *\n","\t     * _.trim('-_-abc-_-', '_-');\n","\t     * // => 'abc'\n","\t     *\n","\t     * _.map(['  foo  ', '  bar  '], _.trim);\n","\t     * // => ['foo', 'bar']\n","\t     */\n","\t    function trim(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrim, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          chrSymbols = stringToArray(chars),\n","\t          start = charsStartIndex(strSymbols, chrSymbols),\n","\t          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n","\t\n","\t      return castSlice(strSymbols, start, end).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes trailing whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trimEnd('  abc  ');\n","\t     * // => '  abc'\n","\t     *\n","\t     * _.trimEnd('-_-abc-_-', '_-');\n","\t     * // => '-_-abc'\n","\t     */\n","\t    function trimEnd(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrimEnd, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n","\t\n","\t      return castSlice(strSymbols, 0, end).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes leading whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trimStart('  abc  ');\n","\t     * // => 'abc  '\n","\t     *\n","\t     * _.trimStart('-_-abc-_-', '_-');\n","\t     * // => 'abc-_-'\n","\t     */\n","\t    function trimStart(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrimStart, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          start = charsStartIndex(strSymbols, stringToArray(chars));\n","\t\n","\t      return castSlice(strSymbols, start).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Truncates `string` if it's longer than the given maximum string length.\n","\t     * The last characters of the truncated string are replaced with the omission\n","\t     * string which defaults to \"...\".\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to truncate.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {number} [options.length=30] The maximum string length.\n","\t     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n","\t     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n","\t     * @returns {string} Returns the truncated string.\n","\t     * @example\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino');\n","\t     * // => 'hi-diddly-ho there, neighbo...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'length': 24,\n","\t     *   'separator': ' '\n","\t     * });\n","\t     * // => 'hi-diddly-ho there,...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'length': 24,\n","\t     *   'separator': /,? +/\n","\t     * });\n","\t     * // => 'hi-diddly-ho there...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'omission': ' [...]'\n","\t     * });\n","\t     * // => 'hi-diddly-ho there, neig [...]'\n","\t     */\n","\t    function truncate(string, options) {\n","\t      var length = DEFAULT_TRUNC_LENGTH,\n","\t          omission = DEFAULT_TRUNC_OMISSION;\n","\t\n","\t      if (isObject(options)) {\n","\t        var separator = 'separator' in options ? options.separator : separator;\n","\t        length = 'length' in options ? toInteger(options.length) : length;\n","\t        omission = 'omission' in options ? baseToString(options.omission) : omission;\n","\t      }\n","\t      string = toString(string);\n","\t\n","\t      var strLength = string.length;\n","\t      if (hasUnicode(string)) {\n","\t        var strSymbols = stringToArray(string);\n","\t        strLength = strSymbols.length;\n","\t      }\n","\t      if (length >= strLength) {\n","\t        return string;\n","\t      }\n","\t      var end = length - stringSize(omission);\n","\t      if (end < 1) {\n","\t        return omission;\n","\t      }\n","\t      var result = strSymbols\n","\t        ? castSlice(strSymbols, 0, end).join('')\n","\t        : string.slice(0, end);\n","\t\n","\t      if (separator === undefined) {\n","\t        return result + omission;\n","\t      }\n","\t      if (strSymbols) {\n","\t        end += (result.length - end);\n","\t      }\n","\t      if (isRegExp(separator)) {\n","\t        if (string.slice(end).search(separator)) {\n","\t          var match,\n","\t              substring = result;\n","\t\n","\t          if (!separator.global) {\n","\t            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n","\t          }\n","\t          separator.lastIndex = 0;\n","\t          while ((match = separator.exec(substring))) {\n","\t            var newEnd = match.index;\n","\t          }\n","\t          result = result.slice(0, newEnd === undefined ? end : newEnd);\n","\t        }\n","\t      } else if (string.indexOf(baseToString(separator), end) != end) {\n","\t        var index = result.lastIndexOf(separator);\n","\t        if (index > -1) {\n","\t          result = result.slice(0, index);\n","\t        }\n","\t      }\n","\t      return result + omission;\n","\t    }\n","\t\n","\t    /**\n","\t     * The inverse of `_.escape`; this method converts the HTML entities\n","\t     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n","\t     * their corresponding characters.\n","\t     *\n","\t     * **Note:** No other HTML entities are unescaped. To unescape additional\n","\t     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.6.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to unescape.\n","\t     * @returns {string} Returns the unescaped string.\n","\t     * @example\n","\t     *\n","\t     * _.unescape('fred, barney, &amp; pebbles');\n","\t     * // => 'fred, barney, & pebbles'\n","\t     */\n","\t    function unescape(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasEscapedHtml.test(string))\n","\t        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as space separated words, to upper case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the upper cased string.\n","\t     * @example\n","\t     *\n","\t     * _.upperCase('--foo-bar');\n","\t     * // => 'FOO BAR'\n","\t     *\n","\t     * _.upperCase('fooBar');\n","\t     * // => 'FOO BAR'\n","\t     *\n","\t     * _.upperCase('__foo_bar__');\n","\t     * // => 'FOO BAR'\n","\t     */\n","\t    var upperCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + word.toUpperCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to upper case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.upperFirst('fred');\n","\t     * // => 'Fred'\n","\t     *\n","\t     * _.upperFirst('FRED');\n","\t     * // => 'FRED'\n","\t     */\n","\t    var upperFirst = createCaseFirst('toUpperCase');\n","\t\n","\t    /**\n","\t     * Splits `string` into an array of its words.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {RegExp|string} [pattern] The pattern to match words.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the words of `string`.\n","\t     * @example\n","\t     *\n","\t     * _.words('fred, barney, & pebbles');\n","\t     * // => ['fred', 'barney', 'pebbles']\n","\t     *\n","\t     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n","\t     * // => ['fred', 'barney', '&', 'pebbles']\n","\t     */\n","\t    function words(string, pattern, guard) {\n","\t      string = toString(string);\n","\t      pattern = guard ? undefined : pattern;\n","\t\n","\t      if (pattern === undefined) {\n","\t        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n","\t      }\n","\t      return string.match(pattern) || [];\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Attempts to invoke `func`, returning either the result or the caught error\n","\t     * object. Any additional arguments are provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Function} func The function to attempt.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {*} Returns the `func` result or error object.\n","\t     * @example\n","\t     *\n","\t     * // Avoid throwing errors for invalid selectors.\n","\t     * var elements = _.attempt(function(selector) {\n","\t     *   return document.querySelectorAll(selector);\n","\t     * }, '>_>');\n","\t     *\n","\t     * if (_.isError(elements)) {\n","\t     *   elements = [];\n","\t     * }\n","\t     */\n","\t    var attempt = baseRest(function(func, args) {\n","\t      try {\n","\t        return apply(func, undefined, args);\n","\t      } catch (e) {\n","\t        return isError(e) ? e : new Error(e);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Binds methods of an object to the object itself, overwriting the existing\n","\t     * method.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of bound functions.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {Object} object The object to bind and assign the bound methods to.\n","\t     * @param {...(string|string[])} methodNames The object method names to bind.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var view = {\n","\t     *   'label': 'docs',\n","\t     *   'click': function() {\n","\t     *     console.log('clicked ' + this.label);\n","\t     *   }\n","\t     * };\n","\t     *\n","\t     * _.bindAll(view, ['click']);\n","\t     * jQuery(element).on('click', view.click);\n","\t     * // => Logs 'clicked docs' when clicked.\n","\t     */\n","\t    var bindAll = flatRest(function(object, methodNames) {\n","\t      arrayEach(methodNames, function(key) {\n","\t        key = toKey(key);\n","\t        baseAssignValue(object, key, bind(object[key], object));\n","\t      });\n","\t      return object;\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that iterates over `pairs` and invokes the corresponding\n","\t     * function of the first predicate to return truthy. The predicate-function\n","\t     * pairs are invoked with the `this` binding and arguments of the created\n","\t     * function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {Array} pairs The predicate-function pairs.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.cond([\n","\t     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n","\t     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n","\t     *   [_.stubTrue,                      _.constant('no match')]\n","\t     * ]);\n","\t     *\n","\t     * func({ 'a': 1, 'b': 2 });\n","\t     * // => 'matches A'\n","\t     *\n","\t     * func({ 'a': 0, 'b': 1 });\n","\t     * // => 'matches B'\n","\t     *\n","\t     * func({ 'a': '1', 'b': '2' });\n","\t     * // => 'no match'\n","\t     */\n","\t    function cond(pairs) {\n","\t      var length = pairs == null ? 0 : pairs.length,\n","\t          toIteratee = getIteratee();\n","\t\n","\t      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n","\t        if (typeof pair[1] != 'function') {\n","\t          throw new TypeError(FUNC_ERROR_TEXT);\n","\t        }\n","\t        return [toIteratee(pair[0]), pair[1]];\n","\t      });\n","\t\n","\t      return baseRest(function(args) {\n","\t        var index = -1;\n","\t        while (++index < length) {\n","\t          var pair = pairs[index];\n","\t          if (apply(pair[0], this, args)) {\n","\t            return apply(pair[1], this, args);\n","\t          }\n","\t        }\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the predicate properties of `source` with\n","\t     * the corresponding property values of a given object, returning `true` if\n","\t     * all predicates return truthy, else `false`.\n","\t     *\n","\t     * **Note:** The created function is equivalent to `_.conformsTo` with\n","\t     * `source` partially applied.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 2, 'b': 1 },\n","\t     *   { 'a': 1, 'b': 2 }\n","\t     * ];\n","\t     *\n","\t     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n","\t     * // => [{ 'a': 1, 'b': 2 }]\n","\t     */\n","\t    function conforms(source) {\n","\t      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that returns `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Util\n","\t     * @param {*} value The value to return from the new function.\n","\t     * @returns {Function} Returns the new constant function.\n","\t     * @example\n","\t     *\n","\t     * var objects = _.times(2, _.constant({ 'a': 1 }));\n","\t     *\n","\t     * console.log(objects);\n","\t     * // => [{ 'a': 1 }, { 'a': 1 }]\n","\t     *\n","\t     * console.log(objects[0] === objects[1]);\n","\t     * // => true\n","\t     */\n","\t    function constant(value) {\n","\t      return function() {\n","\t        return value;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks `value` to determine whether a default value should be returned in\n","\t     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n","\t     * or `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.14.0\n","\t     * @category Util\n","\t     * @param {*} value The value to check.\n","\t     * @param {*} defaultValue The default value.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * _.defaultTo(1, 10);\n","\t     * // => 1\n","\t     *\n","\t     * _.defaultTo(undefined, 10);\n","\t     * // => 10\n","\t     */\n","\t    function defaultTo(value, defaultValue) {\n","\t      return (value == null || value !== value) ? defaultValue : value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that returns the result of invoking the given functions\n","\t     * with the `this` binding of the created function, where each successive\n","\t     * invocation is supplied the return value of the previous.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @see _.flowRight\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var addSquare = _.flow([_.add, square]);\n","\t     * addSquare(1, 2);\n","\t     * // => 9\n","\t     */\n","\t    var flow = createFlow();\n","\t\n","\t    /**\n","\t     * This method is like `_.flow` except that it creates a function that\n","\t     * invokes the given functions from right to left.\n","\t     *\n","\t     * @static\n","\t     * @since 3.0.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @see _.flow\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var addSquare = _.flowRight([square, _.add]);\n","\t     * addSquare(1, 2);\n","\t     * // => 9\n","\t     */\n","\t    var flowRight = createFlow(true);\n","\t\n","\t    /**\n","\t     * This method returns the first argument it receives.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {*} value Any value.\n","\t     * @returns {*} Returns `value`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     *\n","\t     * console.log(_.identity(object) === object);\n","\t     * // => true\n","\t     */\n","\t    function identity(value) {\n","\t      return value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the arguments of the created\n","\t     * function. If `func` is a property name, the created function returns the\n","\t     * property value for a given element. If `func` is an array or object, the\n","\t     * created function returns `true` for elements that contain the equivalent\n","\t     * source properties, otherwise it returns `false`.\n","\t     *\n","\t     * @static\n","\t     * @since 4.0.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {*} [func=_.identity] The value to convert to a callback.\n","\t     * @returns {Function} Returns the callback.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n","\t     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.filter(users, _.iteratee(['user', 'fred']));\n","\t     * // => [{ 'user': 'fred', 'age': 40 }]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.map(users, _.iteratee('user'));\n","\t     * // => ['barney', 'fred']\n","\t     *\n","\t     * // Create custom iteratee shorthands.\n","\t     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n","\t     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n","\t     *     return func.test(string);\n","\t     *   };\n","\t     * });\n","\t     *\n","\t     * _.filter(['abc', 'def'], /ef/);\n","\t     * // => ['def']\n","\t     */\n","\t    function iteratee(func) {\n","\t      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a partial deep comparison between a given\n","\t     * object and `source`, returning `true` if the given object has equivalent\n","\t     * property values, else `false`.\n","\t     *\n","\t     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n","\t     * partially applied.\n","\t     *\n","\t     * Partial comparisons will match empty array and empty object `source`\n","\t     * values against any array or object value, respectively. See `_.isEqual`\n","\t     * for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 1, 'b': 2, 'c': 3 },\n","\t     *   { 'a': 4, 'b': 5, 'c': 6 }\n","\t     * ];\n","\t     *\n","\t     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n","\t     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n","\t     */\n","\t    function matches(source) {\n","\t      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a partial deep comparison between the\n","\t     * value at `path` of a given object to `srcValue`, returning `true` if the\n","\t     * object value is equivalent, else `false`.\n","\t     *\n","\t     * **Note:** Partial comparisons will match empty array and empty object\n","\t     * `srcValue` values against any array or object value, respectively. See\n","\t     * `_.isEqual` for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 1, 'b': 2, 'c': 3 },\n","\t     *   { 'a': 4, 'b': 5, 'c': 6 }\n","\t     * ];\n","\t     *\n","\t     * _.find(objects, _.matchesProperty('a', 4));\n","\t     * // => { 'a': 4, 'b': 5, 'c': 6 }\n","\t     */\n","\t    function matchesProperty(path, srcValue) {\n","\t      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the method at `path` of a given object.\n","\t     * Any additional arguments are provided to the invoked method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {Function} Returns the new invoker function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': { 'b': _.constant(2) } },\n","\t     *   { 'a': { 'b': _.constant(1) } }\n","\t     * ];\n","\t     *\n","\t     * _.map(objects, _.method('a.b'));\n","\t     * // => [2, 1]\n","\t     *\n","\t     * _.map(objects, _.method(['a', 'b']));\n","\t     * // => [2, 1]\n","\t     */\n","\t    var method = baseRest(function(path, args) {\n","\t      return function(object) {\n","\t        return baseInvoke(object, path, args);\n","\t      };\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.method`; this method creates a function that invokes\n","\t     * the method at a given path of `object`. Any additional arguments are\n","\t     * provided to the invoked method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Util\n","\t     * @param {Object} object The object to query.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {Function} Returns the new invoker function.\n","\t     * @example\n","\t     *\n","\t     * var array = _.times(3, _.constant),\n","\t     *     object = { 'a': array, 'b': array, 'c': array };\n","\t     *\n","\t     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n","\t     * // => [2, 0]\n","\t     *\n","\t     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n","\t     * // => [2, 0]\n","\t     */\n","\t    var methodOf = baseRest(function(object, args) {\n","\t      return function(path) {\n","\t        return baseInvoke(object, path, args);\n","\t      };\n","\t    });\n","\t\n","\t    /**\n","\t     * Adds all own enumerable string keyed function properties of a source\n","\t     * object to the destination object. If `object` is a function, then methods\n","\t     * are added to its prototype as well.\n","\t     *\n","\t     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n","\t     * avoid conflicts caused by modifying the original.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {Function|Object} [object=lodash] The destination object.\n","\t     * @param {Object} source The object of functions to add.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n","\t     * @returns {Function|Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * function vowels(string) {\n","\t     *   return _.filter(string, function(v) {\n","\t     *     return /[aeiou]/i.test(v);\n","\t     *   });\n","\t     * }\n","\t     *\n","\t     * _.mixin({ 'vowels': vowels });\n","\t     * _.vowels('fred');\n","\t     * // => ['e']\n","\t     *\n","\t     * _('fred').vowels().value();\n","\t     * // => ['e']\n","\t     *\n","\t     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n","\t     * _('fred').vowels();\n","\t     * // => ['e']\n","\t     */\n","\t    function mixin(object, source, options) {\n","\t      var props = keys(source),\n","\t          methodNames = baseFunctions(source, props);\n","\t\n","\t      if (options == null &&\n","\t          !(isObject(source) && (methodNames.length || !props.length))) {\n","\t        options = source;\n","\t        source = object;\n","\t        object = this;\n","\t        methodNames = baseFunctions(source, keys(source));\n","\t      }\n","\t      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n","\t          isFunc = isFunction(object);\n","\t\n","\t      arrayEach(methodNames, function(methodName) {\n","\t        var func = source[methodName];\n","\t        object[methodName] = func;\n","\t        if (isFunc) {\n","\t          object.prototype[methodName] = function() {\n","\t            var chainAll = this.__chain__;\n","\t            if (chain || chainAll) {\n","\t              var result = object(this.__wrapped__),\n","\t                  actions = result.__actions__ = copyArray(this.__actions__);\n","\t\n","\t              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n","\t              result.__chain__ = chainAll;\n","\t              return result;\n","\t            }\n","\t            return func.apply(object, arrayPush([this.value()], arguments));\n","\t          };\n","\t        }\n","\t      });\n","\t\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverts the `_` variable to its previous value and returns a reference to\n","\t     * the `lodash` function.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @returns {Function} Returns the `lodash` function.\n","\t     * @example\n","\t     *\n","\t     * var lodash = _.noConflict();\n","\t     */\n","\t    function noConflict() {\n","\t      if (root._ === this) {\n","\t        root._ = oldDash;\n","\t      }\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.3.0\n","\t     * @category Util\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.noop);\n","\t     * // => [undefined, undefined]\n","\t     */\n","\t    function noop() {\n","\t      // No operation performed.\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that gets the argument at index `n`. If `n` is negative,\n","\t     * the nth argument from the end is returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {number} [n=0] The index of the argument to return.\n","\t     * @returns {Function} Returns the new pass-thru function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.nthArg(1);\n","\t     * func('a', 'b', 'c', 'd');\n","\t     * // => 'b'\n","\t     *\n","\t     * var func = _.nthArg(-2);\n","\t     * func('a', 'b', 'c', 'd');\n","\t     * // => 'c'\n","\t     */\n","\t    function nthArg(n) {\n","\t      n = toInteger(n);\n","\t      return baseRest(function(args) {\n","\t        return baseNth(args, n);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `iteratees` with the arguments it receives\n","\t     * and returns their results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n","\t     *  The iteratees to invoke.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.over([Math.max, Math.min]);\n","\t     *\n","\t     * func(1, 2, 3, 4);\n","\t     * // => [4, 1]\n","\t     */\n","\t    var over = createOver(arrayMap);\n","\t\n","\t    /**\n","\t     * Creates a function that checks if **all** of the `predicates` return\n","\t     * truthy when invoked with the arguments it receives.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [predicates=[_.identity]]\n","\t     *  The predicates to check.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.overEvery([Boolean, isFinite]);\n","\t     *\n","\t     * func('1');\n","\t     * // => true\n","\t     *\n","\t     * func(null);\n","\t     * // => false\n","\t     *\n","\t     * func(NaN);\n","\t     * // => false\n","\t     */\n","\t    var overEvery = createOver(arrayEvery);\n","\t\n","\t    /**\n","\t     * Creates a function that checks if **any** of the `predicates` return\n","\t     * truthy when invoked with the arguments it receives.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [predicates=[_.identity]]\n","\t     *  The predicates to check.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.overSome([Boolean, isFinite]);\n","\t     *\n","\t     * func('1');\n","\t     * // => true\n","\t     *\n","\t     * func(null);\n","\t     * // => true\n","\t     *\n","\t     * func(NaN);\n","\t     * // => false\n","\t     */\n","\t    var overSome = createOver(arraySome);\n","\t\n","\t    /**\n","\t     * Creates a function that returns the value at `path` of a given object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': { 'b': 2 } },\n","\t     *   { 'a': { 'b': 1 } }\n","\t     * ];\n","\t     *\n","\t     * _.map(objects, _.property('a.b'));\n","\t     * // => [2, 1]\n","\t     *\n","\t     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n","\t     * // => [1, 2]\n","\t     */\n","\t    function property(path) {\n","\t      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.property`; this method creates a function that returns\n","\t     * the value at a given path of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     * @example\n","\t     *\n","\t     * var array = [0, 1, 2],\n","\t     *     object = { 'a': array, 'b': array, 'c': array };\n","\t     *\n","\t     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n","\t     * // => [2, 0]\n","\t     *\n","\t     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n","\t     * // => [2, 0]\n","\t     */\n","\t    function propertyOf(object) {\n","\t      return function(path) {\n","\t        return object == null ? undefined : baseGet(object, path);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of numbers (positive and/or negative) progressing from\n","\t     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n","\t     * `start` is specified without an `end` or `step`. If `end` is not specified,\n","\t     * it's set to `start` with `start` then set to `0`.\n","\t     *\n","\t     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n","\t     * floating-point values which can produce unexpected results.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} [step=1] The value to increment or decrement by.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     * @see _.inRange, _.rangeRight\n","\t     * @example\n","\t     *\n","\t     * _.range(4);\n","\t     * // => [0, 1, 2, 3]\n","\t     *\n","\t     * _.range(-4);\n","\t     * // => [0, -1, -2, -3]\n","\t     *\n","\t     * _.range(1, 5);\n","\t     * // => [1, 2, 3, 4]\n","\t     *\n","\t     * _.range(0, 20, 5);\n","\t     * // => [0, 5, 10, 15]\n","\t     *\n","\t     * _.range(0, -4, -1);\n","\t     * // => [0, -1, -2, -3]\n","\t     *\n","\t     * _.range(1, 4, 0);\n","\t     * // => [1, 1, 1]\n","\t     *\n","\t     * _.range(0);\n","\t     * // => []\n","\t     */\n","\t    var range = createRange();\n","\t\n","\t    /**\n","\t     * This method is like `_.range` except that it populates values in\n","\t     * descending order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} [step=1] The value to increment or decrement by.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     * @see _.inRange, _.range\n","\t     * @example\n","\t     *\n","\t     * _.rangeRight(4);\n","\t     * // => [3, 2, 1, 0]\n","\t     *\n","\t     * _.rangeRight(-4);\n","\t     * // => [-3, -2, -1, 0]\n","\t     *\n","\t     * _.rangeRight(1, 5);\n","\t     * // => [4, 3, 2, 1]\n","\t     *\n","\t     * _.rangeRight(0, 20, 5);\n","\t     * // => [15, 10, 5, 0]\n","\t     *\n","\t     * _.rangeRight(0, -4, -1);\n","\t     * // => [-3, -2, -1, 0]\n","\t     *\n","\t     * _.rangeRight(1, 4, 0);\n","\t     * // => [1, 1, 1]\n","\t     *\n","\t     * _.rangeRight(0);\n","\t     * // => []\n","\t     */\n","\t    var rangeRight = createRange(true);\n","\t\n","\t    /**\n","\t     * This method returns a new empty array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {Array} Returns the new empty array.\n","\t     * @example\n","\t     *\n","\t     * var arrays = _.times(2, _.stubArray);\n","\t     *\n","\t     * console.log(arrays);\n","\t     * // => [[], []]\n","\t     *\n","\t     * console.log(arrays[0] === arrays[1]);\n","\t     * // => false\n","\t     */\n","\t    function stubArray() {\n","\t      return [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {boolean} Returns `false`.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubFalse);\n","\t     * // => [false, false]\n","\t     */\n","\t    function stubFalse() {\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns a new empty object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {Object} Returns the new empty object.\n","\t     * @example\n","\t     *\n","\t     * var objects = _.times(2, _.stubObject);\n","\t     *\n","\t     * console.log(objects);\n","\t     * // => [{}, {}]\n","\t     *\n","\t     * console.log(objects[0] === objects[1]);\n","\t     * // => false\n","\t     */\n","\t    function stubObject() {\n","\t      return {};\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns an empty string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {string} Returns the empty string.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubString);\n","\t     * // => ['', '']\n","\t     */\n","\t    function stubString() {\n","\t      return '';\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `true`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {boolean} Returns `true`.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubTrue);\n","\t     * // => [true, true]\n","\t     */\n","\t    function stubTrue() {\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Invokes the iteratee `n` times, returning an array of the results of\n","\t     * each invocation. The iteratee is invoked with one argument; (index).\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {number} n The number of times to invoke `iteratee`.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the array of results.\n","\t     * @example\n","\t     *\n","\t     * _.times(3, String);\n","\t     * // => ['0', '1', '2']\n","\t     *\n","\t     *  _.times(4, _.constant(0));\n","\t     * // => [0, 0, 0, 0]\n","\t     */\n","\t    function times(n, iteratee) {\n","\t      n = toInteger(n);\n","\t      if (n < 1 || n > MAX_SAFE_INTEGER) {\n","\t        return [];\n","\t      }\n","\t      var index = MAX_ARRAY_LENGTH,\n","\t          length = nativeMin(n, MAX_ARRAY_LENGTH);\n","\t\n","\t      iteratee = getIteratee(iteratee);\n","\t      n -= MAX_ARRAY_LENGTH;\n","\t\n","\t      var result = baseTimes(length, iteratee);\n","\t      while (++index < n) {\n","\t        iteratee(index);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a property path array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Array} Returns the new property path array.\n","\t     * @example\n","\t     *\n","\t     * _.toPath('a.b.c');\n","\t     * // => ['a', 'b', 'c']\n","\t     *\n","\t     * _.toPath('a[0].b.c');\n","\t     * // => ['a', '0', 'b', 'c']\n","\t     */\n","\t    function toPath(value) {\n","\t      if (isArray(value)) {\n","\t        return arrayMap(value, toKey);\n","\t      }\n","\t      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {string} [prefix=''] The value to prefix the ID with.\n","\t     * @returns {string} Returns the unique ID.\n","\t     * @example\n","\t     *\n","\t     * _.uniqueId('contact_');\n","\t     * // => 'contact_104'\n","\t     *\n","\t     * _.uniqueId();\n","\t     * // => '105'\n","\t     */\n","\t    function uniqueId(prefix) {\n","\t      var id = ++idCounter;\n","\t      return toString(prefix) + id;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Adds two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.4.0\n","\t     * @category Math\n","\t     * @param {number} augend The first number in an addition.\n","\t     * @param {number} addend The second number in an addition.\n","\t     * @returns {number} Returns the total.\n","\t     * @example\n","\t     *\n","\t     * _.add(6, 4);\n","\t     * // => 10\n","\t     */\n","\t    var add = createMathOperation(function(augend, addend) {\n","\t      return augend + addend;\n","\t    }, 0);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded up to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round up.\n","\t     * @param {number} [precision=0] The precision to round up to.\n","\t     * @returns {number} Returns the rounded up number.\n","\t     * @example\n","\t     *\n","\t     * _.ceil(4.006);\n","\t     * // => 5\n","\t     *\n","\t     * _.ceil(6.004, 2);\n","\t     * // => 6.01\n","\t     *\n","\t     * _.ceil(6040, -2);\n","\t     * // => 6100\n","\t     */\n","\t    var ceil = createRound('ceil');\n","\t\n","\t    /**\n","\t     * Divide two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {number} dividend The first number in a division.\n","\t     * @param {number} divisor The second number in a division.\n","\t     * @returns {number} Returns the quotient.\n","\t     * @example\n","\t     *\n","\t     * _.divide(6, 4);\n","\t     * // => 1.5\n","\t     */\n","\t    var divide = createMathOperation(function(dividend, divisor) {\n","\t      return dividend / divisor;\n","\t    }, 1);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded down to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round down.\n","\t     * @param {number} [precision=0] The precision to round down to.\n","\t     * @returns {number} Returns the rounded down number.\n","\t     * @example\n","\t     *\n","\t     * _.floor(4.006);\n","\t     * // => 4\n","\t     *\n","\t     * _.floor(0.046, 2);\n","\t     * // => 0.04\n","\t     *\n","\t     * _.floor(4060, -2);\n","\t     * // => 4000\n","\t     */\n","\t    var floor = createRound('floor');\n","\t\n","\t    /**\n","\t     * Computes the maximum value of `array`. If `array` is empty or falsey,\n","\t     * `undefined` is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {*} Returns the maximum value.\n","\t     * @example\n","\t     *\n","\t     * _.max([4, 2, 8, 6]);\n","\t     * // => 8\n","\t     *\n","\t     * _.max([]);\n","\t     * // => undefined\n","\t     */\n","\t    function max(array) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, identity, baseGt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.max` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * the value is ranked. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {*} Returns the maximum value.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n","\t     *\n","\t     * _.maxBy(objects, function(o) { return o.n; });\n","\t     * // => { 'n': 2 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.maxBy(objects, 'n');\n","\t     * // => { 'n': 2 }\n","\t     */\n","\t    function maxBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Computes the mean of the values in `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {number} Returns the mean.\n","\t     * @example\n","\t     *\n","\t     * _.mean([4, 2, 8, 6]);\n","\t     * // => 5\n","\t     */\n","\t    function mean(array) {\n","\t      return baseMean(array, identity);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.mean` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the value to be averaged.\n","\t     * The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the mean.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n","\t     *\n","\t     * _.meanBy(objects, function(o) { return o.n; });\n","\t     * // => 5\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.meanBy(objects, 'n');\n","\t     * // => 5\n","\t     */\n","\t    function meanBy(array, iteratee) {\n","\t      return baseMean(array, getIteratee(iteratee, 2));\n","\t    }\n","\t\n","\t    /**\n","\t     * Computes the minimum value of `array`. If `array` is empty or falsey,\n","\t     * `undefined` is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {*} Returns the minimum value.\n","\t     * @example\n","\t     *\n","\t     * _.min([4, 2, 8, 6]);\n","\t     * // => 2\n","\t     *\n","\t     * _.min([]);\n","\t     * // => undefined\n","\t     */\n","\t    function min(array) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, identity, baseLt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.min` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * the value is ranked. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {*} Returns the minimum value.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n","\t     *\n","\t     * _.minBy(objects, function(o) { return o.n; });\n","\t     * // => { 'n': 1 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.minBy(objects, 'n');\n","\t     * // => { 'n': 1 }\n","\t     */\n","\t    function minBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Multiply two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {number} multiplier The first number in a multiplication.\n","\t     * @param {number} multiplicand The second number in a multiplication.\n","\t     * @returns {number} Returns the product.\n","\t     * @example\n","\t     *\n","\t     * _.multiply(6, 4);\n","\t     * // => 24\n","\t     */\n","\t    var multiply = createMathOperation(function(multiplier, multiplicand) {\n","\t      return multiplier * multiplicand;\n","\t    }, 1);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round.\n","\t     * @param {number} [precision=0] The precision to round to.\n","\t     * @returns {number} Returns the rounded number.\n","\t     * @example\n","\t     *\n","\t     * _.round(4.006);\n","\t     * // => 4\n","\t     *\n","\t     * _.round(4.006, 2);\n","\t     * // => 4.01\n","\t     *\n","\t     * _.round(4060, -2);\n","\t     * // => 4100\n","\t     */\n","\t    var round = createRound('round');\n","\t\n","\t    /**\n","\t     * Subtract two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {number} minuend The first number in a subtraction.\n","\t     * @param {number} subtrahend The second number in a subtraction.\n","\t     * @returns {number} Returns the difference.\n","\t     * @example\n","\t     *\n","\t     * _.subtract(6, 4);\n","\t     * // => 2\n","\t     */\n","\t    var subtract = createMathOperation(function(minuend, subtrahend) {\n","\t      return minuend - subtrahend;\n","\t    }, 0);\n","\t\n","\t    /**\n","\t     * Computes the sum of the values in `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.4.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {number} Returns the sum.\n","\t     * @example\n","\t     *\n","\t     * _.sum([4, 2, 8, 6]);\n","\t     * // => 20\n","\t     */\n","\t    function sum(array) {\n","\t      return (array && array.length)\n","\t        ? baseSum(array, identity)\n","\t        : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sum` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the value to be summed.\n","\t     * The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the sum.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n","\t     *\n","\t     * _.sumBy(objects, function(o) { return o.n; });\n","\t     * // => 20\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sumBy(objects, 'n');\n","\t     * // => 20\n","\t     */\n","\t    function sumBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseSum(array, getIteratee(iteratee, 2))\n","\t        : 0;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    // Add methods that return wrapped values in chain sequences.\n","\t    lodash.after = after;\n","\t    lodash.ary = ary;\n","\t    lodash.assign = assign;\n","\t    lodash.assignIn = assignIn;\n","\t    lodash.assignInWith = assignInWith;\n","\t    lodash.assignWith = assignWith;\n","\t    lodash.at = at;\n","\t    lodash.before = before;\n","\t    lodash.bind = bind;\n","\t    lodash.bindAll = bindAll;\n","\t    lodash.bindKey = bindKey;\n","\t    lodash.castArray = castArray;\n","\t    lodash.chain = chain;\n","\t    lodash.chunk = chunk;\n","\t    lodash.compact = compact;\n","\t    lodash.concat = concat;\n","\t    lodash.cond = cond;\n","\t    lodash.conforms = conforms;\n","\t    lodash.constant = constant;\n","\t    lodash.countBy = countBy;\n","\t    lodash.create = create;\n","\t    lodash.curry = curry;\n","\t    lodash.curryRight = curryRight;\n","\t    lodash.debounce = debounce;\n","\t    lodash.defaults = defaults;\n","\t    lodash.defaultsDeep = defaultsDeep;\n","\t    lodash.defer = defer;\n","\t    lodash.delay = delay;\n","\t    lodash.difference = difference;\n","\t    lodash.differenceBy = differenceBy;\n","\t    lodash.differenceWith = differenceWith;\n","\t    lodash.drop = drop;\n","\t    lodash.dropRight = dropRight;\n","\t    lodash.dropRightWhile = dropRightWhile;\n","\t    lodash.dropWhile = dropWhile;\n","\t    lodash.fill = fill;\n","\t    lodash.filter = filter;\n","\t    lodash.flatMap = flatMap;\n","\t    lodash.flatMapDeep = flatMapDeep;\n","\t    lodash.flatMapDepth = flatMapDepth;\n","\t    lodash.flatten = flatten;\n","\t    lodash.flattenDeep = flattenDeep;\n","\t    lodash.flattenDepth = flattenDepth;\n","\t    lodash.flip = flip;\n","\t    lodash.flow = flow;\n","\t    lodash.flowRight = flowRight;\n","\t    lodash.fromPairs = fromPairs;\n","\t    lodash.functions = functions;\n","\t    lodash.functionsIn = functionsIn;\n","\t    lodash.groupBy = groupBy;\n","\t    lodash.initial = initial;\n","\t    lodash.intersection = intersection;\n","\t    lodash.intersectionBy = intersectionBy;\n","\t    lodash.intersectionWith = intersectionWith;\n","\t    lodash.invert = invert;\n","\t    lodash.invertBy = invertBy;\n","\t    lodash.invokeMap = invokeMap;\n","\t    lodash.iteratee = iteratee;\n","\t    lodash.keyBy = keyBy;\n","\t    lodash.keys = keys;\n","\t    lodash.keysIn = keysIn;\n","\t    lodash.map = map;\n","\t    lodash.mapKeys = mapKeys;\n","\t    lodash.mapValues = mapValues;\n","\t    lodash.matches = matches;\n","\t    lodash.matchesProperty = matchesProperty;\n","\t    lodash.memoize = memoize;\n","\t    lodash.merge = merge;\n","\t    lodash.mergeWith = mergeWith;\n","\t    lodash.method = method;\n","\t    lodash.methodOf = methodOf;\n","\t    lodash.mixin = mixin;\n","\t    lodash.negate = negate;\n","\t    lodash.nthArg = nthArg;\n","\t    lodash.omit = omit;\n","\t    lodash.omitBy = omitBy;\n","\t    lodash.once = once;\n","\t    lodash.orderBy = orderBy;\n","\t    lodash.over = over;\n","\t    lodash.overArgs = overArgs;\n","\t    lodash.overEvery = overEvery;\n","\t    lodash.overSome = overSome;\n","\t    lodash.partial = partial;\n","\t    lodash.partialRight = partialRight;\n","\t    lodash.partition = partition;\n","\t    lodash.pick = pick;\n","\t    lodash.pickBy = pickBy;\n","\t    lodash.property = property;\n","\t    lodash.propertyOf = propertyOf;\n","\t    lodash.pull = pull;\n","\t    lodash.pullAll = pullAll;\n","\t    lodash.pullAllBy = pullAllBy;\n","\t    lodash.pullAllWith = pullAllWith;\n","\t    lodash.pullAt = pullAt;\n","\t    lodash.range = range;\n","\t    lodash.rangeRight = rangeRight;\n","\t    lodash.rearg = rearg;\n","\t    lodash.reject = reject;\n","\t    lodash.remove = remove;\n","\t    lodash.rest = rest;\n","\t    lodash.reverse = reverse;\n","\t    lodash.sampleSize = sampleSize;\n","\t    lodash.set = set;\n","\t    lodash.setWith = setWith;\n","\t    lodash.shuffle = shuffle;\n","\t    lodash.slice = slice;\n","\t    lodash.sortBy = sortBy;\n","\t    lodash.sortedUniq = sortedUniq;\n","\t    lodash.sortedUniqBy = sortedUniqBy;\n","\t    lodash.split = split;\n","\t    lodash.spread = spread;\n","\t    lodash.tail = tail;\n","\t    lodash.take = take;\n","\t    lodash.takeRight = takeRight;\n","\t    lodash.takeRightWhile = takeRightWhile;\n","\t    lodash.takeWhile = takeWhile;\n","\t    lodash.tap = tap;\n","\t    lodash.throttle = throttle;\n","\t    lodash.thru = thru;\n","\t    lodash.toArray = toArray;\n","\t    lodash.toPairs = toPairs;\n","\t    lodash.toPairsIn = toPairsIn;\n","\t    lodash.toPath = toPath;\n","\t    lodash.toPlainObject = toPlainObject;\n","\t    lodash.transform = transform;\n","\t    lodash.unary = unary;\n","\t    lodash.union = union;\n","\t    lodash.unionBy = unionBy;\n","\t    lodash.unionWith = unionWith;\n","\t    lodash.uniq = uniq;\n","\t    lodash.uniqBy = uniqBy;\n","\t    lodash.uniqWith = uniqWith;\n","\t    lodash.unset = unset;\n","\t    lodash.unzip = unzip;\n","\t    lodash.unzipWith = unzipWith;\n","\t    lodash.update = update;\n","\t    lodash.updateWith = updateWith;\n","\t    lodash.values = values;\n","\t    lodash.valuesIn = valuesIn;\n","\t    lodash.without = without;\n","\t    lodash.words = words;\n","\t    lodash.wrap = wrap;\n","\t    lodash.xor = xor;\n","\t    lodash.xorBy = xorBy;\n","\t    lodash.xorWith = xorWith;\n","\t    lodash.zip = zip;\n","\t    lodash.zipObject = zipObject;\n","\t    lodash.zipObjectDeep = zipObjectDeep;\n","\t    lodash.zipWith = zipWith;\n","\t\n","\t    // Add aliases.\n","\t    lodash.entries = toPairs;\n","\t    lodash.entriesIn = toPairsIn;\n","\t    lodash.extend = assignIn;\n","\t    lodash.extendWith = assignInWith;\n","\t\n","\t    // Add methods to `lodash.prototype`.\n","\t    mixin(lodash, lodash);\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    // Add methods that return unwrapped values in chain sequences.\n","\t    lodash.add = add;\n","\t    lodash.attempt = attempt;\n","\t    lodash.camelCase = camelCase;\n","\t    lodash.capitalize = capitalize;\n","\t    lodash.ceil = ceil;\n","\t    lodash.clamp = clamp;\n","\t    lodash.clone = clone;\n","\t    lodash.cloneDeep = cloneDeep;\n","\t    lodash.cloneDeepWith = cloneDeepWith;\n","\t    lodash.cloneWith = cloneWith;\n","\t    lodash.conformsTo = conformsTo;\n","\t    lodash.deburr = deburr;\n","\t    lodash.defaultTo = defaultTo;\n","\t    lodash.divide = divide;\n","\t    lodash.endsWith = endsWith;\n","\t    lodash.eq = eq;\n","\t    lodash.escape = escape;\n","\t    lodash.escapeRegExp = escapeRegExp;\n","\t    lodash.every = every;\n","\t    lodash.find = find;\n","\t    lodash.findIndex = findIndex;\n","\t    lodash.findKey = findKey;\n","\t    lodash.findLast = findLast;\n","\t    lodash.findLastIndex = findLastIndex;\n","\t    lodash.findLastKey = findLastKey;\n","\t    lodash.floor = floor;\n","\t    lodash.forEach = forEach;\n","\t    lodash.forEachRight = forEachRight;\n","\t    lodash.forIn = forIn;\n","\t    lodash.forInRight = forInRight;\n","\t    lodash.forOwn = forOwn;\n","\t    lodash.forOwnRight = forOwnRight;\n","\t    lodash.get = get;\n","\t    lodash.gt = gt;\n","\t    lodash.gte = gte;\n","\t    lodash.has = has;\n","\t    lodash.hasIn = hasIn;\n","\t    lodash.head = head;\n","\t    lodash.identity = identity;\n","\t    lodash.includes = includes;\n","\t    lodash.indexOf = indexOf;\n","\t    lodash.inRange = inRange;\n","\t    lodash.invoke = invoke;\n","\t    lodash.isArguments = isArguments;\n","\t    lodash.isArray = isArray;\n","\t    lodash.isArrayBuffer = isArrayBuffer;\n","\t    lodash.isArrayLike = isArrayLike;\n","\t    lodash.isArrayLikeObject = isArrayLikeObject;\n","\t    lodash.isBoolean = isBoolean;\n","\t    lodash.isBuffer = isBuffer;\n","\t    lodash.isDate = isDate;\n","\t    lodash.isElement = isElement;\n","\t    lodash.isEmpty = isEmpty;\n","\t    lodash.isEqual = isEqual;\n","\t    lodash.isEqualWith = isEqualWith;\n","\t    lodash.isError = isError;\n","\t    lodash.isFinite = isFinite;\n","\t    lodash.isFunction = isFunction;\n","\t    lodash.isInteger = isInteger;\n","\t    lodash.isLength = isLength;\n","\t    lodash.isMap = isMap;\n","\t    lodash.isMatch = isMatch;\n","\t    lodash.isMatchWith = isMatchWith;\n","\t    lodash.isNaN = isNaN;\n","\t    lodash.isNative = isNative;\n","\t    lodash.isNil = isNil;\n","\t    lodash.isNull = isNull;\n","\t    lodash.isNumber = isNumber;\n","\t    lodash.isObject = isObject;\n","\t    lodash.isObjectLike = isObjectLike;\n","\t    lodash.isPlainObject = isPlainObject;\n","\t    lodash.isRegExp = isRegExp;\n","\t    lodash.isSafeInteger = isSafeInteger;\n","\t    lodash.isSet = isSet;\n","\t    lodash.isString = isString;\n","\t    lodash.isSymbol = isSymbol;\n","\t    lodash.isTypedArray = isTypedArray;\n","\t    lodash.isUndefined = isUndefined;\n","\t    lodash.isWeakMap = isWeakMap;\n","\t    lodash.isWeakSet = isWeakSet;\n","\t    lodash.join = join;\n","\t    lodash.kebabCase = kebabCase;\n","\t    lodash.last = last;\n","\t    lodash.lastIndexOf = lastIndexOf;\n","\t    lodash.lowerCase = lowerCase;\n","\t    lodash.lowerFirst = lowerFirst;\n","\t    lodash.lt = lt;\n","\t    lodash.lte = lte;\n","\t    lodash.max = max;\n","\t    lodash.maxBy = maxBy;\n","\t    lodash.mean = mean;\n","\t    lodash.meanBy = meanBy;\n","\t    lodash.min = min;\n","\t    lodash.minBy = minBy;\n","\t    lodash.stubArray = stubArray;\n","\t    lodash.stubFalse = stubFalse;\n","\t    lodash.stubObject = stubObject;\n","\t    lodash.stubString = stubString;\n","\t    lodash.stubTrue = stubTrue;\n","\t    lodash.multiply = multiply;\n","\t    lodash.nth = nth;\n","\t    lodash.noConflict = noConflict;\n","\t    lodash.noop = noop;\n","\t    lodash.now = now;\n","\t    lodash.pad = pad;\n","\t    lodash.padEnd = padEnd;\n","\t    lodash.padStart = padStart;\n","\t    lodash.parseInt = parseInt;\n","\t    lodash.random = random;\n","\t    lodash.reduce = reduce;\n","\t    lodash.reduceRight = reduceRight;\n","\t    lodash.repeat = repeat;\n","\t    lodash.replace = replace;\n","\t    lodash.result = result;\n","\t    lodash.round = round;\n","\t    lodash.runInContext = runInContext;\n","\t    lodash.sample = sample;\n","\t    lodash.size = size;\n","\t    lodash.snakeCase = snakeCase;\n","\t    lodash.some = some;\n","\t    lodash.sortedIndex = sortedIndex;\n","\t    lodash.sortedIndexBy = sortedIndexBy;\n","\t    lodash.sortedIndexOf = sortedIndexOf;\n","\t    lodash.sortedLastIndex = sortedLastIndex;\n","\t    lodash.sortedLastIndexBy = sortedLastIndexBy;\n","\t    lodash.sortedLastIndexOf = sortedLastIndexOf;\n","\t    lodash.startCase = startCase;\n","\t    lodash.startsWith = startsWith;\n","\t    lodash.subtract = subtract;\n","\t    lodash.sum = sum;\n","\t    lodash.sumBy = sumBy;\n","\t    lodash.template = template;\n","\t    lodash.times = times;\n","\t    lodash.toFinite = toFinite;\n","\t    lodash.toInteger = toInteger;\n","\t    lodash.toLength = toLength;\n","\t    lodash.toLower = toLower;\n","\t    lodash.toNumber = toNumber;\n","\t    lodash.toSafeInteger = toSafeInteger;\n","\t    lodash.toString = toString;\n","\t    lodash.toUpper = toUpper;\n","\t    lodash.trim = trim;\n","\t    lodash.trimEnd = trimEnd;\n","\t    lodash.trimStart = trimStart;\n","\t    lodash.truncate = truncate;\n","\t    lodash.unescape = unescape;\n","\t    lodash.uniqueId = uniqueId;\n","\t    lodash.upperCase = upperCase;\n","\t    lodash.upperFirst = upperFirst;\n","\t\n","\t    // Add aliases.\n","\t    lodash.each = forEach;\n","\t    lodash.eachRight = forEachRight;\n","\t    lodash.first = head;\n","\t\n","\t    mixin(lodash, (function() {\n","\t      var source = {};\n","\t      baseForOwn(lodash, function(func, methodName) {\n","\t        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n","\t          source[methodName] = func;\n","\t        }\n","\t      });\n","\t      return source;\n","\t    }()), { 'chain': false });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * The semantic version number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @type {string}\n","\t     */\n","\t    lodash.VERSION = VERSION;\n","\t\n","\t    // Assign default placeholders.\n","\t    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n","\t      lodash[methodName].placeholder = lodash;\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n","\t    arrayEach(['drop', 'take'], function(methodName, index) {\n","\t      LazyWrapper.prototype[methodName] = function(n) {\n","\t        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n","\t\n","\t        var result = (this.__filtered__ && !index)\n","\t          ? new LazyWrapper(this)\n","\t          : this.clone();\n","\t\n","\t        if (result.__filtered__) {\n","\t          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n","\t        } else {\n","\t          result.__views__.push({\n","\t            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n","\t            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n","\t          });\n","\t        }\n","\t        return result;\n","\t      };\n","\t\n","\t      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n","\t        return this.reverse()[methodName](n).reverse();\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods that accept an `iteratee` value.\n","\t    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n","\t      var type = index + 1,\n","\t          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n","\t\n","\t      LazyWrapper.prototype[methodName] = function(iteratee) {\n","\t        var result = this.clone();\n","\t        result.__iteratees__.push({\n","\t          'iteratee': getIteratee(iteratee, 3),\n","\t          'type': type\n","\t        });\n","\t        result.__filtered__ = result.__filtered__ || isFilter;\n","\t        return result;\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n","\t    arrayEach(['head', 'last'], function(methodName, index) {\n","\t      var takeName = 'take' + (index ? 'Right' : '');\n","\t\n","\t      LazyWrapper.prototype[methodName] = function() {\n","\t        return this[takeName](1).value()[0];\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n","\t    arrayEach(['initial', 'tail'], function(methodName, index) {\n","\t      var dropName = 'drop' + (index ? '' : 'Right');\n","\t\n","\t      LazyWrapper.prototype[methodName] = function() {\n","\t        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n","\t      };\n","\t    });\n","\t\n","\t    LazyWrapper.prototype.compact = function() {\n","\t      return this.filter(identity);\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.find = function(predicate) {\n","\t      return this.filter(predicate).head();\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.findLast = function(predicate) {\n","\t      return this.reverse().find(predicate);\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n","\t      if (typeof path == 'function') {\n","\t        return new LazyWrapper(this);\n","\t      }\n","\t      return this.map(function(value) {\n","\t        return baseInvoke(value, path, args);\n","\t      });\n","\t    });\n","\t\n","\t    LazyWrapper.prototype.reject = function(predicate) {\n","\t      return this.filter(negate(getIteratee(predicate)));\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.slice = function(start, end) {\n","\t      start = toInteger(start);\n","\t\n","\t      var result = this;\n","\t      if (result.__filtered__ && (start > 0 || end < 0)) {\n","\t        return new LazyWrapper(result);\n","\t      }\n","\t      if (start < 0) {\n","\t        result = result.takeRight(-start);\n","\t      } else if (start) {\n","\t        result = result.drop(start);\n","\t      }\n","\t      if (end !== undefined) {\n","\t        end = toInteger(end);\n","\t        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n","\t      }\n","\t      return result;\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n","\t      return this.reverse().takeWhile(predicate).reverse();\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.toArray = function() {\n","\t      return this.take(MAX_ARRAY_LENGTH);\n","\t    };\n","\t\n","\t    // Add `LazyWrapper` methods to `lodash.prototype`.\n","\t    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n","\t      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n","\t          isTaker = /^(?:head|last)$/.test(methodName),\n","\t          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n","\t          retUnwrapped = isTaker || /^find/.test(methodName);\n","\t\n","\t      if (!lodashFunc) {\n","\t        return;\n","\t      }\n","\t      lodash.prototype[methodName] = function() {\n","\t        var value = this.__wrapped__,\n","\t            args = isTaker ? [1] : arguments,\n","\t            isLazy = value instanceof LazyWrapper,\n","\t            iteratee = args[0],\n","\t            useLazy = isLazy || isArray(value);\n","\t\n","\t        var interceptor = function(value) {\n","\t          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n","\t          return (isTaker && chainAll) ? result[0] : result;\n","\t        };\n","\t\n","\t        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n","\t          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n","\t          isLazy = useLazy = false;\n","\t        }\n","\t        var chainAll = this.__chain__,\n","\t            isHybrid = !!this.__actions__.length,\n","\t            isUnwrapped = retUnwrapped && !chainAll,\n","\t            onlyLazy = isLazy && !isHybrid;\n","\t\n","\t        if (!retUnwrapped && useLazy) {\n","\t          value = onlyLazy ? value : new LazyWrapper(this);\n","\t          var result = func.apply(value, args);\n","\t          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n","\t          return new LodashWrapper(result, chainAll);\n","\t        }\n","\t        if (isUnwrapped && onlyLazy) {\n","\t          return func.apply(this, args);\n","\t        }\n","\t        result = this.thru(interceptor);\n","\t        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n","\t      };\n","\t    });\n","\t\n","\t    // Add `Array` methods to `lodash.prototype`.\n","\t    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n","\t      var func = arrayProto[methodName],\n","\t          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n","\t          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n","\t\n","\t      lodash.prototype[methodName] = function() {\n","\t        var args = arguments;\n","\t        if (retUnwrapped && !this.__chain__) {\n","\t          var value = this.value();\n","\t          return func.apply(isArray(value) ? value : [], args);\n","\t        }\n","\t        return this[chainName](function(value) {\n","\t          return func.apply(isArray(value) ? value : [], args);\n","\t        });\n","\t      };\n","\t    });\n","\t\n","\t    // Map minified method names to their real names.\n","\t    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n","\t      var lodashFunc = lodash[methodName];\n","\t      if (lodashFunc) {\n","\t        var key = (lodashFunc.name + ''),\n","\t            names = realNames[key] || (realNames[key] = []);\n","\t\n","\t        names.push({ 'name': methodName, 'func': lodashFunc });\n","\t      }\n","\t    });\n","\t\n","\t    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n","\t      'name': 'wrapper',\n","\t      'func': undefined\n","\t    }];\n","\t\n","\t    // Add methods to `LazyWrapper`.\n","\t    LazyWrapper.prototype.clone = lazyClone;\n","\t    LazyWrapper.prototype.reverse = lazyReverse;\n","\t    LazyWrapper.prototype.value = lazyValue;\n","\t\n","\t    // Add chain sequence methods to the `lodash` wrapper.\n","\t    lodash.prototype.at = wrapperAt;\n","\t    lodash.prototype.chain = wrapperChain;\n","\t    lodash.prototype.commit = wrapperCommit;\n","\t    lodash.prototype.next = wrapperNext;\n","\t    lodash.prototype.plant = wrapperPlant;\n","\t    lodash.prototype.reverse = wrapperReverse;\n","\t    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n","\t\n","\t    // Add lazy aliases.\n","\t    lodash.prototype.first = lodash.prototype.head;\n","\t\n","\t    if (symIterator) {\n","\t      lodash.prototype[symIterator] = wrapperToIterator;\n","\t    }\n","\t    return lodash;\n","\t  });\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  // Export lodash.\n","\t  var _ = runInContext();\n","\t\n","\t  // Some AMD build optimizers, like r.js, check for condition patterns like:\n","\t  if (true) {\n","\t    // Expose Lodash on the global object to prevent errors when Lodash is\n","\t    // loaded by a script tag in the presence of an AMD loader.\n","\t    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n","\t    // Use `_.noConflict` to remove Lodash from the global object.\n","\t    root._ = _;\n","\t\n","\t    // Define as an anonymous module so, through path mapping, it can be\n","\t    // referenced as the \"underscore\" module.\n","\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n","\t      return _;\n","\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n","\t  }\n","\t  // Check for `exports` after `define` in case a build optimizer adds it.\n","\t  else if (freeModule) {\n","\t    // Export for Node.js.\n","\t    (freeModule.exports = _)._ = _;\n","\t    // Export for CommonJS support.\n","\t    freeExports._ = _;\n","\t  }\n","\t  else {\n","\t    // Export to the global object.\n","\t    root._ = _;\n","\t  }\n","\t}.call(this));\n","\t\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)(module)))\n","\n","/***/ }),\n","/* 5 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function(module) {\n","\t\tif(!module.webpackPolyfill) {\n","\t\t\tmodule.deprecate = function() {};\n","\t\t\tmodule.paths = [];\n","\t\t\t// module.parent = undefined by default\n","\t\t\tmodule.children = [];\n","\t\t\tmodule.webpackPolyfill = 1;\n","\t\t}\n","\t\treturn module;\n","\t}\n","\n","\n","/***/ }),\n","/* 6 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n","\t\n","\tvar _d2 = __webpack_require__(2);\n","\t\n","\tvar _d3 = _interopRequireDefault(_d2);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar PredictProba = function () {\n","\t  // svg: d3 object with the svg in question\n","\t  // class_names: array of class names\n","\t  // predict_probas: array of prediction probabilities\n","\t  function PredictProba(svg, class_names, predict_probas) {\n","\t    var title = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Prediction probabilities';\n","\t\n","\t    _classCallCheck(this, PredictProba);\n","\t\n","\t    var width = parseInt(svg.style('width'));\n","\t    this.names = class_names;\n","\t    this.names.push('Other');\n","\t    if (class_names.length < 10) {\n","\t      this.colors = _d3.default.scale.category10().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category10().domain((0, _lodash.range)(this.names.length));\n","\t    } else {\n","\t      this.colors = _d3.default.scale.category20().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category20().domain((0, _lodash.range)(this.names.length));\n","\t    }\n","\t\n","\t    var _map_classes = this.map_classes(this.names, predict_probas),\n","\t        _map_classes2 = _slicedToArray(_map_classes, 2),\n","\t        names = _map_classes2[0],\n","\t        data = _map_classes2[1];\n","\t\n","\t    var bar_x = width - 125;\n","\t    var class_names_width = bar_x;\n","\t    var bar_width = width - bar_x - 32;\n","\t    var x_scale = _d3.default.scale.linear().range([0, bar_width]);\n","\t    var bar_height = 17;\n","\t    var space_between_bars = 5;\n","\t    var bar_yshift = title === '' ? 0 : 35;\n","\t    var n_bars = Math.min(5, data.length);\n","\t    this.svg_height = n_bars * (bar_height + space_between_bars) + bar_yshift;\n","\t    svg.style('height', this.svg_height + 'px');\n","\t    var this_object = this;\n","\t    if (title !== '') {\n","\t      svg.append('text').text(title).attr('x', 20).attr('y', 20);\n","\t    }\n","\t    var bar_y = function bar_y(i) {\n","\t      return (bar_height + space_between_bars) * i + bar_yshift;\n","\t    };\n","\t    var bar = svg.append(\"g\");\n","\t\n","\t    var _iteratorNormalCompletion = true;\n","\t    var _didIteratorError = false;\n","\t    var _iteratorError = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator = (0, _lodash.range)(data.length)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n","\t        var i = _step.value;\n","\t\n","\t        var color = this.colors(names[i]);\n","\t        if (names[i] == 'Other' && this.names.length > 20) {\n","\t          color = '#5F9EA0';\n","\t        }\n","\t        var rect = bar.append(\"rect\");\n","\t        rect.attr(\"x\", bar_x).attr(\"y\", bar_y(i)).attr(\"height\", bar_height).attr(\"width\", x_scale(data[i])).style(\"fill\", color);\n","\t        bar.append(\"rect\").attr(\"x\", bar_x).attr(\"y\", bar_y(i)).attr(\"height\", bar_height).attr(\"width\", bar_width - 1).attr(\"fill-opacity\", 0).attr(\"stroke\", \"black\");\n","\t        var text = bar.append(\"text\");\n","\t        text.classed(\"prob_text\", true);\n","\t        text.attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t        text = bar.append(\"text\");\n","\t        text.attr(\"x\", bar_x + x_scale(data[i]) + 5).attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\").text(data[i].toFixed(2));\n","\t        text = bar.append(\"text\");\n","\t        text.attr(\"x\", bar_x - 10).attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(names[i]);\n","\t        while (text.node().getBBox()['width'] + 1 > class_names_width - 10) {\n","\t          // TODO: ta mostrando só dois, e talvez quando hover mostrar o texto\n","\t          // todo\n","\t          var cur_text = text.text().slice(0, text.text().length - 5);\n","\t          text.text(cur_text + '...');\n","\t          if (cur_text === '') {\n","\t            break;\n","\t          }\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError = true;\n","\t      _iteratorError = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion && _iterator.return) {\n","\t          _iterator.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError) {\n","\t          throw _iteratorError;\n","\t        }\n","\t      }\n","\t    }\n","\t  }\n","\t\n","\t  PredictProba.prototype.map_classes = function map_classes(class_names, predict_proba) {\n","\t    if (class_names.length <= 6) {\n","\t      return [class_names, predict_proba];\n","\t    }\n","\t    var class_dict = (0, _lodash.range)(predict_proba.length).map(function (i) {\n","\t      return { 'name': class_names[i], 'prob': predict_proba[i], 'i': i };\n","\t    });\n","\t    var sorted = (0, _lodash.sortBy)(class_dict, function (d) {\n","\t      return -d.prob;\n","\t    });\n","\t    var other = new Set();\n","\t    (0, _lodash.range)(4, sorted.length).map(function (d) {\n","\t      return other.add(sorted[d].name);\n","\t    });\n","\t    var other_prob = 0;\n","\t    var ret_probs = [];\n","\t    var ret_names = [];\n","\t    var _iteratorNormalCompletion2 = true;\n","\t    var _didIteratorError2 = false;\n","\t    var _iteratorError2 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator2 = (0, _lodash.range)(sorted.length)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n","\t        var d = _step2.value;\n","\t\n","\t        if (other.has(sorted[d].name)) {\n","\t          other_prob += sorted[d].prob;\n","\t        } else {\n","\t          ret_probs.push(sorted[d].prob);\n","\t          ret_names.push(sorted[d].name);\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError2 = true;\n","\t      _iteratorError2 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n","\t          _iterator2.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError2) {\n","\t          throw _iteratorError2;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    ;\n","\t    ret_names.push(\"Other\");\n","\t    ret_probs.push(other_prob);\n","\t    return [ret_names, ret_probs];\n","\t  };\n","\t\n","\t  return PredictProba;\n","\t}();\n","\t\n","\texports.default = PredictProba;\n","\n","/***/ }),\n","/* 7 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t    value: true\n","\t});\n","\t\n","\tvar _d = __webpack_require__(2);\n","\t\n","\tvar _d2 = _interopRequireDefault(_d);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar PredictedValue =\n","\t// svg: d3 object with the svg in question\n","\t// class_names: array of class names\n","\t// predict_probas: array of prediction probabilities\n","\tfunction PredictedValue(svg, predicted_value, min_value, max_value) {\n","\t    var title = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Predicted value';\n","\t    var log_coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t\n","\t    _classCallCheck(this, PredictedValue);\n","\t\n","\t    if (min_value == max_value) {\n","\t        var width_proportion = 1.0;\n","\t    } else {\n","\t        var width_proportion = (predicted_value - min_value) / (max_value - min_value);\n","\t    }\n","\t\n","\t    var width = parseInt(svg.style('width'));\n","\t\n","\t    this.color = _d2.default.scale.category10();\n","\t    this.color('predicted_value');\n","\t    // + 2 is due to it being a float\n","\t    console.log('CREATING THIS');\n","\t    var num_digits = Math.floor(Math.max(Math.log10(Math.abs(min_value)), Math.log10(Math.abs(max_value)))) + 2;\n","\t    num_digits = Math.max(num_digits, 3);\n","\t\n","\t    var corner_width = 12 * num_digits;\n","\t    var corner_padding = 5.5 * num_digits;\n","\t    var bar_x = corner_width + corner_padding;\n","\t    var bar_width = width - corner_width * 2 - corner_padding * 2;\n","\t    var x_scale = _d2.default.scale.linear().range([0, bar_width]);\n","\t    var bar_height = 17;\n","\t    var bar_yshift = title === '' ? 0 : 35;\n","\t    var n_bars = 1;\n","\t    var this_object = this;\n","\t    if (title !== '') {\n","\t        svg.append('text').text(title).attr('x', 20).attr('y', 20);\n","\t    }\n","\t    var bar_y = bar_yshift;\n","\t    var bar = svg.append(\"g\");\n","\t\n","\t    //filled in bar representing predicted value in range\n","\t    var rect = bar.append(\"rect\");\n","\t    rect.attr(\"x\", bar_x).attr(\"y\", bar_y).attr(\"height\", bar_height).attr(\"width\", x_scale(width_proportion)).style(\"fill\", this.color);\n","\t\n","\t    //empty box representing range\n","\t    bar.append(\"rect\").attr(\"x\", bar_x).attr(\"y\", bar_y).attr(\"height\", bar_height).attr(\"width\", x_scale(1)).attr(\"fill-opacity\", 0).attr(\"stroke\", \"black\");\n","\t    var text = bar.append(\"text\");\n","\t    text.classed(\"prob_text\", true);\n","\t    text.attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for min value\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x - corner_padding).attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(min_value.toFixed(2));\n","\t\n","\t    //text for range min annotation\n","\t    var v_adjust_min_value_annotation = text.node().getBBox().height;\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x - corner_padding).attr(\"y\", bar_y + bar_height - 3 + v_adjust_min_value_annotation).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(\"(min)\");\n","\t\n","\t    //text for predicted value\n","\t    // console.log('bar height: ' + bar_height)\n","\t    text = bar.append(\"text\");\n","\t    text.text(predicted_value.toFixed(2));\n","\t    // let h_adjust_predicted_value_text = text.node().getBBox().width / 2;\n","\t    var v_adjust_predicted_value_text = text.node().getBBox().height;\n","\t    text.attr(\"x\", bar_x + x_scale(width_proportion)).attr(\"y\", bar_y + bar_height + v_adjust_predicted_value_text).attr(\"fill\", \"black\").attr(\"text-anchor\", \"middle\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for max value\n","\t    text = bar.append(\"text\");\n","\t    text.text(max_value.toFixed(2));\n","\t    // let h_adjust = text.node().getBBox().width;\n","\t    text.attr(\"x\", bar_x + bar_width + corner_padding).attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"begin\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for range max annotation\n","\t    var v_adjust_max_value_annotation = text.node().getBBox().height;\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x + bar_width + corner_padding).attr(\"y\", bar_y + bar_height - 3 + v_adjust_min_value_annotation).attr(\"fill\", \"black\").attr(\"text-anchor\", \"begin\").style(\"font\", \"14px tahoma, sans-serif\").text(\"(max)\");\n","\t\n","\t    //readjust svg size\n","\t    // let svg_width = width + 1 * h_adjust;\n","\t    // svg.style('width', svg_width + 'px');\n","\t\n","\t    this.svg_height = n_bars * bar_height + bar_yshift + 2 * text.node().getBBox().height + 10;\n","\t    svg.style('height', this.svg_height + 'px');\n","\t    if (log_coords) {\n","\t        console.log(\"svg width: \" + svg_width);\n","\t        console.log(\"svg height: \" + this.svg_height);\n","\t        console.log(\"bar_y: \" + bar_y);\n","\t        console.log(\"bar_x: \" + bar_x);\n","\t        console.log(\"Min value: \" + min_value);\n","\t        console.log(\"Max value: \" + max_value);\n","\t        console.log(\"Pred value: \" + predicted_value);\n","\t    }\n","\t};\n","\t\n","\texports.default = PredictedValue;\n","\n","/***/ }),\n","/* 8 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n","\t\n","\t__webpack_require__(9);\n","\t\n","\t__webpack_require__(335);\n","\t\n","\t__webpack_require__(336);\n","\t\n","\tif (global._babelPolyfill) {\n","\t  throw new Error(\"only one instance of babel-polyfill is allowed\");\n","\t}\n","\tglobal._babelPolyfill = true;\n","\t\n","\tvar DEFINE_PROPERTY = \"defineProperty\";\n","\tfunction define(O, key, value) {\n","\t  O[key] || Object[DEFINE_PROPERTY](O, key, {\n","\t    writable: true,\n","\t    configurable: true,\n","\t    value: value\n","\t  });\n","\t}\n","\t\n","\tdefine(String.prototype, \"padLeft\", \"\".padStart);\n","\tdefine(String.prototype, \"padRight\", \"\".padEnd);\n","\t\n","\t\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n","\t  [][key] && define(Array, key, Function.call.bind([][key]));\n","\t});\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 9 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(10);\n","\t__webpack_require__(59);\n","\t__webpack_require__(60);\n","\t__webpack_require__(61);\n","\t__webpack_require__(62);\n","\t__webpack_require__(64);\n","\t__webpack_require__(67);\n","\t__webpack_require__(68);\n","\t__webpack_require__(69);\n","\t__webpack_require__(70);\n","\t__webpack_require__(71);\n","\t__webpack_require__(72);\n","\t__webpack_require__(73);\n","\t__webpack_require__(74);\n","\t__webpack_require__(75);\n","\t__webpack_require__(77);\n","\t__webpack_require__(79);\n","\t__webpack_require__(81);\n","\t__webpack_require__(83);\n","\t__webpack_require__(86);\n","\t__webpack_require__(87);\n","\t__webpack_require__(88);\n","\t__webpack_require__(92);\n","\t__webpack_require__(94);\n","\t__webpack_require__(96);\n","\t__webpack_require__(99);\n","\t__webpack_require__(100);\n","\t__webpack_require__(101);\n","\t__webpack_require__(102);\n","\t__webpack_require__(104);\n","\t__webpack_require__(105);\n","\t__webpack_require__(106);\n","\t__webpack_require__(107);\n","\t__webpack_require__(108);\n","\t__webpack_require__(109);\n","\t__webpack_require__(110);\n","\t__webpack_require__(112);\n","\t__webpack_require__(113);\n","\t__webpack_require__(114);\n","\t__webpack_require__(116);\n","\t__webpack_require__(117);\n","\t__webpack_require__(118);\n","\t__webpack_require__(120);\n","\t__webpack_require__(122);\n","\t__webpack_require__(123);\n","\t__webpack_require__(124);\n","\t__webpack_require__(125);\n","\t__webpack_require__(126);\n","\t__webpack_require__(127);\n","\t__webpack_require__(128);\n","\t__webpack_require__(129);\n","\t__webpack_require__(130);\n","\t__webpack_require__(131);\n","\t__webpack_require__(132);\n","\t__webpack_require__(133);\n","\t__webpack_require__(134);\n","\t__webpack_require__(139);\n","\t__webpack_require__(140);\n","\t__webpack_require__(144);\n","\t__webpack_require__(145);\n","\t__webpack_require__(146);\n","\t__webpack_require__(147);\n","\t__webpack_require__(149);\n","\t__webpack_require__(150);\n","\t__webpack_require__(151);\n","\t__webpack_require__(152);\n","\t__webpack_require__(153);\n","\t__webpack_require__(154);\n","\t__webpack_require__(155);\n","\t__webpack_require__(156);\n","\t__webpack_require__(157);\n","\t__webpack_require__(158);\n","\t__webpack_require__(159);\n","\t__webpack_require__(160);\n","\t__webpack_require__(161);\n","\t__webpack_require__(162);\n","\t__webpack_require__(163);\n","\t__webpack_require__(165);\n","\t__webpack_require__(166);\n","\t__webpack_require__(168);\n","\t__webpack_require__(169);\n","\t__webpack_require__(175);\n","\t__webpack_require__(176);\n","\t__webpack_require__(178);\n","\t__webpack_require__(179);\n","\t__webpack_require__(180);\n","\t__webpack_require__(184);\n","\t__webpack_require__(185);\n","\t__webpack_require__(186);\n","\t__webpack_require__(187);\n","\t__webpack_require__(188);\n","\t__webpack_require__(190);\n","\t__webpack_require__(191);\n","\t__webpack_require__(192);\n","\t__webpack_require__(193);\n","\t__webpack_require__(196);\n","\t__webpack_require__(198);\n","\t__webpack_require__(199);\n","\t__webpack_require__(200);\n","\t__webpack_require__(202);\n","\t__webpack_require__(204);\n","\t__webpack_require__(206);\n","\t__webpack_require__(208);\n","\t__webpack_require__(209);\n","\t__webpack_require__(210);\n","\t__webpack_require__(214);\n","\t__webpack_require__(215);\n","\t__webpack_require__(216);\n","\t__webpack_require__(218);\n","\t__webpack_require__(228);\n","\t__webpack_require__(232);\n","\t__webpack_require__(233);\n","\t__webpack_require__(235);\n","\t__webpack_require__(236);\n","\t__webpack_require__(240);\n","\t__webpack_require__(241);\n","\t__webpack_require__(243);\n","\t__webpack_require__(244);\n","\t__webpack_require__(245);\n","\t__webpack_require__(246);\n","\t__webpack_require__(247);\n","\t__webpack_require__(248);\n","\t__webpack_require__(249);\n","\t__webpack_require__(250);\n","\t__webpack_require__(251);\n","\t__webpack_require__(252);\n","\t__webpack_require__(253);\n","\t__webpack_require__(254);\n","\t__webpack_require__(255);\n","\t__webpack_require__(256);\n","\t__webpack_require__(257);\n","\t__webpack_require__(258);\n","\t__webpack_require__(259);\n","\t__webpack_require__(260);\n","\t__webpack_require__(261);\n","\t__webpack_require__(263);\n","\t__webpack_require__(264);\n","\t__webpack_require__(265);\n","\t__webpack_require__(266);\n","\t__webpack_require__(267);\n","\t__webpack_require__(269);\n","\t__webpack_require__(270);\n","\t__webpack_require__(271);\n","\t__webpack_require__(273);\n","\t__webpack_require__(274);\n","\t__webpack_require__(275);\n","\t__webpack_require__(276);\n","\t__webpack_require__(277);\n","\t__webpack_require__(278);\n","\t__webpack_require__(279);\n","\t__webpack_require__(280);\n","\t__webpack_require__(282);\n","\t__webpack_require__(283);\n","\t__webpack_require__(285);\n","\t__webpack_require__(286);\n","\t__webpack_require__(287);\n","\t__webpack_require__(288);\n","\t__webpack_require__(291);\n","\t__webpack_require__(292);\n","\t__webpack_require__(294);\n","\t__webpack_require__(295);\n","\t__webpack_require__(296);\n","\t__webpack_require__(297);\n","\t__webpack_require__(299);\n","\t__webpack_require__(300);\n","\t__webpack_require__(301);\n","\t__webpack_require__(302);\n","\t__webpack_require__(303);\n","\t__webpack_require__(304);\n","\t__webpack_require__(305);\n","\t__webpack_require__(306);\n","\t__webpack_require__(307);\n","\t__webpack_require__(308);\n","\t__webpack_require__(310);\n","\t__webpack_require__(311);\n","\t__webpack_require__(312);\n","\t__webpack_require__(313);\n","\t__webpack_require__(314);\n","\t__webpack_require__(315);\n","\t__webpack_require__(316);\n","\t__webpack_require__(317);\n","\t__webpack_require__(318);\n","\t__webpack_require__(319);\n","\t__webpack_require__(320);\n","\t__webpack_require__(322);\n","\t__webpack_require__(323);\n","\t__webpack_require__(324);\n","\t__webpack_require__(325);\n","\t__webpack_require__(326);\n","\t__webpack_require__(327);\n","\t__webpack_require__(328);\n","\t__webpack_require__(329);\n","\t__webpack_require__(330);\n","\t__webpack_require__(331);\n","\t__webpack_require__(332);\n","\t__webpack_require__(333);\n","\t__webpack_require__(334);\n","\tmodule.exports = __webpack_require__(16);\n","\n","\n","/***/ }),\n","/* 10 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// ECMAScript 6 symbols shim\n","\tvar global = __webpack_require__(11);\n","\tvar has = __webpack_require__(12);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar META = __webpack_require__(32).KEY;\n","\tvar $fails = __webpack_require__(14);\n","\tvar shared = __webpack_require__(28);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar uid = __webpack_require__(26);\n","\tvar wks = __webpack_require__(34);\n","\tvar wksExt = __webpack_require__(35);\n","\tvar wksDefine = __webpack_require__(36);\n","\tvar enumKeys = __webpack_require__(37);\n","\tvar isArray = __webpack_require__(52);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar _create = __webpack_require__(53);\n","\tvar gOPNExt = __webpack_require__(56);\n","\tvar $GOPD = __webpack_require__(58);\n","\tvar $DP = __webpack_require__(18);\n","\tvar $keys = __webpack_require__(38);\n","\tvar gOPD = $GOPD.f;\n","\tvar dP = $DP.f;\n","\tvar gOPN = gOPNExt.f;\n","\tvar $Symbol = global.Symbol;\n","\tvar $JSON = global.JSON;\n","\tvar _stringify = $JSON && $JSON.stringify;\n","\tvar PROTOTYPE = 'prototype';\n","\tvar HIDDEN = wks('_hidden');\n","\tvar TO_PRIMITIVE = wks('toPrimitive');\n","\tvar isEnum = {}.propertyIsEnumerable;\n","\tvar SymbolRegistry = shared('symbol-registry');\n","\tvar AllSymbols = shared('symbols');\n","\tvar OPSymbols = shared('op-symbols');\n","\tvar ObjectProto = Object[PROTOTYPE];\n","\tvar USE_NATIVE = typeof $Symbol == 'function';\n","\tvar QObject = global.QObject;\n","\t// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n","\tvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n","\t\n","\t// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n","\tvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n","\t  return _create(dP({}, 'a', {\n","\t    get: function () { return dP(this, 'a', { value: 7 }).a; }\n","\t  })).a != 7;\n","\t}) ? function (it, key, D) {\n","\t  var protoDesc = gOPD(ObjectProto, key);\n","\t  if (protoDesc) delete ObjectProto[key];\n","\t  dP(it, key, D);\n","\t  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n","\t} : dP;\n","\t\n","\tvar wrap = function (tag) {\n","\t  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n","\t  sym._k = tag;\n","\t  return sym;\n","\t};\n","\t\n","\tvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n","\t  return typeof it == 'symbol';\n","\t} : function (it) {\n","\t  return it instanceof $Symbol;\n","\t};\n","\t\n","\tvar $defineProperty = function defineProperty(it, key, D) {\n","\t  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n","\t  anObject(it);\n","\t  key = toPrimitive(key, true);\n","\t  anObject(D);\n","\t  if (has(AllSymbols, key)) {\n","\t    if (!D.enumerable) {\n","\t      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n","\t      it[HIDDEN][key] = true;\n","\t    } else {\n","\t      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n","\t      D = _create(D, { enumerable: createDesc(0, false) });\n","\t    } return setSymbolDesc(it, key, D);\n","\t  } return dP(it, key, D);\n","\t};\n","\tvar $defineProperties = function defineProperties(it, P) {\n","\t  anObject(it);\n","\t  var keys = enumKeys(P = toIObject(P));\n","\t  var i = 0;\n","\t  var l = keys.length;\n","\t  var key;\n","\t  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n","\t  return it;\n","\t};\n","\tvar $create = function create(it, P) {\n","\t  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n","\t};\n","\tvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n","\t  var E = isEnum.call(this, key = toPrimitive(key, true));\n","\t  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n","\t  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n","\t};\n","\tvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n","\t  it = toIObject(it);\n","\t  key = toPrimitive(key, true);\n","\t  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n","\t  var D = gOPD(it, key);\n","\t  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n","\t  return D;\n","\t};\n","\tvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n","\t  var names = gOPN(toIObject(it));\n","\t  var result = [];\n","\t  var i = 0;\n","\t  var key;\n","\t  while (names.length > i) {\n","\t    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n","\t  } return result;\n","\t};\n","\tvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n","\t  var IS_OP = it === ObjectProto;\n","\t  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n","\t  var result = [];\n","\t  var i = 0;\n","\t  var key;\n","\t  while (names.length > i) {\n","\t    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n","\t  } return result;\n","\t};\n","\t\n","\t// 19.4.1.1 Symbol([description])\n","\tif (!USE_NATIVE) {\n","\t  $Symbol = function Symbol() {\n","\t    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n","\t    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n","\t    var $set = function (value) {\n","\t      if (this === ObjectProto) $set.call(OPSymbols, value);\n","\t      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n","\t      setSymbolDesc(this, tag, createDesc(1, value));\n","\t    };\n","\t    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n","\t    return wrap(tag);\n","\t  };\n","\t  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n","\t    return this._k;\n","\t  });\n","\t\n","\t  $GOPD.f = $getOwnPropertyDescriptor;\n","\t  $DP.f = $defineProperty;\n","\t  __webpack_require__(57).f = gOPNExt.f = $getOwnPropertyNames;\n","\t  __webpack_require__(51).f = $propertyIsEnumerable;\n","\t  __webpack_require__(50).f = $getOwnPropertySymbols;\n","\t\n","\t  if (DESCRIPTORS && !__webpack_require__(29)) {\n","\t    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n","\t  }\n","\t\n","\t  wksExt.f = function (name) {\n","\t    return wrap(wks(name));\n","\t  };\n","\t}\n","\t\n","\t$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n","\t\n","\tfor (var es6Symbols = (\n","\t  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n","\t  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n","\t).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n","\t\n","\tfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n","\t\n","\t$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n","\t  // 19.4.2.1 Symbol.for(key)\n","\t  'for': function (key) {\n","\t    return has(SymbolRegistry, key += '')\n","\t      ? SymbolRegistry[key]\n","\t      : SymbolRegistry[key] = $Symbol(key);\n","\t  },\n","\t  // 19.4.2.5 Symbol.keyFor(sym)\n","\t  keyFor: function keyFor(sym) {\n","\t    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n","\t    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n","\t  },\n","\t  useSetter: function () { setter = true; },\n","\t  useSimple: function () { setter = false; }\n","\t});\n","\t\n","\t$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n","\t  // 19.1.2.2 Object.create(O [, Properties])\n","\t  create: $create,\n","\t  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n","\t  defineProperty: $defineProperty,\n","\t  // 19.1.2.3 Object.defineProperties(O, Properties)\n","\t  defineProperties: $defineProperties,\n","\t  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n","\t  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n","\t  // 19.1.2.7 Object.getOwnPropertyNames(O)\n","\t  getOwnPropertyNames: $getOwnPropertyNames,\n","\t  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n","\t  getOwnPropertySymbols: $getOwnPropertySymbols\n","\t});\n","\t\n","\t// 24.3.2 JSON.stringify(value [, replacer [, space]])\n","\t$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n","\t  var S = $Symbol();\n","\t  // MS Edge converts symbol values to JSON as {}\n","\t  // WebKit converts symbol values to JSON as null\n","\t  // V8 throws on boxed symbols\n","\t  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n","\t})), 'JSON', {\n","\t  stringify: function stringify(it) {\n","\t    var args = [it];\n","\t    var i = 1;\n","\t    var replacer, $replacer;\n","\t    while (arguments.length > i) args.push(arguments[i++]);\n","\t    $replacer = replacer = args[1];\n","\t    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n","\t    if (!isArray(replacer)) replacer = function (key, value) {\n","\t      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n","\t      if (!isSymbol(value)) return value;\n","\t    };\n","\t    args[1] = replacer;\n","\t    return _stringify.apply($JSON, args);\n","\t  }\n","\t});\n","\t\n","\t// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n","\t$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(17)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n","\t// 19.4.3.5 Symbol.prototype[@@toStringTag]\n","\tsetToStringTag($Symbol, 'Symbol');\n","\t// 20.2.1.9 Math[@@toStringTag]\n","\tsetToStringTag(Math, 'Math', true);\n","\t// 24.3.3 JSON[@@toStringTag]\n","\tsetToStringTag(global.JSON, 'JSON', true);\n","\n","\n","/***/ }),\n","/* 11 */\n","/***/ (function(module, exports) {\n","\n","\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n","\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n","\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n","\t  // eslint-disable-next-line no-new-func\n","\t  : Function('return this')();\n","\tif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","\n","\n","/***/ }),\n","/* 12 */\n","/***/ (function(module, exports) {\n","\n","\tvar hasOwnProperty = {}.hasOwnProperty;\n","\tmodule.exports = function (it, key) {\n","\t  return hasOwnProperty.call(it, key);\n","\t};\n","\n","\n","/***/ }),\n","/* 13 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// Thank's IE8 for his funny defineProperty\n","\tmodule.exports = !__webpack_require__(14)(function () {\n","\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n","\t});\n","\n","\n","/***/ }),\n","/* 14 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (exec) {\n","\t  try {\n","\t    return !!exec();\n","\t  } catch (e) {\n","\t    return true;\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 15 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar hide = __webpack_require__(17);\n","\tvar redefine = __webpack_require__(25);\n","\tvar ctx = __webpack_require__(30);\n","\tvar PROTOTYPE = 'prototype';\n","\t\n","\tvar $export = function (type, name, source) {\n","\t  var IS_FORCED = type & $export.F;\n","\t  var IS_GLOBAL = type & $export.G;\n","\t  var IS_STATIC = type & $export.S;\n","\t  var IS_PROTO = type & $export.P;\n","\t  var IS_BIND = type & $export.B;\n","\t  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n","\t  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n","\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n","\t  var key, own, out, exp;\n","\t  if (IS_GLOBAL) source = name;\n","\t  for (key in source) {\n","\t    // contains in native\n","\t    own = !IS_FORCED && target && target[key] !== undefined;\n","\t    // export native or passed\n","\t    out = (own ? target : source)[key];\n","\t    // bind timers to global for call from export context\n","\t    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n","\t    // extend global\n","\t    if (target) redefine(target, key, out, type & $export.U);\n","\t    // export\n","\t    if (exports[key] != out) hide(exports, key, exp);\n","\t    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n","\t  }\n","\t};\n","\tglobal.core = core;\n","\t// type bitmap\n","\t$export.F = 1;   // forced\n","\t$export.G = 2;   // global\n","\t$export.S = 4;   // static\n","\t$export.P = 8;   // proto\n","\t$export.B = 16;  // bind\n","\t$export.W = 32;  // wrap\n","\t$export.U = 64;  // safe\n","\t$export.R = 128; // real proto method for `library`\n","\tmodule.exports = $export;\n","\n","\n","/***/ }),\n","/* 16 */\n","/***/ (function(module, exports) {\n","\n","\tvar core = module.exports = { version: '2.6.5' };\n","\tif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","\n","\n","/***/ }),\n","/* 17 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18);\n","\tvar createDesc = __webpack_require__(24);\n","\tmodule.exports = __webpack_require__(13) ? function (object, key, value) {\n","\t  return dP.f(object, key, createDesc(1, value));\n","\t} : function (object, key, value) {\n","\t  object[key] = value;\n","\t  return object;\n","\t};\n","\n","\n","/***/ }),\n","/* 18 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar anObject = __webpack_require__(19);\n","\tvar IE8_DOM_DEFINE = __webpack_require__(21);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar dP = Object.defineProperty;\n","\t\n","\texports.f = __webpack_require__(13) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n","\t  anObject(O);\n","\t  P = toPrimitive(P, true);\n","\t  anObject(Attributes);\n","\t  if (IE8_DOM_DEFINE) try {\n","\t    return dP(O, P, Attributes);\n","\t  } catch (e) { /* empty */ }\n","\t  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n","\t  if ('value' in Attributes) O[P] = Attributes.value;\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 19 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tmodule.exports = function (it) {\n","\t  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 20 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it) {\n","\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n","\t};\n","\n","\n","/***/ }),\n","/* 21 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tmodule.exports = !__webpack_require__(13) && !__webpack_require__(14)(function () {\n","\t  return Object.defineProperty(__webpack_require__(22)('div'), 'a', { get: function () { return 7; } }).a != 7;\n","\t});\n","\n","\n","/***/ }),\n","/* 22 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar document = __webpack_require__(11).document;\n","\t// typeof document.createElement is 'object' in old IE\n","\tvar is = isObject(document) && isObject(document.createElement);\n","\tmodule.exports = function (it) {\n","\t  return is ? document.createElement(it) : {};\n","\t};\n","\n","\n","/***/ }),\n","/* 23 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.1 ToPrimitive(input [, PreferredType])\n","\tvar isObject = __webpack_require__(20);\n","\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n","\t// and the second argument - flag - preferred type is a string\n","\tmodule.exports = function (it, S) {\n","\t  if (!isObject(it)) return it;\n","\t  var fn, val;\n","\t  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  throw TypeError(\"Can't convert object to primitive value\");\n","\t};\n","\n","\n","/***/ }),\n","/* 24 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (bitmap, value) {\n","\t  return {\n","\t    enumerable: !(bitmap & 1),\n","\t    configurable: !(bitmap & 2),\n","\t    writable: !(bitmap & 4),\n","\t    value: value\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 25 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar has = __webpack_require__(12);\n","\tvar SRC = __webpack_require__(26)('src');\n","\tvar $toString = __webpack_require__(27);\n","\tvar TO_STRING = 'toString';\n","\tvar TPL = ('' + $toString).split(TO_STRING);\n","\t\n","\t__webpack_require__(16).inspectSource = function (it) {\n","\t  return $toString.call(it);\n","\t};\n","\t\n","\t(module.exports = function (O, key, val, safe) {\n","\t  var isFunction = typeof val == 'function';\n","\t  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n","\t  if (O[key] === val) return;\n","\t  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n","\t  if (O === global) {\n","\t    O[key] = val;\n","\t  } else if (!safe) {\n","\t    delete O[key];\n","\t    hide(O, key, val);\n","\t  } else if (O[key]) {\n","\t    O[key] = val;\n","\t  } else {\n","\t    hide(O, key, val);\n","\t  }\n","\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n","\t})(Function.prototype, TO_STRING, function toString() {\n","\t  return typeof this == 'function' && this[SRC] || $toString.call(this);\n","\t});\n","\n","\n","/***/ }),\n","/* 26 */\n","/***/ (function(module, exports) {\n","\n","\tvar id = 0;\n","\tvar px = Math.random();\n","\tmodule.exports = function (key) {\n","\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n","\t};\n","\n","\n","/***/ }),\n","/* 27 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tmodule.exports = __webpack_require__(28)('native-function-to-string', Function.toString);\n","\n","\n","/***/ }),\n","/* 28 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar core = __webpack_require__(16);\n","\tvar global = __webpack_require__(11);\n","\tvar SHARED = '__core-js_shared__';\n","\tvar store = global[SHARED] || (global[SHARED] = {});\n","\t\n","\t(module.exports = function (key, value) {\n","\t  return store[key] || (store[key] = value !== undefined ? value : {});\n","\t})('versions', []).push({\n","\t  version: core.version,\n","\t  mode: __webpack_require__(29) ? 'pure' : 'global',\n","\t  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n","\t});\n","\n","\n","/***/ }),\n","/* 29 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = false;\n","\n","\n","/***/ }),\n","/* 30 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// optional / simple context binding\n","\tvar aFunction = __webpack_require__(31);\n","\tmodule.exports = function (fn, that, length) {\n","\t  aFunction(fn);\n","\t  if (that === undefined) return fn;\n","\t  switch (length) {\n","\t    case 1: return function (a) {\n","\t      return fn.call(that, a);\n","\t    };\n","\t    case 2: return function (a, b) {\n","\t      return fn.call(that, a, b);\n","\t    };\n","\t    case 3: return function (a, b, c) {\n","\t      return fn.call(that, a, b, c);\n","\t    };\n","\t  }\n","\t  return function (/* ...args */) {\n","\t    return fn.apply(that, arguments);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 31 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it) {\n","\t  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 32 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar META = __webpack_require__(26)('meta');\n","\tvar isObject = __webpack_require__(20);\n","\tvar has = __webpack_require__(12);\n","\tvar setDesc = __webpack_require__(18).f;\n","\tvar id = 0;\n","\tvar isExtensible = Object.isExtensible || function () {\n","\t  return true;\n","\t};\n","\tvar FREEZE = !__webpack_require__(14)(function () {\n","\t  return isExtensible(Object.preventExtensions({}));\n","\t});\n","\tvar setMeta = function (it) {\n","\t  setDesc(it, META, { value: {\n","\t    i: 'O' + ++id, // object ID\n","\t    w: {}          // weak collections IDs\n","\t  } });\n","\t};\n","\tvar fastKey = function (it, create) {\n","\t  // return primitive with prefix\n","\t  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n","\t  if (!has(it, META)) {\n","\t    // can't set metadata to uncaught frozen object\n","\t    if (!isExtensible(it)) return 'F';\n","\t    // not necessary to add metadata\n","\t    if (!create) return 'E';\n","\t    // add missing metadata\n","\t    setMeta(it);\n","\t  // return object ID\n","\t  } return it[META].i;\n","\t};\n","\tvar getWeak = function (it, create) {\n","\t  if (!has(it, META)) {\n","\t    // can't set metadata to uncaught frozen object\n","\t    if (!isExtensible(it)) return true;\n","\t    // not necessary to add metadata\n","\t    if (!create) return false;\n","\t    // add missing metadata\n","\t    setMeta(it);\n","\t  // return hash weak collections IDs\n","\t  } return it[META].w;\n","\t};\n","\t// add metadata on freeze-family methods calling\n","\tvar onFreeze = function (it) {\n","\t  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n","\t  return it;\n","\t};\n","\tvar meta = module.exports = {\n","\t  KEY: META,\n","\t  NEED: false,\n","\t  fastKey: fastKey,\n","\t  getWeak: getWeak,\n","\t  onFreeze: onFreeze\n","\t};\n","\n","\n","/***/ }),\n","/* 33 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar def = __webpack_require__(18).f;\n","\tvar has = __webpack_require__(12);\n","\tvar TAG = __webpack_require__(34)('toStringTag');\n","\t\n","\tmodule.exports = function (it, tag, stat) {\n","\t  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n","\t};\n","\n","\n","/***/ }),\n","/* 34 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar store = __webpack_require__(28)('wks');\n","\tvar uid = __webpack_require__(26);\n","\tvar Symbol = __webpack_require__(11).Symbol;\n","\tvar USE_SYMBOL = typeof Symbol == 'function';\n","\t\n","\tvar $exports = module.exports = function (name) {\n","\t  return store[name] || (store[name] =\n","\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n","\t};\n","\t\n","\t$exports.store = store;\n","\n","\n","/***/ }),\n","/* 35 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\texports.f = __webpack_require__(34);\n","\n","\n","/***/ }),\n","/* 36 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar wksExt = __webpack_require__(35);\n","\tvar defineProperty = __webpack_require__(18).f;\n","\tmodule.exports = function (name) {\n","\t  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n","\t  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n","\t};\n","\n","\n","/***/ }),\n","/* 37 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// all enumerable object keys, includes symbols\n","\tvar getKeys = __webpack_require__(38);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar pIE = __webpack_require__(51);\n","\tmodule.exports = function (it) {\n","\t  var result = getKeys(it);\n","\t  var getSymbols = gOPS.f;\n","\t  if (getSymbols) {\n","\t    var symbols = getSymbols(it);\n","\t    var isEnum = pIE.f;\n","\t    var i = 0;\n","\t    var key;\n","\t    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n","\t  } return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 38 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n","\tvar $keys = __webpack_require__(39);\n","\tvar enumBugKeys = __webpack_require__(49);\n","\t\n","\tmodule.exports = Object.keys || function keys(O) {\n","\t  return $keys(O, enumBugKeys);\n","\t};\n","\n","\n","/***/ }),\n","/* 39 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar has = __webpack_require__(12);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar arrayIndexOf = __webpack_require__(44)(false);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\t\n","\tmodule.exports = function (object, names) {\n","\t  var O = toIObject(object);\n","\t  var i = 0;\n","\t  var result = [];\n","\t  var key;\n","\t  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n","\t  // Don't enum bug & hidden keys\n","\t  while (names.length > i) if (has(O, key = names[i++])) {\n","\t    ~arrayIndexOf(result, key) || result.push(key);\n","\t  }\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 40 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n","\tvar IObject = __webpack_require__(41);\n","\tvar defined = __webpack_require__(43);\n","\tmodule.exports = function (it) {\n","\t  return IObject(defined(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 41 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n","\tvar cof = __webpack_require__(42);\n","\t// eslint-disable-next-line no-prototype-builtins\n","\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n","\t  return cof(it) == 'String' ? it.split('') : Object(it);\n","\t};\n","\n","\n","/***/ }),\n","/* 42 */\n","/***/ (function(module, exports) {\n","\n","\tvar toString = {}.toString;\n","\t\n","\tmodule.exports = function (it) {\n","\t  return toString.call(it).slice(8, -1);\n","\t};\n","\n","\n","/***/ }),\n","/* 43 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.2.1 RequireObjectCoercible(argument)\n","\tmodule.exports = function (it) {\n","\t  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 44 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// false -> Array#indexOf\n","\t// true  -> Array#includes\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tmodule.exports = function (IS_INCLUDES) {\n","\t  return function ($this, el, fromIndex) {\n","\t    var O = toIObject($this);\n","\t    var length = toLength(O.length);\n","\t    var index = toAbsoluteIndex(fromIndex, length);\n","\t    var value;\n","\t    // Array#includes uses SameValueZero equality algorithm\n","\t    // eslint-disable-next-line no-self-compare\n","\t    if (IS_INCLUDES && el != el) while (length > index) {\n","\t      value = O[index++];\n","\t      // eslint-disable-next-line no-self-compare\n","\t      if (value != value) return true;\n","\t    // Array#indexOf ignores holes, Array#includes - not\n","\t    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n","\t      if (O[index] === el) return IS_INCLUDES || index || 0;\n","\t    } return !IS_INCLUDES && -1;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 45 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.15 ToLength\n","\tvar toInteger = __webpack_require__(46);\n","\tvar min = Math.min;\n","\tmodule.exports = function (it) {\n","\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n","\t};\n","\n","\n","/***/ }),\n","/* 46 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.1.4 ToInteger\n","\tvar ceil = Math.ceil;\n","\tvar floor = Math.floor;\n","\tmodule.exports = function (it) {\n","\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n","\t};\n","\n","\n","/***/ }),\n","/* 47 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar toInteger = __webpack_require__(46);\n","\tvar max = Math.max;\n","\tvar min = Math.min;\n","\tmodule.exports = function (index, length) {\n","\t  index = toInteger(index);\n","\t  return index < 0 ? max(index + length, 0) : min(index, length);\n","\t};\n","\n","\n","/***/ }),\n","/* 48 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar shared = __webpack_require__(28)('keys');\n","\tvar uid = __webpack_require__(26);\n","\tmodule.exports = function (key) {\n","\t  return shared[key] || (shared[key] = uid(key));\n","\t};\n","\n","\n","/***/ }),\n","/* 49 */\n","/***/ (function(module, exports) {\n","\n","\t// IE 8- don't enum bug keys\n","\tmodule.exports = (\n","\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n","\t).split(',');\n","\n","\n","/***/ }),\n","/* 50 */\n","/***/ (function(module, exports) {\n","\n","\texports.f = Object.getOwnPropertySymbols;\n","\n","\n","/***/ }),\n","/* 51 */\n","/***/ (function(module, exports) {\n","\n","\texports.f = {}.propertyIsEnumerable;\n","\n","\n","/***/ }),\n","/* 52 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.2.2 IsArray(argument)\n","\tvar cof = __webpack_require__(42);\n","\tmodule.exports = Array.isArray || function isArray(arg) {\n","\t  return cof(arg) == 'Array';\n","\t};\n","\n","\n","/***/ }),\n","/* 53 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n","\tvar anObject = __webpack_require__(19);\n","\tvar dPs = __webpack_require__(54);\n","\tvar enumBugKeys = __webpack_require__(49);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\tvar Empty = function () { /* empty */ };\n","\tvar PROTOTYPE = 'prototype';\n","\t\n","\t// Create object with fake `null` prototype: use iframe Object with cleared prototype\n","\tvar createDict = function () {\n","\t  // Thrash, waste and sodomy: IE GC bug\n","\t  var iframe = __webpack_require__(22)('iframe');\n","\t  var i = enumBugKeys.length;\n","\t  var lt = '<';\n","\t  var gt = '>';\n","\t  var iframeDocument;\n","\t  iframe.style.display = 'none';\n","\t  __webpack_require__(55).appendChild(iframe);\n","\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n","\t  // createDict = iframe.contentWindow.Object;\n","\t  // html.removeChild(iframe);\n","\t  iframeDocument = iframe.contentWindow.document;\n","\t  iframeDocument.open();\n","\t  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n","\t  iframeDocument.close();\n","\t  createDict = iframeDocument.F;\n","\t  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n","\t  return createDict();\n","\t};\n","\t\n","\tmodule.exports = Object.create || function create(O, Properties) {\n","\t  var result;\n","\t  if (O !== null) {\n","\t    Empty[PROTOTYPE] = anObject(O);\n","\t    result = new Empty();\n","\t    Empty[PROTOTYPE] = null;\n","\t    // add \"__proto__\" for Object.getPrototypeOf polyfill\n","\t    result[IE_PROTO] = O;\n","\t  } else result = createDict();\n","\t  return Properties === undefined ? result : dPs(result, Properties);\n","\t};\n","\n","\n","/***/ }),\n","/* 54 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getKeys = __webpack_require__(38);\n","\t\n","\tmodule.exports = __webpack_require__(13) ? Object.defineProperties : function defineProperties(O, Properties) {\n","\t  anObject(O);\n","\t  var keys = getKeys(Properties);\n","\t  var length = keys.length;\n","\t  var i = 0;\n","\t  var P;\n","\t  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 55 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar document = __webpack_require__(11).document;\n","\tmodule.exports = document && document.documentElement;\n","\n","\n","/***/ }),\n","/* 56 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n","\tvar toIObject = __webpack_require__(40);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar toString = {}.toString;\n","\t\n","\tvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n","\t  ? Object.getOwnPropertyNames(window) : [];\n","\t\n","\tvar getWindowNames = function (it) {\n","\t  try {\n","\t    return gOPN(it);\n","\t  } catch (e) {\n","\t    return windowNames.slice();\n","\t  }\n","\t};\n","\t\n","\tmodule.exports.f = function getOwnPropertyNames(it) {\n","\t  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 57 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n","\tvar $keys = __webpack_require__(39);\n","\tvar hiddenKeys = __webpack_require__(49).concat('length', 'prototype');\n","\t\n","\texports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n","\t  return $keys(O, hiddenKeys);\n","\t};\n","\n","\n","/***/ }),\n","/* 58 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar pIE = __webpack_require__(51);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar has = __webpack_require__(12);\n","\tvar IE8_DOM_DEFINE = __webpack_require__(21);\n","\tvar gOPD = Object.getOwnPropertyDescriptor;\n","\t\n","\texports.f = __webpack_require__(13) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n","\t  O = toIObject(O);\n","\t  P = toPrimitive(P, true);\n","\t  if (IE8_DOM_DEFINE) try {\n","\t    return gOPD(O, P);\n","\t  } catch (e) { /* empty */ }\n","\t  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n","\t};\n","\n","\n","/***/ }),\n","/* 59 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n","\t$export($export.S, 'Object', { create: __webpack_require__(53) });\n","\n","\n","/***/ }),\n","/* 60 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n","\t$export($export.S + $export.F * !__webpack_require__(13), 'Object', { defineProperty: __webpack_require__(18).f });\n","\n","\n","/***/ }),\n","/* 61 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n","\t$export($export.S + $export.F * !__webpack_require__(13), 'Object', { defineProperties: __webpack_require__(54) });\n","\n","\n","/***/ }),\n","/* 62 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n","\tvar toIObject = __webpack_require__(40);\n","\tvar $getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t__webpack_require__(63)('getOwnPropertyDescriptor', function () {\n","\t  return function getOwnPropertyDescriptor(it, key) {\n","\t    return $getOwnPropertyDescriptor(toIObject(it), key);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 63 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// most Object methods by ES6 should accept primitives\n","\tvar $export = __webpack_require__(15);\n","\tvar core = __webpack_require__(16);\n","\tvar fails = __webpack_require__(14);\n","\tmodule.exports = function (KEY, exec) {\n","\t  var fn = (core.Object || {})[KEY] || Object[KEY];\n","\t  var exp = {};\n","\t  exp[KEY] = exec(fn);\n","\t  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n","\t};\n","\n","\n","/***/ }),\n","/* 64 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.9 Object.getPrototypeOf(O)\n","\tvar toObject = __webpack_require__(65);\n","\tvar $getPrototypeOf = __webpack_require__(66);\n","\t\n","\t__webpack_require__(63)('getPrototypeOf', function () {\n","\t  return function getPrototypeOf(it) {\n","\t    return $getPrototypeOf(toObject(it));\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 65 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.13 ToObject(argument)\n","\tvar defined = __webpack_require__(43);\n","\tmodule.exports = function (it) {\n","\t  return Object(defined(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 66 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n","\tvar has = __webpack_require__(12);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\tvar ObjectProto = Object.prototype;\n","\t\n","\tmodule.exports = Object.getPrototypeOf || function (O) {\n","\t  O = toObject(O);\n","\t  if (has(O, IE_PROTO)) return O[IE_PROTO];\n","\t  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n","\t    return O.constructor.prototype;\n","\t  } return O instanceof Object ? ObjectProto : null;\n","\t};\n","\n","\n","/***/ }),\n","/* 67 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.14 Object.keys(O)\n","\tvar toObject = __webpack_require__(65);\n","\tvar $keys = __webpack_require__(38);\n","\t\n","\t__webpack_require__(63)('keys', function () {\n","\t  return function keys(it) {\n","\t    return $keys(toObject(it));\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 68 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.7 Object.getOwnPropertyNames(O)\n","\t__webpack_require__(63)('getOwnPropertyNames', function () {\n","\t  return __webpack_require__(56).f;\n","\t});\n","\n","\n","/***/ }),\n","/* 69 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.5 Object.freeze(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('freeze', function ($freeze) {\n","\t  return function freeze(it) {\n","\t    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 70 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.17 Object.seal(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('seal', function ($seal) {\n","\t  return function seal(it) {\n","\t    return $seal && isObject(it) ? $seal(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 71 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.15 Object.preventExtensions(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('preventExtensions', function ($preventExtensions) {\n","\t  return function preventExtensions(it) {\n","\t    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 72 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.12 Object.isFrozen(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isFrozen', function ($isFrozen) {\n","\t  return function isFrozen(it) {\n","\t    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 73 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.13 Object.isSealed(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isSealed', function ($isSealed) {\n","\t  return function isSealed(it) {\n","\t    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 74 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.11 Object.isExtensible(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isExtensible', function ($isExtensible) {\n","\t  return function isExtensible(it) {\n","\t    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 75 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.1 Object.assign(target, source)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S + $export.F, 'Object', { assign: __webpack_require__(76) });\n","\n","\n","/***/ }),\n","/* 76 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 19.1.2.1 Object.assign(target, source, ...)\n","\tvar getKeys = __webpack_require__(38);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar pIE = __webpack_require__(51);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IObject = __webpack_require__(41);\n","\tvar $assign = Object.assign;\n","\t\n","\t// should work with symbols and should have deterministic property order (V8 bug)\n","\tmodule.exports = !$assign || __webpack_require__(14)(function () {\n","\t  var A = {};\n","\t  var B = {};\n","\t  // eslint-disable-next-line no-undef\n","\t  var S = Symbol();\n","\t  var K = 'abcdefghijklmnopqrst';\n","\t  A[S] = 7;\n","\t  K.split('').forEach(function (k) { B[k] = k; });\n","\t  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n","\t}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n","\t  var T = toObject(target);\n","\t  var aLen = arguments.length;\n","\t  var index = 1;\n","\t  var getSymbols = gOPS.f;\n","\t  var isEnum = pIE.f;\n","\t  while (aLen > index) {\n","\t    var S = IObject(arguments[index++]);\n","\t    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n","\t    var length = keys.length;\n","\t    var j = 0;\n","\t    var key;\n","\t    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n","\t  } return T;\n","\t} : $assign;\n","\n","\n","/***/ }),\n","/* 77 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.10 Object.is(value1, value2)\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.S, 'Object', { is: __webpack_require__(78) });\n","\n","\n","/***/ }),\n","/* 78 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.2.9 SameValue(x, y)\n","\tmodule.exports = Object.is || function is(x, y) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n","\t};\n","\n","\n","/***/ }),\n","/* 79 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.19 Object.setPrototypeOf(O, proto)\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(80).set });\n","\n","\n","/***/ }),\n","/* 80 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// Works with __proto__ only. Old v8 can't work with null proto objects.\n","\t/* eslint-disable no-proto */\n","\tvar isObject = __webpack_require__(20);\n","\tvar anObject = __webpack_require__(19);\n","\tvar check = function (O, proto) {\n","\t  anObject(O);\n","\t  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n","\t};\n","\tmodule.exports = {\n","\t  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n","\t    function (test, buggy, set) {\n","\t      try {\n","\t        set = __webpack_require__(30)(Function.call, __webpack_require__(58).f(Object.prototype, '__proto__').set, 2);\n","\t        set(test, []);\n","\t        buggy = !(test instanceof Array);\n","\t      } catch (e) { buggy = true; }\n","\t      return function setPrototypeOf(O, proto) {\n","\t        check(O, proto);\n","\t        if (buggy) O.__proto__ = proto;\n","\t        else set(O, proto);\n","\t        return O;\n","\t      };\n","\t    }({}, false) : undefined),\n","\t  check: check\n","\t};\n","\n","\n","/***/ }),\n","/* 81 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 19.1.3.6 Object.prototype.toString()\n","\tvar classof = __webpack_require__(82);\n","\tvar test = {};\n","\ttest[__webpack_require__(34)('toStringTag')] = 'z';\n","\tif (test + '' != '[object z]') {\n","\t  __webpack_require__(25)(Object.prototype, 'toString', function toString() {\n","\t    return '[object ' + classof(this) + ']';\n","\t  }, true);\n","\t}\n","\n","\n","/***/ }),\n","/* 82 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// getting tag from 19.1.3.6 Object.prototype.toString()\n","\tvar cof = __webpack_require__(42);\n","\tvar TAG = __webpack_require__(34)('toStringTag');\n","\t// ES3 wrong here\n","\tvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n","\t\n","\t// fallback for IE11 Script Access Denied error\n","\tvar tryGet = function (it, key) {\n","\t  try {\n","\t    return it[key];\n","\t  } catch (e) { /* empty */ }\n","\t};\n","\t\n","\tmodule.exports = function (it) {\n","\t  var O, T, B;\n","\t  return it === undefined ? 'Undefined' : it === null ? 'Null'\n","\t    // @@toStringTag case\n","\t    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n","\t    // builtinTag case\n","\t    : ARG ? cof(O)\n","\t    // ES3 arguments fallback\n","\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n","\t};\n","\n","\n","/***/ }),\n","/* 83 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Function', { bind: __webpack_require__(84) });\n","\n","\n","/***/ }),\n","/* 84 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar aFunction = __webpack_require__(31);\n","\tvar isObject = __webpack_require__(20);\n","\tvar invoke = __webpack_require__(85);\n","\tvar arraySlice = [].slice;\n","\tvar factories = {};\n","\t\n","\tvar construct = function (F, len, args) {\n","\t  if (!(len in factories)) {\n","\t    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n","\t    // eslint-disable-next-line no-new-func\n","\t    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n","\t  } return factories[len](F, args);\n","\t};\n","\t\n","\tmodule.exports = Function.bind || function bind(that /* , ...args */) {\n","\t  var fn = aFunction(this);\n","\t  var partArgs = arraySlice.call(arguments, 1);\n","\t  var bound = function (/* args... */) {\n","\t    var args = partArgs.concat(arraySlice.call(arguments));\n","\t    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n","\t  };\n","\t  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n","\t  return bound;\n","\t};\n","\n","\n","/***/ }),\n","/* 85 */\n","/***/ (function(module, exports) {\n","\n","\t// fast apply, http://jsperf.lnkit.com/fast-apply/5\n","\tmodule.exports = function (fn, args, that) {\n","\t  var un = that === undefined;\n","\t  switch (args.length) {\n","\t    case 0: return un ? fn()\n","\t                      : fn.call(that);\n","\t    case 1: return un ? fn(args[0])\n","\t                      : fn.call(that, args[0]);\n","\t    case 2: return un ? fn(args[0], args[1])\n","\t                      : fn.call(that, args[0], args[1]);\n","\t    case 3: return un ? fn(args[0], args[1], args[2])\n","\t                      : fn.call(that, args[0], args[1], args[2]);\n","\t    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n","\t                      : fn.call(that, args[0], args[1], args[2], args[3]);\n","\t  } return fn.apply(that, args);\n","\t};\n","\n","\n","/***/ }),\n","/* 86 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18).f;\n","\tvar FProto = Function.prototype;\n","\tvar nameRE = /^\\s*function ([^ (]*)/;\n","\tvar NAME = 'name';\n","\t\n","\t// 19.2.4.2 name\n","\tNAME in FProto || __webpack_require__(13) && dP(FProto, NAME, {\n","\t  configurable: true,\n","\t  get: function () {\n","\t    try {\n","\t      return ('' + this).match(nameRE)[1];\n","\t    } catch (e) {\n","\t      return '';\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 87 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar isObject = __webpack_require__(20);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar HAS_INSTANCE = __webpack_require__(34)('hasInstance');\n","\tvar FunctionProto = Function.prototype;\n","\t// 19.2.3.6 Function.prototype[@@hasInstance](V)\n","\tif (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(18).f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n","\t  if (typeof this != 'function' || !isObject(O)) return false;\n","\t  if (!isObject(this.prototype)) return O instanceof this;\n","\t  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n","\t  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n","\t  return false;\n","\t} });\n","\n","\n","/***/ }),\n","/* 88 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseInt = __webpack_require__(89);\n","\t// 18.2.5 parseInt(string, radix)\n","\t$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","\n","\n","/***/ }),\n","/* 89 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $parseInt = __webpack_require__(11).parseInt;\n","\tvar $trim = __webpack_require__(90).trim;\n","\tvar ws = __webpack_require__(91);\n","\tvar hex = /^[-+]?0[xX]/;\n","\t\n","\tmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n","\t  var string = $trim(String(str), 3);\n","\t  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n","\t} : $parseInt;\n","\n","\n","/***/ }),\n","/* 90 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar defined = __webpack_require__(43);\n","\tvar fails = __webpack_require__(14);\n","\tvar spaces = __webpack_require__(91);\n","\tvar space = '[' + spaces + ']';\n","\tvar non = '\\u200b\\u0085';\n","\tvar ltrim = RegExp('^' + space + space + '*');\n","\tvar rtrim = RegExp(space + space + '*$');\n","\t\n","\tvar exporter = function (KEY, exec, ALIAS) {\n","\t  var exp = {};\n","\t  var FORCE = fails(function () {\n","\t    return !!spaces[KEY]() || non[KEY]() != non;\n","\t  });\n","\t  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n","\t  if (ALIAS) exp[ALIAS] = fn;\n","\t  $export($export.P + $export.F * FORCE, 'String', exp);\n","\t};\n","\t\n","\t// 1 -> String#trimLeft\n","\t// 2 -> String#trimRight\n","\t// 3 -> String#trim\n","\tvar trim = exporter.trim = function (string, TYPE) {\n","\t  string = String(defined(string));\n","\t  if (TYPE & 1) string = string.replace(ltrim, '');\n","\t  if (TYPE & 2) string = string.replace(rtrim, '');\n","\t  return string;\n","\t};\n","\t\n","\tmodule.exports = exporter;\n","\n","\n","/***/ }),\n","/* 91 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n","\t  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","\n","\n","/***/ }),\n","/* 92 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseFloat = __webpack_require__(93);\n","\t// 18.2.4 parseFloat(string)\n","\t$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","\n","\n","/***/ }),\n","/* 93 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $parseFloat = __webpack_require__(11).parseFloat;\n","\tvar $trim = __webpack_require__(90).trim;\n","\t\n","\tmodule.exports = 1 / $parseFloat(__webpack_require__(91) + '-0') !== -Infinity ? function parseFloat(str) {\n","\t  var string = $trim(String(str), 3);\n","\t  var result = $parseFloat(string);\n","\t  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n","\t} : $parseFloat;\n","\n","\n","/***/ }),\n","/* 94 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar has = __webpack_require__(12);\n","\tvar cof = __webpack_require__(42);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar fails = __webpack_require__(14);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar gOPD = __webpack_require__(58).f;\n","\tvar dP = __webpack_require__(18).f;\n","\tvar $trim = __webpack_require__(90).trim;\n","\tvar NUMBER = 'Number';\n","\tvar $Number = global[NUMBER];\n","\tvar Base = $Number;\n","\tvar proto = $Number.prototype;\n","\t// Opera ~12 has broken Object#toString\n","\tvar BROKEN_COF = cof(__webpack_require__(53)(proto)) == NUMBER;\n","\tvar TRIM = 'trim' in String.prototype;\n","\t\n","\t// 7.1.3 ToNumber(argument)\n","\tvar toNumber = function (argument) {\n","\t  var it = toPrimitive(argument, false);\n","\t  if (typeof it == 'string' && it.length > 2) {\n","\t    it = TRIM ? it.trim() : $trim(it, 3);\n","\t    var first = it.charCodeAt(0);\n","\t    var third, radix, maxCode;\n","\t    if (first === 43 || first === 45) {\n","\t      third = it.charCodeAt(2);\n","\t      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n","\t    } else if (first === 48) {\n","\t      switch (it.charCodeAt(1)) {\n","\t        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n","\t        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n","\t        default: return +it;\n","\t      }\n","\t      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n","\t        code = digits.charCodeAt(i);\n","\t        // parseInt parses a string to a first unavailable symbol\n","\t        // but ToNumber should return NaN if a string contains unavailable symbols\n","\t        if (code < 48 || code > maxCode) return NaN;\n","\t      } return parseInt(digits, radix);\n","\t    }\n","\t  } return +it;\n","\t};\n","\t\n","\tif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n","\t  $Number = function Number(value) {\n","\t    var it = arguments.length < 1 ? 0 : value;\n","\t    var that = this;\n","\t    return that instanceof $Number\n","\t      // check on 1..constructor(foo) case\n","\t      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n","\t        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n","\t  };\n","\t  for (var keys = __webpack_require__(13) ? gOPN(Base) : (\n","\t    // ES3:\n","\t    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n","\t    // ES6 (in case, if modules with ES6 Number statics required before):\n","\t    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n","\t    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n","\t  ).split(','), j = 0, key; keys.length > j; j++) {\n","\t    if (has(Base, key = keys[j]) && !has($Number, key)) {\n","\t      dP($Number, key, gOPD(Base, key));\n","\t    }\n","\t  }\n","\t  $Number.prototype = proto;\n","\t  proto.constructor = $Number;\n","\t  __webpack_require__(25)(global, NUMBER, $Number);\n","\t}\n","\n","\n","/***/ }),\n","/* 95 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar setPrototypeOf = __webpack_require__(80).set;\n","\tmodule.exports = function (that, target, C) {\n","\t  var S = target.constructor;\n","\t  var P;\n","\t  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n","\t    setPrototypeOf(that, P);\n","\t  } return that;\n","\t};\n","\n","\n","/***/ }),\n","/* 96 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar aNumberValue = __webpack_require__(97);\n","\tvar repeat = __webpack_require__(98);\n","\tvar $toFixed = 1.0.toFixed;\n","\tvar floor = Math.floor;\n","\tvar data = [0, 0, 0, 0, 0, 0];\n","\tvar ERROR = 'Number.toFixed: incorrect invocation!';\n","\tvar ZERO = '0';\n","\t\n","\tvar multiply = function (n, c) {\n","\t  var i = -1;\n","\t  var c2 = c;\n","\t  while (++i < 6) {\n","\t    c2 += n * data[i];\n","\t    data[i] = c2 % 1e7;\n","\t    c2 = floor(c2 / 1e7);\n","\t  }\n","\t};\n","\tvar divide = function (n) {\n","\t  var i = 6;\n","\t  var c = 0;\n","\t  while (--i >= 0) {\n","\t    c += data[i];\n","\t    data[i] = floor(c / n);\n","\t    c = (c % n) * 1e7;\n","\t  }\n","\t};\n","\tvar numToString = function () {\n","\t  var i = 6;\n","\t  var s = '';\n","\t  while (--i >= 0) {\n","\t    if (s !== '' || i === 0 || data[i] !== 0) {\n","\t      var t = String(data[i]);\n","\t      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n","\t    }\n","\t  } return s;\n","\t};\n","\tvar pow = function (x, n, acc) {\n","\t  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n","\t};\n","\tvar log = function (x) {\n","\t  var n = 0;\n","\t  var x2 = x;\n","\t  while (x2 >= 4096) {\n","\t    n += 12;\n","\t    x2 /= 4096;\n","\t  }\n","\t  while (x2 >= 2) {\n","\t    n += 1;\n","\t    x2 /= 2;\n","\t  } return n;\n","\t};\n","\t\n","\t$export($export.P + $export.F * (!!$toFixed && (\n","\t  0.00008.toFixed(3) !== '0.000' ||\n","\t  0.9.toFixed(0) !== '1' ||\n","\t  1.255.toFixed(2) !== '1.25' ||\n","\t  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n","\t) || !__webpack_require__(14)(function () {\n","\t  // V8 ~ Android 4.3-\n","\t  $toFixed.call({});\n","\t})), 'Number', {\n","\t  toFixed: function toFixed(fractionDigits) {\n","\t    var x = aNumberValue(this, ERROR);\n","\t    var f = toInteger(fractionDigits);\n","\t    var s = '';\n","\t    var m = ZERO;\n","\t    var e, z, j, k;\n","\t    if (f < 0 || f > 20) throw RangeError(ERROR);\n","\t    // eslint-disable-next-line no-self-compare\n","\t    if (x != x) return 'NaN';\n","\t    if (x <= -1e21 || x >= 1e21) return String(x);\n","\t    if (x < 0) {\n","\t      s = '-';\n","\t      x = -x;\n","\t    }\n","\t    if (x > 1e-21) {\n","\t      e = log(x * pow(2, 69, 1)) - 69;\n","\t      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n","\t      z *= 0x10000000000000;\n","\t      e = 52 - e;\n","\t      if (e > 0) {\n","\t        multiply(0, z);\n","\t        j = f;\n","\t        while (j >= 7) {\n","\t          multiply(1e7, 0);\n","\t          j -= 7;\n","\t        }\n","\t        multiply(pow(10, j, 1), 0);\n","\t        j = e - 1;\n","\t        while (j >= 23) {\n","\t          divide(1 << 23);\n","\t          j -= 23;\n","\t        }\n","\t        divide(1 << j);\n","\t        multiply(1, 1);\n","\t        divide(2);\n","\t        m = numToString();\n","\t      } else {\n","\t        multiply(0, z);\n","\t        multiply(1 << -e, 0);\n","\t        m = numToString() + repeat.call(ZERO, f);\n","\t      }\n","\t    }\n","\t    if (f > 0) {\n","\t      k = m.length;\n","\t      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n","\t    } else {\n","\t      m = s + m;\n","\t    } return m;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 97 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar cof = __webpack_require__(42);\n","\tmodule.exports = function (it, msg) {\n","\t  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n","\t  return +it;\n","\t};\n","\n","\n","/***/ }),\n","/* 98 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar toInteger = __webpack_require__(46);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function repeat(count) {\n","\t  var str = String(defined(this));\n","\t  var res = '';\n","\t  var n = toInteger(count);\n","\t  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n","\t  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n","\t  return res;\n","\t};\n","\n","\n","/***/ }),\n","/* 99 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $fails = __webpack_require__(14);\n","\tvar aNumberValue = __webpack_require__(97);\n","\tvar $toPrecision = 1.0.toPrecision;\n","\t\n","\t$export($export.P + $export.F * ($fails(function () {\n","\t  // IE7-\n","\t  return $toPrecision.call(1, undefined) !== '1';\n","\t}) || !$fails(function () {\n","\t  // V8 ~ Android 4.3-\n","\t  $toPrecision.call({});\n","\t})), 'Number', {\n","\t  toPrecision: function toPrecision(precision) {\n","\t    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n","\t    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 100 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.1 Number.EPSILON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","\n","\n","/***/ }),\n","/* 101 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.2 Number.isFinite(number)\n","\tvar $export = __webpack_require__(15);\n","\tvar _isFinite = __webpack_require__(11).isFinite;\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isFinite: function isFinite(it) {\n","\t    return typeof it == 'number' && _isFinite(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 102 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.3 Number.isInteger(number)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { isInteger: __webpack_require__(103) });\n","\n","\n","/***/ }),\n","/* 103 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.3 Number.isInteger(number)\n","\tvar isObject = __webpack_require__(20);\n","\tvar floor = Math.floor;\n","\tmodule.exports = function isInteger(it) {\n","\t  return !isObject(it) && isFinite(it) && floor(it) === it;\n","\t};\n","\n","\n","/***/ }),\n","/* 104 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.4 Number.isNaN(number)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isNaN: function isNaN(number) {\n","\t    // eslint-disable-next-line no-self-compare\n","\t    return number != number;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 105 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.5 Number.isSafeInteger(number)\n","\tvar $export = __webpack_require__(15);\n","\tvar isInteger = __webpack_require__(103);\n","\tvar abs = Math.abs;\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isSafeInteger: function isSafeInteger(number) {\n","\t    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 106 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.6 Number.MAX_SAFE_INTEGER\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","\n","\n","/***/ }),\n","/* 107 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.10 Number.MIN_SAFE_INTEGER\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","\n","\n","/***/ }),\n","/* 108 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseFloat = __webpack_require__(93);\n","\t// 20.1.2.12 Number.parseFloat(string)\n","\t$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","\n","\n","/***/ }),\n","/* 109 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseInt = __webpack_require__(89);\n","\t// 20.1.2.13 Number.parseInt(string, radix)\n","\t$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","\n","\n","/***/ }),\n","/* 110 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.3 Math.acosh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar log1p = __webpack_require__(111);\n","\tvar sqrt = Math.sqrt;\n","\tvar $acosh = Math.acosh;\n","\t\n","\t$export($export.S + $export.F * !($acosh\n","\t  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n","\t  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n","\t  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n","\t  && $acosh(Infinity) == Infinity\n","\t), 'Math', {\n","\t  acosh: function acosh(x) {\n","\t    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n","\t      ? Math.log(x) + Math.LN2\n","\t      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 111 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.20 Math.log1p(x)\n","\tmodule.exports = Math.log1p || function log1p(x) {\n","\t  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n","\t};\n","\n","\n","/***/ }),\n","/* 112 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.5 Math.asinh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $asinh = Math.asinh;\n","\t\n","\tfunction asinh(x) {\n","\t  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n","\t}\n","\t\n","\t// Tor Browser bug: Math.asinh(0) -> -0\n","\t$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","\n","\n","/***/ }),\n","/* 113 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.7 Math.atanh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $atanh = Math.atanh;\n","\t\n","\t// Tor Browser bug: Math.atanh(-0) -> 0\n","\t$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n","\t  atanh: function atanh(x) {\n","\t    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 114 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.9 Math.cbrt(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar sign = __webpack_require__(115);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  cbrt: function cbrt(x) {\n","\t    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 115 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.28 Math.sign(x)\n","\tmodule.exports = Math.sign || function sign(x) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n","\t};\n","\n","\n","/***/ }),\n","/* 116 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.11 Math.clz32(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  clz32: function clz32(x) {\n","\t    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 117 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.12 Math.cosh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar exp = Math.exp;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  cosh: function cosh(x) {\n","\t    return (exp(x = +x) + exp(-x)) / 2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 118 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.14 Math.expm1(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $expm1 = __webpack_require__(119);\n","\t\n","\t$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","\n","\n","/***/ }),\n","/* 119 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.14 Math.expm1(x)\n","\tvar $expm1 = Math.expm1;\n","\tmodule.exports = (!$expm1\n","\t  // Old FF bug\n","\t  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n","\t  // Tor Browser bug\n","\t  || $expm1(-2e-17) != -2e-17\n","\t) ? function expm1(x) {\n","\t  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n","\t} : $expm1;\n","\n","\n","/***/ }),\n","/* 120 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.16 Math.fround(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { fround: __webpack_require__(121) });\n","\n","\n","/***/ }),\n","/* 121 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.16 Math.fround(x)\n","\tvar sign = __webpack_require__(115);\n","\tvar pow = Math.pow;\n","\tvar EPSILON = pow(2, -52);\n","\tvar EPSILON32 = pow(2, -23);\n","\tvar MAX32 = pow(2, 127) * (2 - EPSILON32);\n","\tvar MIN32 = pow(2, -126);\n","\t\n","\tvar roundTiesToEven = function (n) {\n","\t  return n + 1 / EPSILON - 1 / EPSILON;\n","\t};\n","\t\n","\tmodule.exports = Math.fround || function fround(x) {\n","\t  var $abs = Math.abs(x);\n","\t  var $sign = sign(x);\n","\t  var a, result;\n","\t  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n","\t  a = (1 + EPSILON32 / EPSILON) * $abs;\n","\t  result = a - (a - $abs);\n","\t  // eslint-disable-next-line no-self-compare\n","\t  if (result > MAX32 || result != result) return $sign * Infinity;\n","\t  return $sign * result;\n","\t};\n","\n","\n","/***/ }),\n","/* 122 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\n","\tvar $export = __webpack_require__(15);\n","\tvar abs = Math.abs;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n","\t    var sum = 0;\n","\t    var i = 0;\n","\t    var aLen = arguments.length;\n","\t    var larg = 0;\n","\t    var arg, div;\n","\t    while (i < aLen) {\n","\t      arg = abs(arguments[i++]);\n","\t      if (larg < arg) {\n","\t        div = larg / arg;\n","\t        sum = sum * div * div + 1;\n","\t        larg = arg;\n","\t      } else if (arg > 0) {\n","\t        div = arg / larg;\n","\t        sum += div * div;\n","\t      } else sum += arg;\n","\t    }\n","\t    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 123 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.18 Math.imul(x, y)\n","\tvar $export = __webpack_require__(15);\n","\tvar $imul = Math.imul;\n","\t\n","\t// some WebKit versions fails with big numbers, some has wrong arity\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n","\t}), 'Math', {\n","\t  imul: function imul(x, y) {\n","\t    var UINT16 = 0xffff;\n","\t    var xn = +x;\n","\t    var yn = +y;\n","\t    var xl = UINT16 & xn;\n","\t    var yl = UINT16 & yn;\n","\t    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 124 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.21 Math.log10(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  log10: function log10(x) {\n","\t    return Math.log(x) * Math.LOG10E;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 125 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.20 Math.log1p(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { log1p: __webpack_require__(111) });\n","\n","\n","/***/ }),\n","/* 126 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.22 Math.log2(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  log2: function log2(x) {\n","\t    return Math.log(x) / Math.LN2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 127 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.28 Math.sign(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { sign: __webpack_require__(115) });\n","\n","\n","/***/ }),\n","/* 128 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.30 Math.sinh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar expm1 = __webpack_require__(119);\n","\tvar exp = Math.exp;\n","\t\n","\t// V8 near Chromium 38 has a problem with very small numbers\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  return !Math.sinh(-2e-17) != -2e-17;\n","\t}), 'Math', {\n","\t  sinh: function sinh(x) {\n","\t    return Math.abs(x = +x) < 1\n","\t      ? (expm1(x) - expm1(-x)) / 2\n","\t      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 129 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.33 Math.tanh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar expm1 = __webpack_require__(119);\n","\tvar exp = Math.exp;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  tanh: function tanh(x) {\n","\t    var a = expm1(x = +x);\n","\t    var b = expm1(-x);\n","\t    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 130 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.34 Math.trunc(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  trunc: function trunc(it) {\n","\t    return (it > 0 ? Math.floor : Math.ceil)(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 131 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar fromCharCode = String.fromCharCode;\n","\tvar $fromCodePoint = String.fromCodePoint;\n","\t\n","\t// length should be 1, old FF problem\n","\t$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n","\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n","\t  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n","\t    var res = [];\n","\t    var aLen = arguments.length;\n","\t    var i = 0;\n","\t    var code;\n","\t    while (aLen > i) {\n","\t      code = +arguments[i++];\n","\t      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n","\t      res.push(code < 0x10000\n","\t        ? fromCharCode(code)\n","\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n","\t      );\n","\t    } return res.join('');\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 132 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\t$export($export.S, 'String', {\n","\t  // 21.1.2.4 String.raw(callSite, ...substitutions)\n","\t  raw: function raw(callSite) {\n","\t    var tpl = toIObject(callSite.raw);\n","\t    var len = toLength(tpl.length);\n","\t    var aLen = arguments.length;\n","\t    var res = [];\n","\t    var i = 0;\n","\t    while (len > i) {\n","\t      res.push(String(tpl[i++]));\n","\t      if (i < aLen) res.push(String(arguments[i]));\n","\t    } return res.join('');\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 133 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 21.1.3.25 String.prototype.trim()\n","\t__webpack_require__(90)('trim', function ($trim) {\n","\t  return function trim() {\n","\t    return $trim(this, 3);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 134 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $at = __webpack_require__(135)(true);\n","\t\n","\t// 21.1.3.27 String.prototype[@@iterator]()\n","\t__webpack_require__(136)(String, 'String', function (iterated) {\n","\t  this._t = String(iterated); // target\n","\t  this._i = 0;                // next index\n","\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n","\t}, function () {\n","\t  var O = this._t;\n","\t  var index = this._i;\n","\t  var point;\n","\t  if (index >= O.length) return { value: undefined, done: true };\n","\t  point = $at(O, index);\n","\t  this._i += point.length;\n","\t  return { value: point, done: false };\n","\t});\n","\n","\n","/***/ }),\n","/* 135 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar toInteger = __webpack_require__(46);\n","\tvar defined = __webpack_require__(43);\n","\t// true  -> String#at\n","\t// false -> String#codePointAt\n","\tmodule.exports = function (TO_STRING) {\n","\t  return function (that, pos) {\n","\t    var s = String(defined(that));\n","\t    var i = toInteger(pos);\n","\t    var l = s.length;\n","\t    var a, b;\n","\t    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n","\t    a = s.charCodeAt(i);\n","\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n","\t      ? TO_STRING ? s.charAt(i) : a\n","\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 136 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar hide = __webpack_require__(17);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar $iterCreate = __webpack_require__(138);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\n","\tvar FF_ITERATOR = '@@iterator';\n","\tvar KEYS = 'keys';\n","\tvar VALUES = 'values';\n","\t\n","\tvar returnThis = function () { return this; };\n","\t\n","\tmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n","\t  $iterCreate(Constructor, NAME, next);\n","\t  var getMethod = function (kind) {\n","\t    if (!BUGGY && kind in proto) return proto[kind];\n","\t    switch (kind) {\n","\t      case KEYS: return function keys() { return new Constructor(this, kind); };\n","\t      case VALUES: return function values() { return new Constructor(this, kind); };\n","\t    } return function entries() { return new Constructor(this, kind); };\n","\t  };\n","\t  var TAG = NAME + ' Iterator';\n","\t  var DEF_VALUES = DEFAULT == VALUES;\n","\t  var VALUES_BUG = false;\n","\t  var proto = Base.prototype;\n","\t  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n","\t  var $default = $native || getMethod(DEFAULT);\n","\t  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n","\t  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n","\t  var methods, key, IteratorPrototype;\n","\t  // Fix native\n","\t  if ($anyNative) {\n","\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n","\t    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n","\t      // Set @@toStringTag to native iterators\n","\t      setToStringTag(IteratorPrototype, TAG, true);\n","\t      // fix for some old engines\n","\t      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n","\t    }\n","\t  }\n","\t  // fix Array#{values, @@iterator}.name in V8 / FF\n","\t  if (DEF_VALUES && $native && $native.name !== VALUES) {\n","\t    VALUES_BUG = true;\n","\t    $default = function values() { return $native.call(this); };\n","\t  }\n","\t  // Define iterator\n","\t  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n","\t    hide(proto, ITERATOR, $default);\n","\t  }\n","\t  // Plug for library\n","\t  Iterators[NAME] = $default;\n","\t  Iterators[TAG] = returnThis;\n","\t  if (DEFAULT) {\n","\t    methods = {\n","\t      values: DEF_VALUES ? $default : getMethod(VALUES),\n","\t      keys: IS_SET ? $default : getMethod(KEYS),\n","\t      entries: $entries\n","\t    };\n","\t    if (FORCED) for (key in methods) {\n","\t      if (!(key in proto)) redefine(proto, key, methods[key]);\n","\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n","\t  }\n","\t  return methods;\n","\t};\n","\n","\n","/***/ }),\n","/* 137 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = {};\n","\n","\n","/***/ }),\n","/* 138 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar create = __webpack_require__(53);\n","\tvar descriptor = __webpack_require__(24);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar IteratorPrototype = {};\n","\t\n","\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n","\t__webpack_require__(17)(IteratorPrototype, __webpack_require__(34)('iterator'), function () { return this; });\n","\t\n","\tmodule.exports = function (Constructor, NAME, next) {\n","\t  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n","\t  setToStringTag(Constructor, NAME + ' Iterator');\n","\t};\n","\n","\n","/***/ }),\n","/* 139 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $at = __webpack_require__(135)(false);\n","\t$export($export.P, 'String', {\n","\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n","\t  codePointAt: function codePointAt(pos) {\n","\t    return $at(this, pos);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 140 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toLength = __webpack_require__(45);\n","\tvar context = __webpack_require__(141);\n","\tvar ENDS_WITH = 'endsWith';\n","\tvar $endsWith = ''[ENDS_WITH];\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(ENDS_WITH), 'String', {\n","\t  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n","\t    var that = context(this, searchString, ENDS_WITH);\n","\t    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n","\t    var len = toLength(that.length);\n","\t    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n","\t    var search = String(searchString);\n","\t    return $endsWith\n","\t      ? $endsWith.call(that, search, end)\n","\t      : that.slice(end - search.length, end) === search;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 141 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// helper for String#{startsWith, endsWith, includes}\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function (that, searchString, NAME) {\n","\t  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n","\t  return String(defined(that));\n","\t};\n","\n","\n","/***/ }),\n","/* 142 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.2.8 IsRegExp(argument)\n","\tvar isObject = __webpack_require__(20);\n","\tvar cof = __webpack_require__(42);\n","\tvar MATCH = __webpack_require__(34)('match');\n","\tmodule.exports = function (it) {\n","\t  var isRegExp;\n","\t  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n","\t};\n","\n","\n","/***/ }),\n","/* 143 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar MATCH = __webpack_require__(34)('match');\n","\tmodule.exports = function (KEY) {\n","\t  var re = /./;\n","\t  try {\n","\t    '/./'[KEY](re);\n","\t  } catch (e) {\n","\t    try {\n","\t      re[MATCH] = false;\n","\t      return !'/./'[KEY](re);\n","\t    } catch (f) { /* empty */ }\n","\t  } return true;\n","\t};\n","\n","\n","/***/ }),\n","/* 144 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar context = __webpack_require__(141);\n","\tvar INCLUDES = 'includes';\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(INCLUDES), 'String', {\n","\t  includes: function includes(searchString /* , position = 0 */) {\n","\t    return !!~context(this, searchString, INCLUDES)\n","\t      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 145 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'String', {\n","\t  // 21.1.3.13 String.prototype.repeat(count)\n","\t  repeat: __webpack_require__(98)\n","\t});\n","\n","\n","/***/ }),\n","/* 146 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toLength = __webpack_require__(45);\n","\tvar context = __webpack_require__(141);\n","\tvar STARTS_WITH = 'startsWith';\n","\tvar $startsWith = ''[STARTS_WITH];\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(STARTS_WITH), 'String', {\n","\t  startsWith: function startsWith(searchString /* , position = 0 */) {\n","\t    var that = context(this, searchString, STARTS_WITH);\n","\t    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n","\t    var search = String(searchString);\n","\t    return $startsWith\n","\t      ? $startsWith.call(that, search, index)\n","\t      : that.slice(index, index + search.length) === search;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 147 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.2 String.prototype.anchor(name)\n","\t__webpack_require__(148)('anchor', function (createHTML) {\n","\t  return function anchor(name) {\n","\t    return createHTML(this, 'a', 'name', name);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 148 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar fails = __webpack_require__(14);\n","\tvar defined = __webpack_require__(43);\n","\tvar quot = /\"/g;\n","\t// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\n","\tvar createHTML = function (string, tag, attribute, value) {\n","\t  var S = String(defined(string));\n","\t  var p1 = '<' + tag;\n","\t  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n","\t  return p1 + '>' + S + '</' + tag + '>';\n","\t};\n","\tmodule.exports = function (NAME, exec) {\n","\t  var O = {};\n","\t  O[NAME] = exec(createHTML);\n","\t  $export($export.P + $export.F * fails(function () {\n","\t    var test = ''[NAME]('\"');\n","\t    return test !== test.toLowerCase() || test.split('\"').length > 3;\n","\t  }), 'String', O);\n","\t};\n","\n","\n","/***/ }),\n","/* 149 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.3 String.prototype.big()\n","\t__webpack_require__(148)('big', function (createHTML) {\n","\t  return function big() {\n","\t    return createHTML(this, 'big', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 150 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.4 String.prototype.blink()\n","\t__webpack_require__(148)('blink', function (createHTML) {\n","\t  return function blink() {\n","\t    return createHTML(this, 'blink', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 151 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.5 String.prototype.bold()\n","\t__webpack_require__(148)('bold', function (createHTML) {\n","\t  return function bold() {\n","\t    return createHTML(this, 'b', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 152 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.6 String.prototype.fixed()\n","\t__webpack_require__(148)('fixed', function (createHTML) {\n","\t  return function fixed() {\n","\t    return createHTML(this, 'tt', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 153 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.7 String.prototype.fontcolor(color)\n","\t__webpack_require__(148)('fontcolor', function (createHTML) {\n","\t  return function fontcolor(color) {\n","\t    return createHTML(this, 'font', 'color', color);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 154 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.8 String.prototype.fontsize(size)\n","\t__webpack_require__(148)('fontsize', function (createHTML) {\n","\t  return function fontsize(size) {\n","\t    return createHTML(this, 'font', 'size', size);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 155 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.9 String.prototype.italics()\n","\t__webpack_require__(148)('italics', function (createHTML) {\n","\t  return function italics() {\n","\t    return createHTML(this, 'i', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 156 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.10 String.prototype.link(url)\n","\t__webpack_require__(148)('link', function (createHTML) {\n","\t  return function link(url) {\n","\t    return createHTML(this, 'a', 'href', url);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 157 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.11 String.prototype.small()\n","\t__webpack_require__(148)('small', function (createHTML) {\n","\t  return function small() {\n","\t    return createHTML(this, 'small', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 158 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.12 String.prototype.strike()\n","\t__webpack_require__(148)('strike', function (createHTML) {\n","\t  return function strike() {\n","\t    return createHTML(this, 'strike', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 159 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.13 String.prototype.sub()\n","\t__webpack_require__(148)('sub', function (createHTML) {\n","\t  return function sub() {\n","\t    return createHTML(this, 'sub', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 160 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.14 String.prototype.sup()\n","\t__webpack_require__(148)('sup', function (createHTML) {\n","\t  return function sup() {\n","\t    return createHTML(this, 'sup', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 161 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.3.3.1 / 15.9.4.4 Date.now()\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","\n","\n","/***/ }),\n","/* 162 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(14)(function () {\n","\t  return new Date(NaN).toJSON() !== null\n","\t    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n","\t}), 'Date', {\n","\t  // eslint-disable-next-line no-unused-vars\n","\t  toJSON: function toJSON(key) {\n","\t    var O = toObject(this);\n","\t    var pv = toPrimitive(O);\n","\t    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 163 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n","\tvar $export = __webpack_require__(15);\n","\tvar toISOString = __webpack_require__(164);\n","\t\n","\t// PhantomJS / old WebKit has a broken implementations\n","\t$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n","\t  toISOString: toISOString\n","\t});\n","\n","\n","/***/ }),\n","/* 164 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n","\tvar fails = __webpack_require__(14);\n","\tvar getTime = Date.prototype.getTime;\n","\tvar $toISOString = Date.prototype.toISOString;\n","\t\n","\tvar lz = function (num) {\n","\t  return num > 9 ? num : '0' + num;\n","\t};\n","\t\n","\t// PhantomJS / old WebKit has a broken implementations\n","\tmodule.exports = (fails(function () {\n","\t  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n","\t}) || !fails(function () {\n","\t  $toISOString.call(new Date(NaN));\n","\t})) ? function toISOString() {\n","\t  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n","\t  var d = this;\n","\t  var y = d.getUTCFullYear();\n","\t  var m = d.getUTCMilliseconds();\n","\t  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n","\t  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n","\t    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n","\t    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n","\t    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n","\t} : $toISOString;\n","\n","\n","/***/ }),\n","/* 165 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar DateProto = Date.prototype;\n","\tvar INVALID_DATE = 'Invalid Date';\n","\tvar TO_STRING = 'toString';\n","\tvar $toString = DateProto[TO_STRING];\n","\tvar getTime = DateProto.getTime;\n","\tif (new Date(NaN) + '' != INVALID_DATE) {\n","\t  __webpack_require__(25)(DateProto, TO_STRING, function toString() {\n","\t    var value = getTime.call(this);\n","\t    // eslint-disable-next-line no-self-compare\n","\t    return value === value ? $toString.call(this) : INVALID_DATE;\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 166 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar TO_PRIMITIVE = __webpack_require__(34)('toPrimitive');\n","\tvar proto = Date.prototype;\n","\t\n","\tif (!(TO_PRIMITIVE in proto)) __webpack_require__(17)(proto, TO_PRIMITIVE, __webpack_require__(167));\n","\n","\n","/***/ }),\n","/* 167 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar anObject = __webpack_require__(19);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar NUMBER = 'number';\n","\t\n","\tmodule.exports = function (hint) {\n","\t  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n","\t  return toPrimitive(anObject(this), hint != NUMBER);\n","\t};\n","\n","\n","/***/ }),\n","/* 168 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Array', { isArray: __webpack_require__(52) });\n","\n","\n","/***/ }),\n","/* 169 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar ctx = __webpack_require__(30);\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar call = __webpack_require__(170);\n","\tvar isArrayIter = __webpack_require__(171);\n","\tvar toLength = __webpack_require__(45);\n","\tvar createProperty = __webpack_require__(172);\n","\tvar getIterFn = __webpack_require__(173);\n","\t\n","\t$export($export.S + $export.F * !__webpack_require__(174)(function (iter) { Array.from(iter); }), 'Array', {\n","\t  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n","\t  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n","\t    var O = toObject(arrayLike);\n","\t    var C = typeof this == 'function' ? this : Array;\n","\t    var aLen = arguments.length;\n","\t    var mapfn = aLen > 1 ? arguments[1] : undefined;\n","\t    var mapping = mapfn !== undefined;\n","\t    var index = 0;\n","\t    var iterFn = getIterFn(O);\n","\t    var length, result, step, iterator;\n","\t    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n","\t    // if object isn't iterable or it's array with default iterator - use simple case\n","\t    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n","\t      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n","\t        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n","\t      }\n","\t    } else {\n","\t      length = toLength(O.length);\n","\t      for (result = new C(length); length > index; index++) {\n","\t        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n","\t      }\n","\t    }\n","\t    result.length = index;\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 170 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// call something on iterator step with safe closing on error\n","\tvar anObject = __webpack_require__(19);\n","\tmodule.exports = function (iterator, fn, value, entries) {\n","\t  try {\n","\t    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n","\t  // 7.4.6 IteratorClose(iterator, completion)\n","\t  } catch (e) {\n","\t    var ret = iterator['return'];\n","\t    if (ret !== undefined) anObject(ret.call(iterator));\n","\t    throw e;\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 171 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// check on default Array iterator\n","\tvar Iterators = __webpack_require__(137);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar ArrayProto = Array.prototype;\n","\t\n","\tmodule.exports = function (it) {\n","\t  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n","\t};\n","\n","\n","/***/ }),\n","/* 172 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $defineProperty = __webpack_require__(18);\n","\tvar createDesc = __webpack_require__(24);\n","\t\n","\tmodule.exports = function (object, index, value) {\n","\t  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n","\t  else object[index] = value;\n","\t};\n","\n","\n","/***/ }),\n","/* 173 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar classof = __webpack_require__(82);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar Iterators = __webpack_require__(137);\n","\tmodule.exports = __webpack_require__(16).getIteratorMethod = function (it) {\n","\t  if (it != undefined) return it[ITERATOR]\n","\t    || it['@@iterator']\n","\t    || Iterators[classof(it)];\n","\t};\n","\n","\n","/***/ }),\n","/* 174 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar SAFE_CLOSING = false;\n","\t\n","\ttry {\n","\t  var riter = [7][ITERATOR]();\n","\t  riter['return'] = function () { SAFE_CLOSING = true; };\n","\t  // eslint-disable-next-line no-throw-literal\n","\t  Array.from(riter, function () { throw 2; });\n","\t} catch (e) { /* empty */ }\n","\t\n","\tmodule.exports = function (exec, skipClosing) {\n","\t  if (!skipClosing && !SAFE_CLOSING) return false;\n","\t  var safe = false;\n","\t  try {\n","\t    var arr = [7];\n","\t    var iter = arr[ITERATOR]();\n","\t    iter.next = function () { return { done: safe = true }; };\n","\t    arr[ITERATOR] = function () { return iter; };\n","\t    exec(arr);\n","\t  } catch (e) { /* empty */ }\n","\t  return safe;\n","\t};\n","\n","\n","/***/ }),\n","/* 175 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar createProperty = __webpack_require__(172);\n","\t\n","\t// WebKit Array.of isn't generic\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  function F() { /* empty */ }\n","\t  return !(Array.of.call(F) instanceof F);\n","\t}), 'Array', {\n","\t  // 22.1.2.3 Array.of( ...items)\n","\t  of: function of(/* ...args */) {\n","\t    var index = 0;\n","\t    var aLen = arguments.length;\n","\t    var result = new (typeof this == 'function' ? this : Array)(aLen);\n","\t    while (aLen > index) createProperty(result, index, arguments[index++]);\n","\t    result.length = aLen;\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 176 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.13 Array.prototype.join(separator)\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar arrayJoin = [].join;\n","\t\n","\t// fallback for not array-like strings\n","\t$export($export.P + $export.F * (__webpack_require__(41) != Object || !__webpack_require__(177)(arrayJoin)), 'Array', {\n","\t  join: function join(separator) {\n","\t    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 177 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar fails = __webpack_require__(14);\n","\t\n","\tmodule.exports = function (method, arg) {\n","\t  return !!method && fails(function () {\n","\t    // eslint-disable-next-line no-useless-call\n","\t    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n","\t  });\n","\t};\n","\n","\n","/***/ }),\n","/* 178 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar html = __webpack_require__(55);\n","\tvar cof = __webpack_require__(42);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tvar arraySlice = [].slice;\n","\t\n","\t// fallback for not array-like ES3 strings and DOM objects\n","\t$export($export.P + $export.F * __webpack_require__(14)(function () {\n","\t  if (html) arraySlice.call(html);\n","\t}), 'Array', {\n","\t  slice: function slice(begin, end) {\n","\t    var len = toLength(this.length);\n","\t    var klass = cof(this);\n","\t    end = end === undefined ? len : end;\n","\t    if (klass == 'Array') return arraySlice.call(this, begin, end);\n","\t    var start = toAbsoluteIndex(begin, len);\n","\t    var upTo = toAbsoluteIndex(end, len);\n","\t    var size = toLength(upTo - start);\n","\t    var cloned = new Array(size);\n","\t    var i = 0;\n","\t    for (; i < size; i++) cloned[i] = klass == 'String'\n","\t      ? this.charAt(start + i)\n","\t      : this[start + i];\n","\t    return cloned;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 179 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toObject = __webpack_require__(65);\n","\tvar fails = __webpack_require__(14);\n","\tvar $sort = [].sort;\n","\tvar test = [1, 2, 3];\n","\t\n","\t$export($export.P + $export.F * (fails(function () {\n","\t  // IE8-\n","\t  test.sort(undefined);\n","\t}) || !fails(function () {\n","\t  // V8 bug\n","\t  test.sort(null);\n","\t  // Old WebKit\n","\t}) || !__webpack_require__(177)($sort)), 'Array', {\n","\t  // 22.1.3.25 Array.prototype.sort(comparefn)\n","\t  sort: function sort(comparefn) {\n","\t    return comparefn === undefined\n","\t      ? $sort.call(toObject(this))\n","\t      : $sort.call(toObject(this), aFunction(comparefn));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 180 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $forEach = __webpack_require__(181)(0);\n","\tvar STRICT = __webpack_require__(177)([].forEach, true);\n","\t\n","\t$export($export.P + $export.F * !STRICT, 'Array', {\n","\t  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n","\t  forEach: function forEach(callbackfn /* , thisArg */) {\n","\t    return $forEach(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 181 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 0 -> Array#forEach\n","\t// 1 -> Array#map\n","\t// 2 -> Array#filter\n","\t// 3 -> Array#some\n","\t// 4 -> Array#every\n","\t// 5 -> Array#find\n","\t// 6 -> Array#findIndex\n","\tvar ctx = __webpack_require__(30);\n","\tvar IObject = __webpack_require__(41);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar asc = __webpack_require__(182);\n","\tmodule.exports = function (TYPE, $create) {\n","\t  var IS_MAP = TYPE == 1;\n","\t  var IS_FILTER = TYPE == 2;\n","\t  var IS_SOME = TYPE == 3;\n","\t  var IS_EVERY = TYPE == 4;\n","\t  var IS_FIND_INDEX = TYPE == 6;\n","\t  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n","\t  var create = $create || asc;\n","\t  return function ($this, callbackfn, that) {\n","\t    var O = toObject($this);\n","\t    var self = IObject(O);\n","\t    var f = ctx(callbackfn, that, 3);\n","\t    var length = toLength(self.length);\n","\t    var index = 0;\n","\t    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n","\t    var val, res;\n","\t    for (;length > index; index++) if (NO_HOLES || index in self) {\n","\t      val = self[index];\n","\t      res = f(val, index, O);\n","\t      if (TYPE) {\n","\t        if (IS_MAP) result[index] = res;   // map\n","\t        else if (res) switch (TYPE) {\n","\t          case 3: return true;             // some\n","\t          case 5: return val;              // find\n","\t          case 6: return index;            // findIndex\n","\t          case 2: result.push(val);        // filter\n","\t        } else if (IS_EVERY) return false; // every\n","\t      }\n","\t    }\n","\t    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 182 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n","\tvar speciesConstructor = __webpack_require__(183);\n","\t\n","\tmodule.exports = function (original, length) {\n","\t  return new (speciesConstructor(original))(length);\n","\t};\n","\n","\n","/***/ }),\n","/* 183 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar isArray = __webpack_require__(52);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\t\n","\tmodule.exports = function (original) {\n","\t  var C;\n","\t  if (isArray(original)) {\n","\t    C = original.constructor;\n","\t    // cross-realm fallback\n","\t    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n","\t    if (isObject(C)) {\n","\t      C = C[SPECIES];\n","\t      if (C === null) C = undefined;\n","\t    }\n","\t  } return C === undefined ? Array : C;\n","\t};\n","\n","\n","/***/ }),\n","/* 184 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $map = __webpack_require__(181)(1);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].map, true), 'Array', {\n","\t  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n","\t  map: function map(callbackfn /* , thisArg */) {\n","\t    return $map(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 185 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $filter = __webpack_require__(181)(2);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].filter, true), 'Array', {\n","\t  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n","\t  filter: function filter(callbackfn /* , thisArg */) {\n","\t    return $filter(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 186 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $some = __webpack_require__(181)(3);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].some, true), 'Array', {\n","\t  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n","\t  some: function some(callbackfn /* , thisArg */) {\n","\t    return $some(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 187 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $every = __webpack_require__(181)(4);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].every, true), 'Array', {\n","\t  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n","\t  every: function every(callbackfn /* , thisArg */) {\n","\t    return $every(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 188 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $reduce = __webpack_require__(189);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].reduce, true), 'Array', {\n","\t  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n","\t  reduce: function reduce(callbackfn /* , initialValue */) {\n","\t    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 189 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IObject = __webpack_require__(41);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\tmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n","\t  aFunction(callbackfn);\n","\t  var O = toObject(that);\n","\t  var self = IObject(O);\n","\t  var length = toLength(O.length);\n","\t  var index = isRight ? length - 1 : 0;\n","\t  var i = isRight ? -1 : 1;\n","\t  if (aLen < 2) for (;;) {\n","\t    if (index in self) {\n","\t      memo = self[index];\n","\t      index += i;\n","\t      break;\n","\t    }\n","\t    index += i;\n","\t    if (isRight ? index < 0 : length <= index) {\n","\t      throw TypeError('Reduce of empty array with no initial value');\n","\t    }\n","\t  }\n","\t  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n","\t    memo = callbackfn(memo, self[index], index, O);\n","\t  }\n","\t  return memo;\n","\t};\n","\n","\n","/***/ }),\n","/* 190 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $reduce = __webpack_require__(189);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].reduceRight, true), 'Array', {\n","\t  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n","\t  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n","\t    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 191 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $indexOf = __webpack_require__(44)(false);\n","\tvar $native = [].indexOf;\n","\tvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n","\t\n","\t$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(177)($native)), 'Array', {\n","\t  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n","\t  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n","\t    return NEGATIVE_ZERO\n","\t      // convert -0 to +0\n","\t      ? $native.apply(this, arguments) || 0\n","\t      : $indexOf(this, searchElement, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 192 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tvar $native = [].lastIndexOf;\n","\tvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n","\t\n","\t$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(177)($native)), 'Array', {\n","\t  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n","\t  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n","\t    // convert -0 to +0\n","\t    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n","\t    var O = toIObject(this);\n","\t    var length = toLength(O.length);\n","\t    var index = length - 1;\n","\t    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n","\t    if (index < 0) index = length + index;\n","\t    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n","\t    return -1;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 193 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Array', { copyWithin: __webpack_require__(194) });\n","\t\n","\t__webpack_require__(195)('copyWithin');\n","\n","\n","/***/ }),\n","/* 194 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n","\t'use strict';\n","\tvar toObject = __webpack_require__(65);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\tmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n","\t  var O = toObject(this);\n","\t  var len = toLength(O.length);\n","\t  var to = toAbsoluteIndex(target, len);\n","\t  var from = toAbsoluteIndex(start, len);\n","\t  var end = arguments.length > 2 ? arguments[2] : undefined;\n","\t  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n","\t  var inc = 1;\n","\t  if (from < to && to < from + count) {\n","\t    inc = -1;\n","\t    from += count - 1;\n","\t    to += count - 1;\n","\t  }\n","\t  while (count-- > 0) {\n","\t    if (from in O) O[to] = O[from];\n","\t    else delete O[to];\n","\t    to += inc;\n","\t    from += inc;\n","\t  } return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 195 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.31 Array.prototype[@@unscopables]\n","\tvar UNSCOPABLES = __webpack_require__(34)('unscopables');\n","\tvar ArrayProto = Array.prototype;\n","\tif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(17)(ArrayProto, UNSCOPABLES, {});\n","\tmodule.exports = function (key) {\n","\t  ArrayProto[UNSCOPABLES][key] = true;\n","\t};\n","\n","\n","/***/ }),\n","/* 196 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Array', { fill: __webpack_require__(197) });\n","\t\n","\t__webpack_require__(195)('fill');\n","\n","\n","/***/ }),\n","/* 197 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n","\t'use strict';\n","\tvar toObject = __webpack_require__(65);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tmodule.exports = function fill(value /* , start = 0, end = @length */) {\n","\t  var O = toObject(this);\n","\t  var length = toLength(O.length);\n","\t  var aLen = arguments.length;\n","\t  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n","\t  var end = aLen > 2 ? arguments[2] : undefined;\n","\t  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n","\t  while (endPos > index) O[index++] = value;\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 198 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n","\tvar $export = __webpack_require__(15);\n","\tvar $find = __webpack_require__(181)(5);\n","\tvar KEY = 'find';\n","\tvar forced = true;\n","\t// Shouldn't skip holes\n","\tif (KEY in []) Array(1)[KEY](function () { forced = false; });\n","\t$export($export.P + $export.F * forced, 'Array', {\n","\t  find: function find(callbackfn /* , that = undefined */) {\n","\t    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t__webpack_require__(195)(KEY);\n","\n","\n","/***/ }),\n","/* 199 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n","\tvar $export = __webpack_require__(15);\n","\tvar $find = __webpack_require__(181)(6);\n","\tvar KEY = 'findIndex';\n","\tvar forced = true;\n","\t// Shouldn't skip holes\n","\tif (KEY in []) Array(1)[KEY](function () { forced = false; });\n","\t$export($export.P + $export.F * forced, 'Array', {\n","\t  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n","\t    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t__webpack_require__(195)(KEY);\n","\n","\n","/***/ }),\n","/* 200 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(201)('Array');\n","\n","\n","/***/ }),\n","/* 201 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar dP = __webpack_require__(18);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\t\n","\tmodule.exports = function (KEY) {\n","\t  var C = global[KEY];\n","\t  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n","\t    configurable: true,\n","\t    get: function () { return this; }\n","\t  });\n","\t};\n","\n","\n","/***/ }),\n","/* 202 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar addToUnscopables = __webpack_require__(195);\n","\tvar step = __webpack_require__(203);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar toIObject = __webpack_require__(40);\n","\t\n","\t// 22.1.3.4 Array.prototype.entries()\n","\t// 22.1.3.13 Array.prototype.keys()\n","\t// 22.1.3.29 Array.prototype.values()\n","\t// 22.1.3.30 Array.prototype[@@iterator]()\n","\tmodule.exports = __webpack_require__(136)(Array, 'Array', function (iterated, kind) {\n","\t  this._t = toIObject(iterated); // target\n","\t  this._i = 0;                   // next index\n","\t  this._k = kind;                // kind\n","\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n","\t}, function () {\n","\t  var O = this._t;\n","\t  var kind = this._k;\n","\t  var index = this._i++;\n","\t  if (!O || index >= O.length) {\n","\t    this._t = undefined;\n","\t    return step(1);\n","\t  }\n","\t  if (kind == 'keys') return step(0, index);\n","\t  if (kind == 'values') return step(0, O[index]);\n","\t  return step(0, [index, O[index]]);\n","\t}, 'values');\n","\t\n","\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n","\tIterators.Arguments = Iterators.Array;\n","\t\n","\taddToUnscopables('keys');\n","\taddToUnscopables('values');\n","\taddToUnscopables('entries');\n","\n","\n","/***/ }),\n","/* 203 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (done, value) {\n","\t  return { value: value, done: !!done };\n","\t};\n","\n","\n","/***/ }),\n","/* 204 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\tvar dP = __webpack_require__(18).f;\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar $flags = __webpack_require__(205);\n","\tvar $RegExp = global.RegExp;\n","\tvar Base = $RegExp;\n","\tvar proto = $RegExp.prototype;\n","\tvar re1 = /a/g;\n","\tvar re2 = /a/g;\n","\t// \"new\" creates a new object, old webkit buggy here\n","\tvar CORRECT_NEW = new $RegExp(re1) !== re1;\n","\t\n","\tif (__webpack_require__(13) && (!CORRECT_NEW || __webpack_require__(14)(function () {\n","\t  re2[__webpack_require__(34)('match')] = false;\n","\t  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n","\t  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n","\t}))) {\n","\t  $RegExp = function RegExp(p, f) {\n","\t    var tiRE = this instanceof $RegExp;\n","\t    var piRE = isRegExp(p);\n","\t    var fiU = f === undefined;\n","\t    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n","\t      : inheritIfRequired(CORRECT_NEW\n","\t        ? new Base(piRE && !fiU ? p.source : p, f)\n","\t        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n","\t      , tiRE ? this : proto, $RegExp);\n","\t  };\n","\t  var proxy = function (key) {\n","\t    key in $RegExp || dP($RegExp, key, {\n","\t      configurable: true,\n","\t      get: function () { return Base[key]; },\n","\t      set: function (it) { Base[key] = it; }\n","\t    });\n","\t  };\n","\t  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n","\t  proto.constructor = $RegExp;\n","\t  $RegExp.prototype = proto;\n","\t  __webpack_require__(25)(global, 'RegExp', $RegExp);\n","\t}\n","\t\n","\t__webpack_require__(201)('RegExp');\n","\n","\n","/***/ }),\n","/* 205 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 21.2.5.3 get RegExp.prototype.flags\n","\tvar anObject = __webpack_require__(19);\n","\tmodule.exports = function () {\n","\t  var that = anObject(this);\n","\t  var result = '';\n","\t  if (that.global) result += 'g';\n","\t  if (that.ignoreCase) result += 'i';\n","\t  if (that.multiline) result += 'm';\n","\t  if (that.unicode) result += 'u';\n","\t  if (that.sticky) result += 'y';\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 206 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar regexpExec = __webpack_require__(207);\n","\t__webpack_require__(15)({\n","\t  target: 'RegExp',\n","\t  proto: true,\n","\t  forced: regexpExec !== /./.exec\n","\t}, {\n","\t  exec: regexpExec\n","\t});\n","\n","\n","/***/ }),\n","/* 207 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar regexpFlags = __webpack_require__(205);\n","\t\n","\tvar nativeExec = RegExp.prototype.exec;\n","\t// This always refers to the native implementation, because the\n","\t// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n","\t// which loads this file before patching the method.\n","\tvar nativeReplace = String.prototype.replace;\n","\t\n","\tvar patchedExec = nativeExec;\n","\t\n","\tvar LAST_INDEX = 'lastIndex';\n","\t\n","\tvar UPDATES_LAST_INDEX_WRONG = (function () {\n","\t  var re1 = /a/,\n","\t      re2 = /b*/g;\n","\t  nativeExec.call(re1, 'a');\n","\t  nativeExec.call(re2, 'a');\n","\t  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n","\t})();\n","\t\n","\t// nonparticipating capturing group, copied from es5-shim's String#split patch.\n","\tvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n","\t\n","\tvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n","\t\n","\tif (PATCH) {\n","\t  patchedExec = function exec(str) {\n","\t    var re = this;\n","\t    var lastIndex, reCopy, match, i;\n","\t\n","\t    if (NPCG_INCLUDED) {\n","\t      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n","\t    }\n","\t    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n","\t\n","\t    match = nativeExec.call(re, str);\n","\t\n","\t    if (UPDATES_LAST_INDEX_WRONG && match) {\n","\t      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n","\t    }\n","\t    if (NPCG_INCLUDED && match && match.length > 1) {\n","\t      // Fix browsers whose `exec` methods don't consistently return `undefined`\n","\t      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n","\t      // eslint-disable-next-line no-loop-func\n","\t      nativeReplace.call(match[0], reCopy, function () {\n","\t        for (i = 1; i < arguments.length - 2; i++) {\n","\t          if (arguments[i] === undefined) match[i] = undefined;\n","\t        }\n","\t      });\n","\t    }\n","\t\n","\t    return match;\n","\t  };\n","\t}\n","\t\n","\tmodule.exports = patchedExec;\n","\n","\n","/***/ }),\n","/* 208 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t__webpack_require__(209);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $flags = __webpack_require__(205);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar TO_STRING = 'toString';\n","\tvar $toString = /./[TO_STRING];\n","\t\n","\tvar define = function (fn) {\n","\t  __webpack_require__(25)(RegExp.prototype, TO_STRING, fn, true);\n","\t};\n","\t\n","\t// 21.2.5.14 RegExp.prototype.toString()\n","\tif (__webpack_require__(14)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n","\t  define(function toString() {\n","\t    var R = anObject(this);\n","\t    return '/'.concat(R.source, '/',\n","\t      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n","\t  });\n","\t// FF44- RegExp#toString has a wrong name\n","\t} else if ($toString.name != TO_STRING) {\n","\t  define(function toString() {\n","\t    return $toString.call(this);\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 209 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.2.5.3 get RegExp.prototype.flags()\n","\tif (__webpack_require__(13) && /./g.flags != 'g') __webpack_require__(18).f(RegExp.prototype, 'flags', {\n","\t  configurable: true,\n","\t  get: __webpack_require__(205)\n","\t});\n","\n","\n","/***/ }),\n","/* 210 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar toLength = __webpack_require__(45);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar regExpExec = __webpack_require__(212);\n","\t\n","\t// @@match logic\n","\t__webpack_require__(213)('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.match` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n","\t    function match(regexp) {\n","\t      var O = defined(this);\n","\t      var fn = regexp == undefined ? undefined : regexp[MATCH];\n","\t      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n","\t    },\n","\t    // `RegExp.prototype[@@match]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n","\t    function (regexp) {\n","\t      var res = maybeCallNative($match, regexp, this);\n","\t      if (res.done) return res.value;\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      if (!rx.global) return regExpExec(rx, S);\n","\t      var fullUnicode = rx.unicode;\n","\t      rx.lastIndex = 0;\n","\t      var A = [];\n","\t      var n = 0;\n","\t      var result;\n","\t      while ((result = regExpExec(rx, S)) !== null) {\n","\t        var matchStr = String(result[0]);\n","\t        A[n] = matchStr;\n","\t        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n","\t        n++;\n","\t      }\n","\t      return n === 0 ? null : A;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 211 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar at = __webpack_require__(135)(true);\n","\t\n","\t // `AdvanceStringIndex` abstract operation\n","\t// https://tc39.github.io/ecma262/#sec-advancestringindex\n","\tmodule.exports = function (S, index, unicode) {\n","\t  return index + (unicode ? at(S, index).length : 1);\n","\t};\n","\n","\n","/***/ }),\n","/* 212 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar classof = __webpack_require__(82);\n","\tvar builtinExec = RegExp.prototype.exec;\n","\t\n","\t // `RegExpExec` abstract operation\n","\t// https://tc39.github.io/ecma262/#sec-regexpexec\n","\tmodule.exports = function (R, S) {\n","\t  var exec = R.exec;\n","\t  if (typeof exec === 'function') {\n","\t    var result = exec.call(R, S);\n","\t    if (typeof result !== 'object') {\n","\t      throw new TypeError('RegExp exec method returned something other than an Object or null');\n","\t    }\n","\t    return result;\n","\t  }\n","\t  if (classof(R) !== 'RegExp') {\n","\t    throw new TypeError('RegExp#exec called on incompatible receiver');\n","\t  }\n","\t  return builtinExec.call(R, S);\n","\t};\n","\n","\n","/***/ }),\n","/* 213 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t__webpack_require__(206);\n","\tvar redefine = __webpack_require__(25);\n","\tvar hide = __webpack_require__(17);\n","\tvar fails = __webpack_require__(14);\n","\tvar defined = __webpack_require__(43);\n","\tvar wks = __webpack_require__(34);\n","\tvar regexpExec = __webpack_require__(207);\n","\t\n","\tvar SPECIES = wks('species');\n","\t\n","\tvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n","\t  // #replace needs built-in support for named groups.\n","\t  // #match works fine because it just return the exec results, even if it has\n","\t  // a \"grops\" property.\n","\t  var re = /./;\n","\t  re.exec = function () {\n","\t    var result = [];\n","\t    result.groups = { a: '7' };\n","\t    return result;\n","\t  };\n","\t  return ''.replace(re, '$<a>') !== '7';\n","\t});\n","\t\n","\tvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n","\t  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n","\t  var re = /(?:)/;\n","\t  var originalExec = re.exec;\n","\t  re.exec = function () { return originalExec.apply(this, arguments); };\n","\t  var result = 'ab'.split(re);\n","\t  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n","\t})();\n","\t\n","\tmodule.exports = function (KEY, length, exec) {\n","\t  var SYMBOL = wks(KEY);\n","\t\n","\t  var DELEGATES_TO_SYMBOL = !fails(function () {\n","\t    // String methods call symbol-named RegEp methods\n","\t    var O = {};\n","\t    O[SYMBOL] = function () { return 7; };\n","\t    return ''[KEY](O) != 7;\n","\t  });\n","\t\n","\t  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n","\t    // Symbol-named RegExp methods call .exec\n","\t    var execCalled = false;\n","\t    var re = /a/;\n","\t    re.exec = function () { execCalled = true; return null; };\n","\t    if (KEY === 'split') {\n","\t      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n","\t      // a new one. We need to return the patched regex when creating the new one.\n","\t      re.constructor = {};\n","\t      re.constructor[SPECIES] = function () { return re; };\n","\t    }\n","\t    re[SYMBOL]('');\n","\t    return !execCalled;\n","\t  }) : undefined;\n","\t\n","\t  if (\n","\t    !DELEGATES_TO_SYMBOL ||\n","\t    !DELEGATES_TO_EXEC ||\n","\t    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n","\t    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n","\t  ) {\n","\t    var nativeRegExpMethod = /./[SYMBOL];\n","\t    var fns = exec(\n","\t      defined,\n","\t      SYMBOL,\n","\t      ''[KEY],\n","\t      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n","\t        if (regexp.exec === regexpExec) {\n","\t          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n","\t            // The native String method already delegates to @@method (this\n","\t            // polyfilled function), leasing to infinite recursion.\n","\t            // We avoid it by directly calling the native @@method method.\n","\t            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n","\t          }\n","\t          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n","\t        }\n","\t        return { done: false };\n","\t      }\n","\t    );\n","\t    var strfn = fns[0];\n","\t    var rxfn = fns[1];\n","\t\n","\t    redefine(String.prototype, KEY, strfn);\n","\t    hide(RegExp.prototype, SYMBOL, length == 2\n","\t      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n","\t      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n","\t      ? function (string, arg) { return rxfn.call(string, this, arg); }\n","\t      // 21.2.5.6 RegExp.prototype[@@match](string)\n","\t      // 21.2.5.9 RegExp.prototype[@@search](string)\n","\t      : function (string) { return rxfn.call(string, this); }\n","\t    );\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 214 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar regExpExec = __webpack_require__(212);\n","\tvar max = Math.max;\n","\tvar min = Math.min;\n","\tvar floor = Math.floor;\n","\tvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\n","\tvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n","\t\n","\tvar maybeToString = function (it) {\n","\t  return it === undefined ? it : String(it);\n","\t};\n","\t\n","\t// @@replace logic\n","\t__webpack_require__(213)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.replace` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n","\t    function replace(searchValue, replaceValue) {\n","\t      var O = defined(this);\n","\t      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n","\t      return fn !== undefined\n","\t        ? fn.call(searchValue, O, replaceValue)\n","\t        : $replace.call(String(O), searchValue, replaceValue);\n","\t    },\n","\t    // `RegExp.prototype[@@replace]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n","\t    function (regexp, replaceValue) {\n","\t      var res = maybeCallNative($replace, regexp, this, replaceValue);\n","\t      if (res.done) return res.value;\n","\t\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var functionalReplace = typeof replaceValue === 'function';\n","\t      if (!functionalReplace) replaceValue = String(replaceValue);\n","\t      var global = rx.global;\n","\t      if (global) {\n","\t        var fullUnicode = rx.unicode;\n","\t        rx.lastIndex = 0;\n","\t      }\n","\t      var results = [];\n","\t      while (true) {\n","\t        var result = regExpExec(rx, S);\n","\t        if (result === null) break;\n","\t        results.push(result);\n","\t        if (!global) break;\n","\t        var matchStr = String(result[0]);\n","\t        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n","\t      }\n","\t      var accumulatedResult = '';\n","\t      var nextSourcePosition = 0;\n","\t      for (var i = 0; i < results.length; i++) {\n","\t        result = results[i];\n","\t        var matched = String(result[0]);\n","\t        var position = max(min(toInteger(result.index), S.length), 0);\n","\t        var captures = [];\n","\t        // NOTE: This is equivalent to\n","\t        //   captures = result.slice(1).map(maybeToString)\n","\t        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n","\t        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n","\t        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n","\t        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n","\t        var namedCaptures = result.groups;\n","\t        if (functionalReplace) {\n","\t          var replacerArgs = [matched].concat(captures, position, S);\n","\t          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n","\t          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n","\t        } else {\n","\t          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n","\t        }\n","\t        if (position >= nextSourcePosition) {\n","\t          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n","\t          nextSourcePosition = position + matched.length;\n","\t        }\n","\t      }\n","\t      return accumulatedResult + S.slice(nextSourcePosition);\n","\t    }\n","\t  ];\n","\t\n","\t    // https://tc39.github.io/ecma262/#sec-getsubstitution\n","\t  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n","\t    var tailPos = position + matched.length;\n","\t    var m = captures.length;\n","\t    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n","\t    if (namedCaptures !== undefined) {\n","\t      namedCaptures = toObject(namedCaptures);\n","\t      symbols = SUBSTITUTION_SYMBOLS;\n","\t    }\n","\t    return $replace.call(replacement, symbols, function (match, ch) {\n","\t      var capture;\n","\t      switch (ch.charAt(0)) {\n","\t        case '$': return '$';\n","\t        case '&': return matched;\n","\t        case '`': return str.slice(0, position);\n","\t        case \"'\": return str.slice(tailPos);\n","\t        case '<':\n","\t          capture = namedCaptures[ch.slice(1, -1)];\n","\t          break;\n","\t        default: // \\d\\d?\n","\t          var n = +ch;\n","\t          if (n === 0) return match;\n","\t          if (n > m) {\n","\t            var f = floor(n / 10);\n","\t            if (f === 0) return match;\n","\t            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n","\t            return match;\n","\t          }\n","\t          capture = captures[n - 1];\n","\t      }\n","\t      return capture === undefined ? '' : capture;\n","\t    });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 215 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar sameValue = __webpack_require__(78);\n","\tvar regExpExec = __webpack_require__(212);\n","\t\n","\t// @@search logic\n","\t__webpack_require__(213)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.search` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n","\t    function search(regexp) {\n","\t      var O = defined(this);\n","\t      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n","\t      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n","\t    },\n","\t    // `RegExp.prototype[@@search]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n","\t    function (regexp) {\n","\t      var res = maybeCallNative($search, regexp, this);\n","\t      if (res.done) return res.value;\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var previousLastIndex = rx.lastIndex;\n","\t      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n","\t      var result = regExpExec(rx, S);\n","\t      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n","\t      return result === null ? -1 : result.index;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 216 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar anObject = __webpack_require__(19);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar toLength = __webpack_require__(45);\n","\tvar callRegExpExec = __webpack_require__(212);\n","\tvar regexpExec = __webpack_require__(207);\n","\tvar fails = __webpack_require__(14);\n","\tvar $min = Math.min;\n","\tvar $push = [].push;\n","\tvar $SPLIT = 'split';\n","\tvar LENGTH = 'length';\n","\tvar LAST_INDEX = 'lastIndex';\n","\tvar MAX_UINT32 = 0xffffffff;\n","\t\n","\t// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n","\tvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n","\t\n","\t// @@split logic\n","\t__webpack_require__(213)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n","\t  var internalSplit;\n","\t  if (\n","\t    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n","\t    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n","\t    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n","\t    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n","\t    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n","\t    ''[$SPLIT](/.?/)[LENGTH]\n","\t  ) {\n","\t    // based on es5-shim implementation, need to rework it\n","\t    internalSplit = function (separator, limit) {\n","\t      var string = String(this);\n","\t      if (separator === undefined && limit === 0) return [];\n","\t      // If `separator` is not a regex, use native split\n","\t      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n","\t      var output = [];\n","\t      var flags = (separator.ignoreCase ? 'i' : '') +\n","\t                  (separator.multiline ? 'm' : '') +\n","\t                  (separator.unicode ? 'u' : '') +\n","\t                  (separator.sticky ? 'y' : '');\n","\t      var lastLastIndex = 0;\n","\t      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n","\t      // Make `global` and avoid `lastIndex` issues by working with a copy\n","\t      var separatorCopy = new RegExp(separator.source, flags + 'g');\n","\t      var match, lastIndex, lastLength;\n","\t      while (match = regexpExec.call(separatorCopy, string)) {\n","\t        lastIndex = separatorCopy[LAST_INDEX];\n","\t        if (lastIndex > lastLastIndex) {\n","\t          output.push(string.slice(lastLastIndex, match.index));\n","\t          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n","\t          lastLength = match[0][LENGTH];\n","\t          lastLastIndex = lastIndex;\n","\t          if (output[LENGTH] >= splitLimit) break;\n","\t        }\n","\t        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n","\t      }\n","\t      if (lastLastIndex === string[LENGTH]) {\n","\t        if (lastLength || !separatorCopy.test('')) output.push('');\n","\t      } else output.push(string.slice(lastLastIndex));\n","\t      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n","\t    };\n","\t  // Chakra, V8\n","\t  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n","\t    internalSplit = function (separator, limit) {\n","\t      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n","\t    };\n","\t  } else {\n","\t    internalSplit = $split;\n","\t  }\n","\t\n","\t  return [\n","\t    // `String.prototype.split` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n","\t    function split(separator, limit) {\n","\t      var O = defined(this);\n","\t      var splitter = separator == undefined ? undefined : separator[SPLIT];\n","\t      return splitter !== undefined\n","\t        ? splitter.call(separator, O, limit)\n","\t        : internalSplit.call(String(O), separator, limit);\n","\t    },\n","\t    // `RegExp.prototype[@@split]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n","\t    //\n","\t    // NOTE: This cannot be properly polyfilled in engines that don't support\n","\t    // the 'y' flag.\n","\t    function (regexp, limit) {\n","\t      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n","\t      if (res.done) return res.value;\n","\t\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var C = speciesConstructor(rx, RegExp);\n","\t\n","\t      var unicodeMatching = rx.unicode;\n","\t      var flags = (rx.ignoreCase ? 'i' : '') +\n","\t                  (rx.multiline ? 'm' : '') +\n","\t                  (rx.unicode ? 'u' : '') +\n","\t                  (SUPPORTS_Y ? 'y' : 'g');\n","\t\n","\t      // ^(? + rx + ) is needed, in combination with some S slicing, to\n","\t      // simulate the 'y' flag.\n","\t      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n","\t      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n","\t      if (lim === 0) return [];\n","\t      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n","\t      var p = 0;\n","\t      var q = 0;\n","\t      var A = [];\n","\t      while (q < S.length) {\n","\t        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n","\t        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n","\t        var e;\n","\t        if (\n","\t          z === null ||\n","\t          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n","\t        ) {\n","\t          q = advanceStringIndex(S, q, unicodeMatching);\n","\t        } else {\n","\t          A.push(S.slice(p, q));\n","\t          if (A.length === lim) return A;\n","\t          for (var i = 1; i <= z.length - 1; i++) {\n","\t            A.push(z[i]);\n","\t            if (A.length === lim) return A;\n","\t          }\n","\t          q = p = e;\n","\t        }\n","\t      }\n","\t      A.push(S.slice(p));\n","\t      return A;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 217 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.3.20 SpeciesConstructor(O, defaultConstructor)\n","\tvar anObject = __webpack_require__(19);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\tmodule.exports = function (O, D) {\n","\t  var C = anObject(O).constructor;\n","\t  var S;\n","\t  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n","\t};\n","\n","\n","/***/ }),\n","/* 218 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar global = __webpack_require__(11);\n","\tvar ctx = __webpack_require__(30);\n","\tvar classof = __webpack_require__(82);\n","\tvar $export = __webpack_require__(15);\n","\tvar isObject = __webpack_require__(20);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar task = __webpack_require__(221).set;\n","\tvar microtask = __webpack_require__(222)();\n","\tvar newPromiseCapabilityModule = __webpack_require__(223);\n","\tvar perform = __webpack_require__(224);\n","\tvar userAgent = __webpack_require__(225);\n","\tvar promiseResolve = __webpack_require__(226);\n","\tvar PROMISE = 'Promise';\n","\tvar TypeError = global.TypeError;\n","\tvar process = global.process;\n","\tvar versions = process && process.versions;\n","\tvar v8 = versions && versions.v8 || '';\n","\tvar $Promise = global[PROMISE];\n","\tvar isNode = classof(process) == 'process';\n","\tvar empty = function () { /* empty */ };\n","\tvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\n","\tvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n","\t\n","\tvar USE_NATIVE = !!function () {\n","\t  try {\n","\t    // correct subclassing with @@species support\n","\t    var promise = $Promise.resolve(1);\n","\t    var FakePromise = (promise.constructor = {})[__webpack_require__(34)('species')] = function (exec) {\n","\t      exec(empty, empty);\n","\t    };\n","\t    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n","\t    return (isNode || typeof PromiseRejectionEvent == 'function')\n","\t      && promise.then(empty) instanceof FakePromise\n","\t      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n","\t      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n","\t      // we can't detect it synchronously, so just check versions\n","\t      && v8.indexOf('6.6') !== 0\n","\t      && userAgent.indexOf('Chrome/66') === -1;\n","\t  } catch (e) { /* empty */ }\n","\t}();\n","\t\n","\t// helpers\n","\tvar isThenable = function (it) {\n","\t  var then;\n","\t  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n","\t};\n","\tvar notify = function (promise, isReject) {\n","\t  if (promise._n) return;\n","\t  promise._n = true;\n","\t  var chain = promise._c;\n","\t  microtask(function () {\n","\t    var value = promise._v;\n","\t    var ok = promise._s == 1;\n","\t    var i = 0;\n","\t    var run = function (reaction) {\n","\t      var handler = ok ? reaction.ok : reaction.fail;\n","\t      var resolve = reaction.resolve;\n","\t      var reject = reaction.reject;\n","\t      var domain = reaction.domain;\n","\t      var result, then, exited;\n","\t      try {\n","\t        if (handler) {\n","\t          if (!ok) {\n","\t            if (promise._h == 2) onHandleUnhandled(promise);\n","\t            promise._h = 1;\n","\t          }\n","\t          if (handler === true) result = value;\n","\t          else {\n","\t            if (domain) domain.enter();\n","\t            result = handler(value); // may throw\n","\t            if (domain) {\n","\t              domain.exit();\n","\t              exited = true;\n","\t            }\n","\t          }\n","\t          if (result === reaction.promise) {\n","\t            reject(TypeError('Promise-chain cycle'));\n","\t          } else if (then = isThenable(result)) {\n","\t            then.call(result, resolve, reject);\n","\t          } else resolve(result);\n","\t        } else reject(value);\n","\t      } catch (e) {\n","\t        if (domain && !exited) domain.exit();\n","\t        reject(e);\n","\t      }\n","\t    };\n","\t    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n","\t    promise._c = [];\n","\t    promise._n = false;\n","\t    if (isReject && !promise._h) onUnhandled(promise);\n","\t  });\n","\t};\n","\tvar onUnhandled = function (promise) {\n","\t  task.call(global, function () {\n","\t    var value = promise._v;\n","\t    var unhandled = isUnhandled(promise);\n","\t    var result, handler, console;\n","\t    if (unhandled) {\n","\t      result = perform(function () {\n","\t        if (isNode) {\n","\t          process.emit('unhandledRejection', value, promise);\n","\t        } else if (handler = global.onunhandledrejection) {\n","\t          handler({ promise: promise, reason: value });\n","\t        } else if ((console = global.console) && console.error) {\n","\t          console.error('Unhandled promise rejection', value);\n","\t        }\n","\t      });\n","\t      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n","\t      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n","\t    } promise._a = undefined;\n","\t    if (unhandled && result.e) throw result.v;\n","\t  });\n","\t};\n","\tvar isUnhandled = function (promise) {\n","\t  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n","\t};\n","\tvar onHandleUnhandled = function (promise) {\n","\t  task.call(global, function () {\n","\t    var handler;\n","\t    if (isNode) {\n","\t      process.emit('rejectionHandled', promise);\n","\t    } else if (handler = global.onrejectionhandled) {\n","\t      handler({ promise: promise, reason: promise._v });\n","\t    }\n","\t  });\n","\t};\n","\tvar $reject = function (value) {\n","\t  var promise = this;\n","\t  if (promise._d) return;\n","\t  promise._d = true;\n","\t  promise = promise._w || promise; // unwrap\n","\t  promise._v = value;\n","\t  promise._s = 2;\n","\t  if (!promise._a) promise._a = promise._c.slice();\n","\t  notify(promise, true);\n","\t};\n","\tvar $resolve = function (value) {\n","\t  var promise = this;\n","\t  var then;\n","\t  if (promise._d) return;\n","\t  promise._d = true;\n","\t  promise = promise._w || promise; // unwrap\n","\t  try {\n","\t    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n","\t    if (then = isThenable(value)) {\n","\t      microtask(function () {\n","\t        var wrapper = { _w: promise, _d: false }; // wrap\n","\t        try {\n","\t          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n","\t        } catch (e) {\n","\t          $reject.call(wrapper, e);\n","\t        }\n","\t      });\n","\t    } else {\n","\t      promise._v = value;\n","\t      promise._s = 1;\n","\t      notify(promise, false);\n","\t    }\n","\t  } catch (e) {\n","\t    $reject.call({ _w: promise, _d: false }, e); // wrap\n","\t  }\n","\t};\n","\t\n","\t// constructor polyfill\n","\tif (!USE_NATIVE) {\n","\t  // 25.4.3.1 Promise(executor)\n","\t  $Promise = function Promise(executor) {\n","\t    anInstance(this, $Promise, PROMISE, '_h');\n","\t    aFunction(executor);\n","\t    Internal.call(this);\n","\t    try {\n","\t      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n","\t    } catch (err) {\n","\t      $reject.call(this, err);\n","\t    }\n","\t  };\n","\t  // eslint-disable-next-line no-unused-vars\n","\t  Internal = function Promise(executor) {\n","\t    this._c = [];             // <- awaiting reactions\n","\t    this._a = undefined;      // <- checked in isUnhandled reactions\n","\t    this._s = 0;              // <- state\n","\t    this._d = false;          // <- done\n","\t    this._v = undefined;      // <- value\n","\t    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n","\t    this._n = false;          // <- notify\n","\t  };\n","\t  Internal.prototype = __webpack_require__(227)($Promise.prototype, {\n","\t    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n","\t    then: function then(onFulfilled, onRejected) {\n","\t      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n","\t      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n","\t      reaction.fail = typeof onRejected == 'function' && onRejected;\n","\t      reaction.domain = isNode ? process.domain : undefined;\n","\t      this._c.push(reaction);\n","\t      if (this._a) this._a.push(reaction);\n","\t      if (this._s) notify(this, false);\n","\t      return reaction.promise;\n","\t    },\n","\t    // 25.4.5.1 Promise.prototype.catch(onRejected)\n","\t    'catch': function (onRejected) {\n","\t      return this.then(undefined, onRejected);\n","\t    }\n","\t  });\n","\t  OwnPromiseCapability = function () {\n","\t    var promise = new Internal();\n","\t    this.promise = promise;\n","\t    this.resolve = ctx($resolve, promise, 1);\n","\t    this.reject = ctx($reject, promise, 1);\n","\t  };\n","\t  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n","\t    return C === $Promise || C === Wrapper\n","\t      ? new OwnPromiseCapability(C)\n","\t      : newGenericPromiseCapability(C);\n","\t  };\n","\t}\n","\t\n","\t$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n","\t__webpack_require__(33)($Promise, PROMISE);\n","\t__webpack_require__(201)(PROMISE);\n","\tWrapper = __webpack_require__(16)[PROMISE];\n","\t\n","\t// statics\n","\t$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n","\t  // 25.4.4.5 Promise.reject(r)\n","\t  reject: function reject(r) {\n","\t    var capability = newPromiseCapability(this);\n","\t    var $$reject = capability.reject;\n","\t    $$reject(r);\n","\t    return capability.promise;\n","\t  }\n","\t});\n","\t$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n","\t  // 25.4.4.6 Promise.resolve(x)\n","\t  resolve: function resolve(x) {\n","\t    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n","\t  }\n","\t});\n","\t$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(174)(function (iter) {\n","\t  $Promise.all(iter)['catch'](empty);\n","\t})), PROMISE, {\n","\t  // 25.4.4.1 Promise.all(iterable)\n","\t  all: function all(iterable) {\n","\t    var C = this;\n","\t    var capability = newPromiseCapability(C);\n","\t    var resolve = capability.resolve;\n","\t    var reject = capability.reject;\n","\t    var result = perform(function () {\n","\t      var values = [];\n","\t      var index = 0;\n","\t      var remaining = 1;\n","\t      forOf(iterable, false, function (promise) {\n","\t        var $index = index++;\n","\t        var alreadyCalled = false;\n","\t        values.push(undefined);\n","\t        remaining++;\n","\t        C.resolve(promise).then(function (value) {\n","\t          if (alreadyCalled) return;\n","\t          alreadyCalled = true;\n","\t          values[$index] = value;\n","\t          --remaining || resolve(values);\n","\t        }, reject);\n","\t      });\n","\t      --remaining || resolve(values);\n","\t    });\n","\t    if (result.e) reject(result.v);\n","\t    return capability.promise;\n","\t  },\n","\t  // 25.4.4.4 Promise.race(iterable)\n","\t  race: function race(iterable) {\n","\t    var C = this;\n","\t    var capability = newPromiseCapability(C);\n","\t    var reject = capability.reject;\n","\t    var result = perform(function () {\n","\t      forOf(iterable, false, function (promise) {\n","\t        C.resolve(promise).then(capability.resolve, reject);\n","\t      });\n","\t    });\n","\t    if (result.e) reject(result.v);\n","\t    return capability.promise;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 219 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it, Constructor, name, forbiddenField) {\n","\t  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n","\t    throw TypeError(name + ': incorrect invocation!');\n","\t  } return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 220 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ctx = __webpack_require__(30);\n","\tvar call = __webpack_require__(170);\n","\tvar isArrayIter = __webpack_require__(171);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toLength = __webpack_require__(45);\n","\tvar getIterFn = __webpack_require__(173);\n","\tvar BREAK = {};\n","\tvar RETURN = {};\n","\tvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n","\t  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n","\t  var f = ctx(fn, that, entries ? 2 : 1);\n","\t  var index = 0;\n","\t  var length, step, iterator, result;\n","\t  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n","\t  // fast case for arrays with default iterator\n","\t  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n","\t    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n","\t    if (result === BREAK || result === RETURN) return result;\n","\t  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n","\t    result = call(iterator, f, step.value, entries);\n","\t    if (result === BREAK || result === RETURN) return result;\n","\t  }\n","\t};\n","\texports.BREAK = BREAK;\n","\texports.RETURN = RETURN;\n","\n","\n","/***/ }),\n","/* 221 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ctx = __webpack_require__(30);\n","\tvar invoke = __webpack_require__(85);\n","\tvar html = __webpack_require__(55);\n","\tvar cel = __webpack_require__(22);\n","\tvar global = __webpack_require__(11);\n","\tvar process = global.process;\n","\tvar setTask = global.setImmediate;\n","\tvar clearTask = global.clearImmediate;\n","\tvar MessageChannel = global.MessageChannel;\n","\tvar Dispatch = global.Dispatch;\n","\tvar counter = 0;\n","\tvar queue = {};\n","\tvar ONREADYSTATECHANGE = 'onreadystatechange';\n","\tvar defer, channel, port;\n","\tvar run = function () {\n","\t  var id = +this;\n","\t  // eslint-disable-next-line no-prototype-builtins\n","\t  if (queue.hasOwnProperty(id)) {\n","\t    var fn = queue[id];\n","\t    delete queue[id];\n","\t    fn();\n","\t  }\n","\t};\n","\tvar listener = function (event) {\n","\t  run.call(event.data);\n","\t};\n","\t// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\n","\tif (!setTask || !clearTask) {\n","\t  setTask = function setImmediate(fn) {\n","\t    var args = [];\n","\t    var i = 1;\n","\t    while (arguments.length > i) args.push(arguments[i++]);\n","\t    queue[++counter] = function () {\n","\t      // eslint-disable-next-line no-new-func\n","\t      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n","\t    };\n","\t    defer(counter);\n","\t    return counter;\n","\t  };\n","\t  clearTask = function clearImmediate(id) {\n","\t    delete queue[id];\n","\t  };\n","\t  // Node.js 0.8-\n","\t  if (__webpack_require__(42)(process) == 'process') {\n","\t    defer = function (id) {\n","\t      process.nextTick(ctx(run, id, 1));\n","\t    };\n","\t  // Sphere (JS game engine) Dispatch API\n","\t  } else if (Dispatch && Dispatch.now) {\n","\t    defer = function (id) {\n","\t      Dispatch.now(ctx(run, id, 1));\n","\t    };\n","\t  // Browsers with MessageChannel, includes WebWorkers\n","\t  } else if (MessageChannel) {\n","\t    channel = new MessageChannel();\n","\t    port = channel.port2;\n","\t    channel.port1.onmessage = listener;\n","\t    defer = ctx(port.postMessage, port, 1);\n","\t  // Browsers with postMessage, skip WebWorkers\n","\t  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n","\t  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n","\t    defer = function (id) {\n","\t      global.postMessage(id + '', '*');\n","\t    };\n","\t    global.addEventListener('message', listener, false);\n","\t  // IE8-\n","\t  } else if (ONREADYSTATECHANGE in cel('script')) {\n","\t    defer = function (id) {\n","\t      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n","\t        html.removeChild(this);\n","\t        run.call(id);\n","\t      };\n","\t    };\n","\t  // Rest old browsers\n","\t  } else {\n","\t    defer = function (id) {\n","\t      setTimeout(ctx(run, id, 1), 0);\n","\t    };\n","\t  }\n","\t}\n","\tmodule.exports = {\n","\t  set: setTask,\n","\t  clear: clearTask\n","\t};\n","\n","\n","/***/ }),\n","/* 222 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar macrotask = __webpack_require__(221).set;\n","\tvar Observer = global.MutationObserver || global.WebKitMutationObserver;\n","\tvar process = global.process;\n","\tvar Promise = global.Promise;\n","\tvar isNode = __webpack_require__(42)(process) == 'process';\n","\t\n","\tmodule.exports = function () {\n","\t  var head, last, notify;\n","\t\n","\t  var flush = function () {\n","\t    var parent, fn;\n","\t    if (isNode && (parent = process.domain)) parent.exit();\n","\t    while (head) {\n","\t      fn = head.fn;\n","\t      head = head.next;\n","\t      try {\n","\t        fn();\n","\t      } catch (e) {\n","\t        if (head) notify();\n","\t        else last = undefined;\n","\t        throw e;\n","\t      }\n","\t    } last = undefined;\n","\t    if (parent) parent.enter();\n","\t  };\n","\t\n","\t  // Node.js\n","\t  if (isNode) {\n","\t    notify = function () {\n","\t      process.nextTick(flush);\n","\t    };\n","\t  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n","\t  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n","\t    var toggle = true;\n","\t    var node = document.createTextNode('');\n","\t    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n","\t    notify = function () {\n","\t      node.data = toggle = !toggle;\n","\t    };\n","\t  // environments with maybe non-completely correct, but existent Promise\n","\t  } else if (Promise && Promise.resolve) {\n","\t    // Promise.resolve without an argument throws an error in LG WebOS 2\n","\t    var promise = Promise.resolve(undefined);\n","\t    notify = function () {\n","\t      promise.then(flush);\n","\t    };\n","\t  // for other environments - macrotask based on:\n","\t  // - setImmediate\n","\t  // - MessageChannel\n","\t  // - window.postMessag\n","\t  // - onreadystatechange\n","\t  // - setTimeout\n","\t  } else {\n","\t    notify = function () {\n","\t      // strange IE + webpack dev server bug - use .call(global)\n","\t      macrotask.call(global, flush);\n","\t    };\n","\t  }\n","\t\n","\t  return function (fn) {\n","\t    var task = { fn: fn, next: undefined };\n","\t    if (last) last.next = task;\n","\t    if (!head) {\n","\t      head = task;\n","\t      notify();\n","\t    } last = task;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 223 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 25.4.1.5 NewPromiseCapability(C)\n","\tvar aFunction = __webpack_require__(31);\n","\t\n","\tfunction PromiseCapability(C) {\n","\t  var resolve, reject;\n","\t  this.promise = new C(function ($$resolve, $$reject) {\n","\t    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n","\t    resolve = $$resolve;\n","\t    reject = $$reject;\n","\t  });\n","\t  this.resolve = aFunction(resolve);\n","\t  this.reject = aFunction(reject);\n","\t}\n","\t\n","\tmodule.exports.f = function (C) {\n","\t  return new PromiseCapability(C);\n","\t};\n","\n","\n","/***/ }),\n","/* 224 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (exec) {\n","\t  try {\n","\t    return { e: false, v: exec() };\n","\t  } catch (e) {\n","\t    return { e: true, v: e };\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 225 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar navigator = global.navigator;\n","\t\n","\tmodule.exports = navigator && navigator.userAgent || '';\n","\n","\n","/***/ }),\n","/* 226 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar newPromiseCapability = __webpack_require__(223);\n","\t\n","\tmodule.exports = function (C, x) {\n","\t  anObject(C);\n","\t  if (isObject(x) && x.constructor === C) return x;\n","\t  var promiseCapability = newPromiseCapability.f(C);\n","\t  var resolve = promiseCapability.resolve;\n","\t  resolve(x);\n","\t  return promiseCapability.promise;\n","\t};\n","\n","\n","/***/ }),\n","/* 227 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar redefine = __webpack_require__(25);\n","\tmodule.exports = function (target, src, safe) {\n","\t  for (var key in src) redefine(target, key, src[key], safe);\n","\t  return target;\n","\t};\n","\n","\n","/***/ }),\n","/* 228 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar strong = __webpack_require__(229);\n","\tvar validate = __webpack_require__(230);\n","\tvar MAP = 'Map';\n","\t\n","\t// 23.1 Map Objects\n","\tmodule.exports = __webpack_require__(231)(MAP, function (get) {\n","\t  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.1.3.6 Map.prototype.get(key)\n","\t  get: function get(key) {\n","\t    var entry = strong.getEntry(validate(this, MAP), key);\n","\t    return entry && entry.v;\n","\t  },\n","\t  // 23.1.3.9 Map.prototype.set(key, value)\n","\t  set: function set(key, value) {\n","\t    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n","\t  }\n","\t}, strong, true);\n","\n","\n","/***/ }),\n","/* 229 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar dP = __webpack_require__(18).f;\n","\tvar create = __webpack_require__(53);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar ctx = __webpack_require__(30);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar $iterDefine = __webpack_require__(136);\n","\tvar step = __webpack_require__(203);\n","\tvar setSpecies = __webpack_require__(201);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar fastKey = __webpack_require__(32).fastKey;\n","\tvar validate = __webpack_require__(230);\n","\tvar SIZE = DESCRIPTORS ? '_s' : 'size';\n","\t\n","\tvar getEntry = function (that, key) {\n","\t  // fast case\n","\t  var index = fastKey(key);\n","\t  var entry;\n","\t  if (index !== 'F') return that._i[index];\n","\t  // frozen object case\n","\t  for (entry = that._f; entry; entry = entry.n) {\n","\t    if (entry.k == key) return entry;\n","\t  }\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n","\t    var C = wrapper(function (that, iterable) {\n","\t      anInstance(that, C, NAME, '_i');\n","\t      that._t = NAME;         // collection type\n","\t      that._i = create(null); // index\n","\t      that._f = undefined;    // first entry\n","\t      that._l = undefined;    // last entry\n","\t      that[SIZE] = 0;         // size\n","\t      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t    });\n","\t    redefineAll(C.prototype, {\n","\t      // 23.1.3.1 Map.prototype.clear()\n","\t      // 23.2.3.2 Set.prototype.clear()\n","\t      clear: function clear() {\n","\t        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n","\t          entry.r = true;\n","\t          if (entry.p) entry.p = entry.p.n = undefined;\n","\t          delete data[entry.i];\n","\t        }\n","\t        that._f = that._l = undefined;\n","\t        that[SIZE] = 0;\n","\t      },\n","\t      // 23.1.3.3 Map.prototype.delete(key)\n","\t      // 23.2.3.4 Set.prototype.delete(value)\n","\t      'delete': function (key) {\n","\t        var that = validate(this, NAME);\n","\t        var entry = getEntry(that, key);\n","\t        if (entry) {\n","\t          var next = entry.n;\n","\t          var prev = entry.p;\n","\t          delete that._i[entry.i];\n","\t          entry.r = true;\n","\t          if (prev) prev.n = next;\n","\t          if (next) next.p = prev;\n","\t          if (that._f == entry) that._f = next;\n","\t          if (that._l == entry) that._l = prev;\n","\t          that[SIZE]--;\n","\t        } return !!entry;\n","\t      },\n","\t      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n","\t      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n","\t      forEach: function forEach(callbackfn /* , that = undefined */) {\n","\t        validate(this, NAME);\n","\t        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n","\t        var entry;\n","\t        while (entry = entry ? entry.n : this._f) {\n","\t          f(entry.v, entry.k, this);\n","\t          // revert to the last existing entry\n","\t          while (entry && entry.r) entry = entry.p;\n","\t        }\n","\t      },\n","\t      // 23.1.3.7 Map.prototype.has(key)\n","\t      // 23.2.3.7 Set.prototype.has(value)\n","\t      has: function has(key) {\n","\t        return !!getEntry(validate(this, NAME), key);\n","\t      }\n","\t    });\n","\t    if (DESCRIPTORS) dP(C.prototype, 'size', {\n","\t      get: function () {\n","\t        return validate(this, NAME)[SIZE];\n","\t      }\n","\t    });\n","\t    return C;\n","\t  },\n","\t  def: function (that, key, value) {\n","\t    var entry = getEntry(that, key);\n","\t    var prev, index;\n","\t    // change existing entry\n","\t    if (entry) {\n","\t      entry.v = value;\n","\t    // create new entry\n","\t    } else {\n","\t      that._l = entry = {\n","\t        i: index = fastKey(key, true), // <- index\n","\t        k: key,                        // <- key\n","\t        v: value,                      // <- value\n","\t        p: prev = that._l,             // <- previous entry\n","\t        n: undefined,                  // <- next entry\n","\t        r: false                       // <- removed\n","\t      };\n","\t      if (!that._f) that._f = entry;\n","\t      if (prev) prev.n = entry;\n","\t      that[SIZE]++;\n","\t      // add to index\n","\t      if (index !== 'F') that._i[index] = entry;\n","\t    } return that;\n","\t  },\n","\t  getEntry: getEntry,\n","\t  setStrong: function (C, NAME, IS_MAP) {\n","\t    // add .keys, .values, .entries, [@@iterator]\n","\t    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n","\t    $iterDefine(C, NAME, function (iterated, kind) {\n","\t      this._t = validate(iterated, NAME); // target\n","\t      this._k = kind;                     // kind\n","\t      this._l = undefined;                // previous\n","\t    }, function () {\n","\t      var that = this;\n","\t      var kind = that._k;\n","\t      var entry = that._l;\n","\t      // revert to the last existing entry\n","\t      while (entry && entry.r) entry = entry.p;\n","\t      // get next entry\n","\t      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n","\t        // or finish the iteration\n","\t        that._t = undefined;\n","\t        return step(1);\n","\t      }\n","\t      // return step by kind\n","\t      if (kind == 'keys') return step(0, entry.k);\n","\t      if (kind == 'values') return step(0, entry.v);\n","\t      return step(0, [entry.k, entry.v]);\n","\t    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n","\t\n","\t    // add [@@species], 23.1.2.2, 23.2.2.2\n","\t    setSpecies(NAME);\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 230 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tmodule.exports = function (it, TYPE) {\n","\t  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 231 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar meta = __webpack_require__(32);\n","\tvar forOf = __webpack_require__(220);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar isObject = __webpack_require__(20);\n","\tvar fails = __webpack_require__(14);\n","\tvar $iterDetect = __webpack_require__(174);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\t\n","\tmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n","\t  var Base = global[NAME];\n","\t  var C = Base;\n","\t  var ADDER = IS_MAP ? 'set' : 'add';\n","\t  var proto = C && C.prototype;\n","\t  var O = {};\n","\t  var fixMethod = function (KEY) {\n","\t    var fn = proto[KEY];\n","\t    redefine(proto, KEY,\n","\t      KEY == 'delete' ? function (a) {\n","\t        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'has' ? function has(a) {\n","\t        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'get' ? function get(a) {\n","\t        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n","\t        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n","\t    );\n","\t  };\n","\t  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n","\t    new C().entries().next();\n","\t  }))) {\n","\t    // create collection constructor\n","\t    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n","\t    redefineAll(C.prototype, methods);\n","\t    meta.NEED = true;\n","\t  } else {\n","\t    var instance = new C();\n","\t    // early implementations not supports chaining\n","\t    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n","\t    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n","\t    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n","\t    // most early implementations doesn't supports iterables, most modern - not close it correctly\n","\t    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n","\t    // for early implementations -0 and +0 not the same\n","\t    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n","\t      // V8 ~ Chromium 42- fails only with 5+ elements\n","\t      var $instance = new C();\n","\t      var index = 5;\n","\t      while (index--) $instance[ADDER](index, index);\n","\t      return !$instance.has(-0);\n","\t    });\n","\t    if (!ACCEPT_ITERABLES) {\n","\t      C = wrapper(function (target, iterable) {\n","\t        anInstance(target, C, NAME);\n","\t        var that = inheritIfRequired(new Base(), target, C);\n","\t        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t        return that;\n","\t      });\n","\t      C.prototype = proto;\n","\t      proto.constructor = C;\n","\t    }\n","\t    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n","\t      fixMethod('delete');\n","\t      fixMethod('has');\n","\t      IS_MAP && fixMethod('get');\n","\t    }\n","\t    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n","\t    // weak collections should not contains .clear method\n","\t    if (IS_WEAK && proto.clear) delete proto.clear;\n","\t  }\n","\t\n","\t  setToStringTag(C, NAME);\n","\t\n","\t  O[NAME] = C;\n","\t  $export($export.G + $export.W + $export.F * (C != Base), O);\n","\t\n","\t  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n","\t\n","\t  return C;\n","\t};\n","\n","\n","/***/ }),\n","/* 232 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar strong = __webpack_require__(229);\n","\tvar validate = __webpack_require__(230);\n","\tvar SET = 'Set';\n","\t\n","\t// 23.2 Set Objects\n","\tmodule.exports = __webpack_require__(231)(SET, function (get) {\n","\t  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.2.3.1 Set.prototype.add(value)\n","\t  add: function add(value) {\n","\t    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n","\t  }\n","\t}, strong);\n","\n","\n","/***/ }),\n","/* 233 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar each = __webpack_require__(181)(0);\n","\tvar redefine = __webpack_require__(25);\n","\tvar meta = __webpack_require__(32);\n","\tvar assign = __webpack_require__(76);\n","\tvar weak = __webpack_require__(234);\n","\tvar isObject = __webpack_require__(20);\n","\tvar validate = __webpack_require__(230);\n","\tvar NATIVE_WEAK_MAP = __webpack_require__(230);\n","\tvar IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;\n","\tvar WEAK_MAP = 'WeakMap';\n","\tvar getWeak = meta.getWeak;\n","\tvar isExtensible = Object.isExtensible;\n","\tvar uncaughtFrozenStore = weak.ufstore;\n","\tvar InternalMap;\n","\t\n","\tvar wrapper = function (get) {\n","\t  return function WeakMap() {\n","\t    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n","\t  };\n","\t};\n","\t\n","\tvar methods = {\n","\t  // 23.3.3.3 WeakMap.prototype.get(key)\n","\t  get: function get(key) {\n","\t    if (isObject(key)) {\n","\t      var data = getWeak(key);\n","\t      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n","\t      return data ? data[this._i] : undefined;\n","\t    }\n","\t  },\n","\t  // 23.3.3.5 WeakMap.prototype.set(key, value)\n","\t  set: function set(key, value) {\n","\t    return weak.def(validate(this, WEAK_MAP), key, value);\n","\t  }\n","\t};\n","\t\n","\t// 23.3 WeakMap Objects\n","\tvar $WeakMap = module.exports = __webpack_require__(231)(WEAK_MAP, wrapper, methods, weak, true, true);\n","\t\n","\t// IE11 WeakMap frozen keys fix\n","\tif (NATIVE_WEAK_MAP && IS_IE11) {\n","\t  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n","\t  assign(InternalMap.prototype, methods);\n","\t  meta.NEED = true;\n","\t  each(['delete', 'has', 'get', 'set'], function (key) {\n","\t    var proto = $WeakMap.prototype;\n","\t    var method = proto[key];\n","\t    redefine(proto, key, function (a, b) {\n","\t      // store frozen objects on internal weakmap shim\n","\t      if (isObject(a) && !isExtensible(a)) {\n","\t        if (!this._f) this._f = new InternalMap();\n","\t        var result = this._f[key](a, b);\n","\t        return key == 'set' ? this : result;\n","\t      // store all the rest on native weakmap\n","\t      } return method.call(this, a, b);\n","\t    });\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 234 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar getWeak = __webpack_require__(32).getWeak;\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar createArrayMethod = __webpack_require__(181);\n","\tvar $has = __webpack_require__(12);\n","\tvar validate = __webpack_require__(230);\n","\tvar arrayFind = createArrayMethod(5);\n","\tvar arrayFindIndex = createArrayMethod(6);\n","\tvar id = 0;\n","\t\n","\t// fallback for uncaught frozen keys\n","\tvar uncaughtFrozenStore = function (that) {\n","\t  return that._l || (that._l = new UncaughtFrozenStore());\n","\t};\n","\tvar UncaughtFrozenStore = function () {\n","\t  this.a = [];\n","\t};\n","\tvar findUncaughtFrozen = function (store, key) {\n","\t  return arrayFind(store.a, function (it) {\n","\t    return it[0] === key;\n","\t  });\n","\t};\n","\tUncaughtFrozenStore.prototype = {\n","\t  get: function (key) {\n","\t    var entry = findUncaughtFrozen(this, key);\n","\t    if (entry) return entry[1];\n","\t  },\n","\t  has: function (key) {\n","\t    return !!findUncaughtFrozen(this, key);\n","\t  },\n","\t  set: function (key, value) {\n","\t    var entry = findUncaughtFrozen(this, key);\n","\t    if (entry) entry[1] = value;\n","\t    else this.a.push([key, value]);\n","\t  },\n","\t  'delete': function (key) {\n","\t    var index = arrayFindIndex(this.a, function (it) {\n","\t      return it[0] === key;\n","\t    });\n","\t    if (~index) this.a.splice(index, 1);\n","\t    return !!~index;\n","\t  }\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n","\t    var C = wrapper(function (that, iterable) {\n","\t      anInstance(that, C, NAME, '_i');\n","\t      that._t = NAME;      // collection type\n","\t      that._i = id++;      // collection id\n","\t      that._l = undefined; // leak store for uncaught frozen objects\n","\t      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t    });\n","\t    redefineAll(C.prototype, {\n","\t      // 23.3.3.2 WeakMap.prototype.delete(key)\n","\t      // 23.4.3.3 WeakSet.prototype.delete(value)\n","\t      'delete': function (key) {\n","\t        if (!isObject(key)) return false;\n","\t        var data = getWeak(key);\n","\t        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n","\t        return data && $has(data, this._i) && delete data[this._i];\n","\t      },\n","\t      // 23.3.3.4 WeakMap.prototype.has(key)\n","\t      // 23.4.3.4 WeakSet.prototype.has(value)\n","\t      has: function has(key) {\n","\t        if (!isObject(key)) return false;\n","\t        var data = getWeak(key);\n","\t        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n","\t        return data && $has(data, this._i);\n","\t      }\n","\t    });\n","\t    return C;\n","\t  },\n","\t  def: function (that, key, value) {\n","\t    var data = getWeak(anObject(key), true);\n","\t    if (data === true) uncaughtFrozenStore(that).set(key, value);\n","\t    else data[that._i] = value;\n","\t    return that;\n","\t  },\n","\t  ufstore: uncaughtFrozenStore\n","\t};\n","\n","\n","/***/ }),\n","/* 235 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar weak = __webpack_require__(234);\n","\tvar validate = __webpack_require__(230);\n","\tvar WEAK_SET = 'WeakSet';\n","\t\n","\t// 23.4 WeakSet Objects\n","\t__webpack_require__(231)(WEAK_SET, function (get) {\n","\t  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.4.3.1 WeakSet.prototype.add(value)\n","\t  add: function add(value) {\n","\t    return weak.def(validate(this, WEAK_SET), value, true);\n","\t  }\n","\t}, weak, false, true);\n","\n","\n","/***/ }),\n","/* 236 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $typed = __webpack_require__(237);\n","\tvar buffer = __webpack_require__(238);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tvar isObject = __webpack_require__(20);\n","\tvar ArrayBuffer = __webpack_require__(11).ArrayBuffer;\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar $ArrayBuffer = buffer.ArrayBuffer;\n","\tvar $DataView = buffer.DataView;\n","\tvar $isView = $typed.ABV && ArrayBuffer.isView;\n","\tvar $slice = $ArrayBuffer.prototype.slice;\n","\tvar VIEW = $typed.VIEW;\n","\tvar ARRAY_BUFFER = 'ArrayBuffer';\n","\t\n","\t$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n","\t\n","\t$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n","\t  // 24.1.3.1 ArrayBuffer.isView(arg)\n","\t  isView: function isView(it) {\n","\t    return $isView && $isView(it) || isObject(it) && VIEW in it;\n","\t  }\n","\t});\n","\t\n","\t$export($export.P + $export.U + $export.F * __webpack_require__(14)(function () {\n","\t  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n","\t}), ARRAY_BUFFER, {\n","\t  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n","\t  slice: function slice(start, end) {\n","\t    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n","\t    var len = anObject(this).byteLength;\n","\t    var first = toAbsoluteIndex(start, len);\n","\t    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n","\t    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n","\t    var viewS = new $DataView(this);\n","\t    var viewT = new $DataView(result);\n","\t    var index = 0;\n","\t    while (first < fin) {\n","\t      viewT.setUint8(index++, viewS.getUint8(first++));\n","\t    } return result;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(201)(ARRAY_BUFFER);\n","\n","\n","/***/ }),\n","/* 237 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar uid = __webpack_require__(26);\n","\tvar TYPED = uid('typed_array');\n","\tvar VIEW = uid('view');\n","\tvar ABV = !!(global.ArrayBuffer && global.DataView);\n","\tvar CONSTR = ABV;\n","\tvar i = 0;\n","\tvar l = 9;\n","\tvar Typed;\n","\t\n","\tvar TypedArrayConstructors = (\n","\t  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n","\t).split(',');\n","\t\n","\twhile (i < l) {\n","\t  if (Typed = global[TypedArrayConstructors[i++]]) {\n","\t    hide(Typed.prototype, TYPED, true);\n","\t    hide(Typed.prototype, VIEW, true);\n","\t  } else CONSTR = false;\n","\t}\n","\t\n","\tmodule.exports = {\n","\t  ABV: ABV,\n","\t  CONSTR: CONSTR,\n","\t  TYPED: TYPED,\n","\t  VIEW: VIEW\n","\t};\n","\n","\n","/***/ }),\n","/* 238 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar $typed = __webpack_require__(237);\n","\tvar hide = __webpack_require__(17);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar fails = __webpack_require__(14);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toIndex = __webpack_require__(239);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar dP = __webpack_require__(18).f;\n","\tvar arrayFill = __webpack_require__(197);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar ARRAY_BUFFER = 'ArrayBuffer';\n","\tvar DATA_VIEW = 'DataView';\n","\tvar PROTOTYPE = 'prototype';\n","\tvar WRONG_LENGTH = 'Wrong length!';\n","\tvar WRONG_INDEX = 'Wrong index!';\n","\tvar $ArrayBuffer = global[ARRAY_BUFFER];\n","\tvar $DataView = global[DATA_VIEW];\n","\tvar Math = global.Math;\n","\tvar RangeError = global.RangeError;\n","\t// eslint-disable-next-line no-shadow-restricted-names\n","\tvar Infinity = global.Infinity;\n","\tvar BaseBuffer = $ArrayBuffer;\n","\tvar abs = Math.abs;\n","\tvar pow = Math.pow;\n","\tvar floor = Math.floor;\n","\tvar log = Math.log;\n","\tvar LN2 = Math.LN2;\n","\tvar BUFFER = 'buffer';\n","\tvar BYTE_LENGTH = 'byteLength';\n","\tvar BYTE_OFFSET = 'byteOffset';\n","\tvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\n","\tvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\n","\tvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n","\t\n","\t// IEEE754 conversions based on https://github.com/feross/ieee754\n","\tfunction packIEEE754(value, mLen, nBytes) {\n","\t  var buffer = new Array(nBytes);\n","\t  var eLen = nBytes * 8 - mLen - 1;\n","\t  var eMax = (1 << eLen) - 1;\n","\t  var eBias = eMax >> 1;\n","\t  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n","\t  var i = 0;\n","\t  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n","\t  var e, m, c;\n","\t  value = abs(value);\n","\t  // eslint-disable-next-line no-self-compare\n","\t  if (value != value || value === Infinity) {\n","\t    // eslint-disable-next-line no-self-compare\n","\t    m = value != value ? 1 : 0;\n","\t    e = eMax;\n","\t  } else {\n","\t    e = floor(log(value) / LN2);\n","\t    if (value * (c = pow(2, -e)) < 1) {\n","\t      e--;\n","\t      c *= 2;\n","\t    }\n","\t    if (e + eBias >= 1) {\n","\t      value += rt / c;\n","\t    } else {\n","\t      value += rt * pow(2, 1 - eBias);\n","\t    }\n","\t    if (value * c >= 2) {\n","\t      e++;\n","\t      c /= 2;\n","\t    }\n","\t    if (e + eBias >= eMax) {\n","\t      m = 0;\n","\t      e = eMax;\n","\t    } else if (e + eBias >= 1) {\n","\t      m = (value * c - 1) * pow(2, mLen);\n","\t      e = e + eBias;\n","\t    } else {\n","\t      m = value * pow(2, eBias - 1) * pow(2, mLen);\n","\t      e = 0;\n","\t    }\n","\t  }\n","\t  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n","\t  e = e << mLen | m;\n","\t  eLen += mLen;\n","\t  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n","\t  buffer[--i] |= s * 128;\n","\t  return buffer;\n","\t}\n","\tfunction unpackIEEE754(buffer, mLen, nBytes) {\n","\t  var eLen = nBytes * 8 - mLen - 1;\n","\t  var eMax = (1 << eLen) - 1;\n","\t  var eBias = eMax >> 1;\n","\t  var nBits = eLen - 7;\n","\t  var i = nBytes - 1;\n","\t  var s = buffer[i--];\n","\t  var e = s & 127;\n","\t  var m;\n","\t  s >>= 7;\n","\t  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n","\t  m = e & (1 << -nBits) - 1;\n","\t  e >>= -nBits;\n","\t  nBits += mLen;\n","\t  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n","\t  if (e === 0) {\n","\t    e = 1 - eBias;\n","\t  } else if (e === eMax) {\n","\t    return m ? NaN : s ? -Infinity : Infinity;\n","\t  } else {\n","\t    m = m + pow(2, mLen);\n","\t    e = e - eBias;\n","\t  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n","\t}\n","\t\n","\tfunction unpackI32(bytes) {\n","\t  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n","\t}\n","\tfunction packI8(it) {\n","\t  return [it & 0xff];\n","\t}\n","\tfunction packI16(it) {\n","\t  return [it & 0xff, it >> 8 & 0xff];\n","\t}\n","\tfunction packI32(it) {\n","\t  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n","\t}\n","\tfunction packF64(it) {\n","\t  return packIEEE754(it, 52, 8);\n","\t}\n","\tfunction packF32(it) {\n","\t  return packIEEE754(it, 23, 4);\n","\t}\n","\t\n","\tfunction addGetter(C, key, internal) {\n","\t  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n","\t}\n","\t\n","\tfunction get(view, bytes, index, isLittleEndian) {\n","\t  var numIndex = +index;\n","\t  var intIndex = toIndex(numIndex);\n","\t  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n","\t  var store = view[$BUFFER]._b;\n","\t  var start = intIndex + view[$OFFSET];\n","\t  var pack = store.slice(start, start + bytes);\n","\t  return isLittleEndian ? pack : pack.reverse();\n","\t}\n","\tfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n","\t  var numIndex = +index;\n","\t  var intIndex = toIndex(numIndex);\n","\t  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n","\t  var store = view[$BUFFER]._b;\n","\t  var start = intIndex + view[$OFFSET];\n","\t  var pack = conversion(+value);\n","\t  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n","\t}\n","\t\n","\tif (!$typed.ABV) {\n","\t  $ArrayBuffer = function ArrayBuffer(length) {\n","\t    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n","\t    var byteLength = toIndex(length);\n","\t    this._b = arrayFill.call(new Array(byteLength), 0);\n","\t    this[$LENGTH] = byteLength;\n","\t  };\n","\t\n","\t  $DataView = function DataView(buffer, byteOffset, byteLength) {\n","\t    anInstance(this, $DataView, DATA_VIEW);\n","\t    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n","\t    var bufferLength = buffer[$LENGTH];\n","\t    var offset = toInteger(byteOffset);\n","\t    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n","\t    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n","\t    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n","\t    this[$BUFFER] = buffer;\n","\t    this[$OFFSET] = offset;\n","\t    this[$LENGTH] = byteLength;\n","\t  };\n","\t\n","\t  if (DESCRIPTORS) {\n","\t    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n","\t    addGetter($DataView, BUFFER, '_b');\n","\t    addGetter($DataView, BYTE_LENGTH, '_l');\n","\t    addGetter($DataView, BYTE_OFFSET, '_o');\n","\t  }\n","\t\n","\t  redefineAll($DataView[PROTOTYPE], {\n","\t    getInt8: function getInt8(byteOffset) {\n","\t      return get(this, 1, byteOffset)[0] << 24 >> 24;\n","\t    },\n","\t    getUint8: function getUint8(byteOffset) {\n","\t      return get(this, 1, byteOffset)[0];\n","\t    },\n","\t    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n","\t      var bytes = get(this, 2, byteOffset, arguments[1]);\n","\t      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n","\t    },\n","\t    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n","\t      var bytes = get(this, 2, byteOffset, arguments[1]);\n","\t      return bytes[1] << 8 | bytes[0];\n","\t    },\n","\t    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n","\t      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n","\t    },\n","\t    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n","\t      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n","\t    },\n","\t    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n","\t      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n","\t    },\n","\t    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n","\t      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n","\t    },\n","\t    setInt8: function setInt8(byteOffset, value) {\n","\t      set(this, 1, byteOffset, packI8, value);\n","\t    },\n","\t    setUint8: function setUint8(byteOffset, value) {\n","\t      set(this, 1, byteOffset, packI8, value);\n","\t    },\n","\t    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 2, byteOffset, packI16, value, arguments[2]);\n","\t    },\n","\t    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 2, byteOffset, packI16, value, arguments[2]);\n","\t    },\n","\t    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packI32, value, arguments[2]);\n","\t    },\n","\t    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packI32, value, arguments[2]);\n","\t    },\n","\t    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packF32, value, arguments[2]);\n","\t    },\n","\t    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 8, byteOffset, packF64, value, arguments[2]);\n","\t    }\n","\t  });\n","\t} else {\n","\t  if (!fails(function () {\n","\t    $ArrayBuffer(1);\n","\t  }) || !fails(function () {\n","\t    new $ArrayBuffer(-1); // eslint-disable-line no-new\n","\t  }) || fails(function () {\n","\t    new $ArrayBuffer(); // eslint-disable-line no-new\n","\t    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n","\t    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n","\t    return $ArrayBuffer.name != ARRAY_BUFFER;\n","\t  })) {\n","\t    $ArrayBuffer = function ArrayBuffer(length) {\n","\t      anInstance(this, $ArrayBuffer);\n","\t      return new BaseBuffer(toIndex(length));\n","\t    };\n","\t    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n","\t    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n","\t      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n","\t    }\n","\t    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n","\t  }\n","\t  // iOS Safari 7.x bug\n","\t  var view = new $DataView(new $ArrayBuffer(2));\n","\t  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n","\t  view.setInt8(0, 2147483648);\n","\t  view.setInt8(1, 2147483649);\n","\t  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n","\t    setInt8: function setInt8(byteOffset, value) {\n","\t      $setInt8.call(this, byteOffset, value << 24 >> 24);\n","\t    },\n","\t    setUint8: function setUint8(byteOffset, value) {\n","\t      $setInt8.call(this, byteOffset, value << 24 >> 24);\n","\t    }\n","\t  }, true);\n","\t}\n","\tsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\n","\tsetToStringTag($DataView, DATA_VIEW);\n","\thide($DataView[PROTOTYPE], $typed.VIEW, true);\n","\texports[ARRAY_BUFFER] = $ArrayBuffer;\n","\texports[DATA_VIEW] = $DataView;\n","\n","\n","/***/ }),\n","/* 239 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/ecma262/#sec-toindex\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tmodule.exports = function (it) {\n","\t  if (it === undefined) return 0;\n","\t  var number = toInteger(it);\n","\t  var length = toLength(number);\n","\t  if (number !== length) throw RangeError('Wrong length!');\n","\t  return length;\n","\t};\n","\n","\n","/***/ }),\n","/* 240 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.G + $export.W + $export.F * !__webpack_require__(237).ABV, {\n","\t  DataView: __webpack_require__(238).DataView\n","\t});\n","\n","\n","/***/ }),\n","/* 241 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int8', 1, function (init) {\n","\t  return function Int8Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 242 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tif (__webpack_require__(13)) {\n","\t  var LIBRARY = __webpack_require__(29);\n","\t  var global = __webpack_require__(11);\n","\t  var fails = __webpack_require__(14);\n","\t  var $export = __webpack_require__(15);\n","\t  var $typed = __webpack_require__(237);\n","\t  var $buffer = __webpack_require__(238);\n","\t  var ctx = __webpack_require__(30);\n","\t  var anInstance = __webpack_require__(219);\n","\t  var propertyDesc = __webpack_require__(24);\n","\t  var hide = __webpack_require__(17);\n","\t  var redefineAll = __webpack_require__(227);\n","\t  var toInteger = __webpack_require__(46);\n","\t  var toLength = __webpack_require__(45);\n","\t  var toIndex = __webpack_require__(239);\n","\t  var toAbsoluteIndex = __webpack_require__(47);\n","\t  var toPrimitive = __webpack_require__(23);\n","\t  var has = __webpack_require__(12);\n","\t  var classof = __webpack_require__(82);\n","\t  var isObject = __webpack_require__(20);\n","\t  var toObject = __webpack_require__(65);\n","\t  var isArrayIter = __webpack_require__(171);\n","\t  var create = __webpack_require__(53);\n","\t  var getPrototypeOf = __webpack_require__(66);\n","\t  var gOPN = __webpack_require__(57).f;\n","\t  var getIterFn = __webpack_require__(173);\n","\t  var uid = __webpack_require__(26);\n","\t  var wks = __webpack_require__(34);\n","\t  var createArrayMethod = __webpack_require__(181);\n","\t  var createArrayIncludes = __webpack_require__(44);\n","\t  var speciesConstructor = __webpack_require__(217);\n","\t  var ArrayIterators = __webpack_require__(202);\n","\t  var Iterators = __webpack_require__(137);\n","\t  var $iterDetect = __webpack_require__(174);\n","\t  var setSpecies = __webpack_require__(201);\n","\t  var arrayFill = __webpack_require__(197);\n","\t  var arrayCopyWithin = __webpack_require__(194);\n","\t  var $DP = __webpack_require__(18);\n","\t  var $GOPD = __webpack_require__(58);\n","\t  var dP = $DP.f;\n","\t  var gOPD = $GOPD.f;\n","\t  var RangeError = global.RangeError;\n","\t  var TypeError = global.TypeError;\n","\t  var Uint8Array = global.Uint8Array;\n","\t  var ARRAY_BUFFER = 'ArrayBuffer';\n","\t  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n","\t  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n","\t  var PROTOTYPE = 'prototype';\n","\t  var ArrayProto = Array[PROTOTYPE];\n","\t  var $ArrayBuffer = $buffer.ArrayBuffer;\n","\t  var $DataView = $buffer.DataView;\n","\t  var arrayForEach = createArrayMethod(0);\n","\t  var arrayFilter = createArrayMethod(2);\n","\t  var arraySome = createArrayMethod(3);\n","\t  var arrayEvery = createArrayMethod(4);\n","\t  var arrayFind = createArrayMethod(5);\n","\t  var arrayFindIndex = createArrayMethod(6);\n","\t  var arrayIncludes = createArrayIncludes(true);\n","\t  var arrayIndexOf = createArrayIncludes(false);\n","\t  var arrayValues = ArrayIterators.values;\n","\t  var arrayKeys = ArrayIterators.keys;\n","\t  var arrayEntries = ArrayIterators.entries;\n","\t  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n","\t  var arrayReduce = ArrayProto.reduce;\n","\t  var arrayReduceRight = ArrayProto.reduceRight;\n","\t  var arrayJoin = ArrayProto.join;\n","\t  var arraySort = ArrayProto.sort;\n","\t  var arraySlice = ArrayProto.slice;\n","\t  var arrayToString = ArrayProto.toString;\n","\t  var arrayToLocaleString = ArrayProto.toLocaleString;\n","\t  var ITERATOR = wks('iterator');\n","\t  var TAG = wks('toStringTag');\n","\t  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n","\t  var DEF_CONSTRUCTOR = uid('def_constructor');\n","\t  var ALL_CONSTRUCTORS = $typed.CONSTR;\n","\t  var TYPED_ARRAY = $typed.TYPED;\n","\t  var VIEW = $typed.VIEW;\n","\t  var WRONG_LENGTH = 'Wrong length!';\n","\t\n","\t  var $map = createArrayMethod(1, function (O, length) {\n","\t    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n","\t  });\n","\t\n","\t  var LITTLE_ENDIAN = fails(function () {\n","\t    // eslint-disable-next-line no-undef\n","\t    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n","\t  });\n","\t\n","\t  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n","\t    new Uint8Array(1).set({});\n","\t  });\n","\t\n","\t  var toOffset = function (it, BYTES) {\n","\t    var offset = toInteger(it);\n","\t    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n","\t    return offset;\n","\t  };\n","\t\n","\t  var validate = function (it) {\n","\t    if (isObject(it) && TYPED_ARRAY in it) return it;\n","\t    throw TypeError(it + ' is not a typed array!');\n","\t  };\n","\t\n","\t  var allocate = function (C, length) {\n","\t    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n","\t      throw TypeError('It is not a typed array constructor!');\n","\t    } return new C(length);\n","\t  };\n","\t\n","\t  var speciesFromList = function (O, list) {\n","\t    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n","\t  };\n","\t\n","\t  var fromList = function (C, list) {\n","\t    var index = 0;\n","\t    var length = list.length;\n","\t    var result = allocate(C, length);\n","\t    while (length > index) result[index] = list[index++];\n","\t    return result;\n","\t  };\n","\t\n","\t  var addGetter = function (it, key, internal) {\n","\t    dP(it, key, { get: function () { return this._d[internal]; } });\n","\t  };\n","\t\n","\t  var $from = function from(source /* , mapfn, thisArg */) {\n","\t    var O = toObject(source);\n","\t    var aLen = arguments.length;\n","\t    var mapfn = aLen > 1 ? arguments[1] : undefined;\n","\t    var mapping = mapfn !== undefined;\n","\t    var iterFn = getIterFn(O);\n","\t    var i, length, values, result, step, iterator;\n","\t    if (iterFn != undefined && !isArrayIter(iterFn)) {\n","\t      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n","\t        values.push(step.value);\n","\t      } O = values;\n","\t    }\n","\t    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n","\t    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n","\t      result[i] = mapping ? mapfn(O[i], i) : O[i];\n","\t    }\n","\t    return result;\n","\t  };\n","\t\n","\t  var $of = function of(/* ...items */) {\n","\t    var index = 0;\n","\t    var length = arguments.length;\n","\t    var result = allocate(this, length);\n","\t    while (length > index) result[index] = arguments[index++];\n","\t    return result;\n","\t  };\n","\t\n","\t  // iOS Safari 6.x fails here\n","\t  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n","\t\n","\t  var $toLocaleString = function toLocaleString() {\n","\t    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n","\t  };\n","\t\n","\t  var proto = {\n","\t    copyWithin: function copyWithin(target, start /* , end */) {\n","\t      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n","\t    },\n","\t    every: function every(callbackfn /* , thisArg */) {\n","\t      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n","\t      return arrayFill.apply(validate(this), arguments);\n","\t    },\n","\t    filter: function filter(callbackfn /* , thisArg */) {\n","\t      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n","\t        arguments.length > 1 ? arguments[1] : undefined));\n","\t    },\n","\t    find: function find(predicate /* , thisArg */) {\n","\t      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    findIndex: function findIndex(predicate /* , thisArg */) {\n","\t      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    forEach: function forEach(callbackfn /* , thisArg */) {\n","\t      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    indexOf: function indexOf(searchElement /* , fromIndex */) {\n","\t      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    includes: function includes(searchElement /* , fromIndex */) {\n","\t      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    join: function join(separator) { // eslint-disable-line no-unused-vars\n","\t      return arrayJoin.apply(validate(this), arguments);\n","\t    },\n","\t    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n","\t      return arrayLastIndexOf.apply(validate(this), arguments);\n","\t    },\n","\t    map: function map(mapfn /* , thisArg */) {\n","\t      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n","\t      return arrayReduce.apply(validate(this), arguments);\n","\t    },\n","\t    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n","\t      return arrayReduceRight.apply(validate(this), arguments);\n","\t    },\n","\t    reverse: function reverse() {\n","\t      var that = this;\n","\t      var length = validate(that).length;\n","\t      var middle = Math.floor(length / 2);\n","\t      var index = 0;\n","\t      var value;\n","\t      while (index < middle) {\n","\t        value = that[index];\n","\t        that[index++] = that[--length];\n","\t        that[length] = value;\n","\t      } return that;\n","\t    },\n","\t    some: function some(callbackfn /* , thisArg */) {\n","\t      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    sort: function sort(comparefn) {\n","\t      return arraySort.call(validate(this), comparefn);\n","\t    },\n","\t    subarray: function subarray(begin, end) {\n","\t      var O = validate(this);\n","\t      var length = O.length;\n","\t      var $begin = toAbsoluteIndex(begin, length);\n","\t      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n","\t        O.buffer,\n","\t        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n","\t        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n","\t      );\n","\t    }\n","\t  };\n","\t\n","\t  var $slice = function slice(start, end) {\n","\t    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n","\t  };\n","\t\n","\t  var $set = function set(arrayLike /* , offset */) {\n","\t    validate(this);\n","\t    var offset = toOffset(arguments[1], 1);\n","\t    var length = this.length;\n","\t    var src = toObject(arrayLike);\n","\t    var len = toLength(src.length);\n","\t    var index = 0;\n","\t    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n","\t    while (index < len) this[offset + index] = src[index++];\n","\t  };\n","\t\n","\t  var $iterators = {\n","\t    entries: function entries() {\n","\t      return arrayEntries.call(validate(this));\n","\t    },\n","\t    keys: function keys() {\n","\t      return arrayKeys.call(validate(this));\n","\t    },\n","\t    values: function values() {\n","\t      return arrayValues.call(validate(this));\n","\t    }\n","\t  };\n","\t\n","\t  var isTAIndex = function (target, key) {\n","\t    return isObject(target)\n","\t      && target[TYPED_ARRAY]\n","\t      && typeof key != 'symbol'\n","\t      && key in target\n","\t      && String(+key) == String(key);\n","\t  };\n","\t  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n","\t    return isTAIndex(target, key = toPrimitive(key, true))\n","\t      ? propertyDesc(2, target[key])\n","\t      : gOPD(target, key);\n","\t  };\n","\t  var $setDesc = function defineProperty(target, key, desc) {\n","\t    if (isTAIndex(target, key = toPrimitive(key, true))\n","\t      && isObject(desc)\n","\t      && has(desc, 'value')\n","\t      && !has(desc, 'get')\n","\t      && !has(desc, 'set')\n","\t      // TODO: add validation descriptor w/o calling accessors\n","\t      && !desc.configurable\n","\t      && (!has(desc, 'writable') || desc.writable)\n","\t      && (!has(desc, 'enumerable') || desc.enumerable)\n","\t    ) {\n","\t      target[key] = desc.value;\n","\t      return target;\n","\t    } return dP(target, key, desc);\n","\t  };\n","\t\n","\t  if (!ALL_CONSTRUCTORS) {\n","\t    $GOPD.f = $getDesc;\n","\t    $DP.f = $setDesc;\n","\t  }\n","\t\n","\t  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n","\t    getOwnPropertyDescriptor: $getDesc,\n","\t    defineProperty: $setDesc\n","\t  });\n","\t\n","\t  if (fails(function () { arrayToString.call({}); })) {\n","\t    arrayToString = arrayToLocaleString = function toString() {\n","\t      return arrayJoin.call(this);\n","\t    };\n","\t  }\n","\t\n","\t  var $TypedArrayPrototype$ = redefineAll({}, proto);\n","\t  redefineAll($TypedArrayPrototype$, $iterators);\n","\t  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n","\t  redefineAll($TypedArrayPrototype$, {\n","\t    slice: $slice,\n","\t    set: $set,\n","\t    constructor: function () { /* noop */ },\n","\t    toString: arrayToString,\n","\t    toLocaleString: $toLocaleString\n","\t  });\n","\t  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n","\t  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n","\t  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n","\t  addGetter($TypedArrayPrototype$, 'length', 'e');\n","\t  dP($TypedArrayPrototype$, TAG, {\n","\t    get: function () { return this[TYPED_ARRAY]; }\n","\t  });\n","\t\n","\t  // eslint-disable-next-line max-statements\n","\t  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n","\t    CLAMPED = !!CLAMPED;\n","\t    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n","\t    var GETTER = 'get' + KEY;\n","\t    var SETTER = 'set' + KEY;\n","\t    var TypedArray = global[NAME];\n","\t    var Base = TypedArray || {};\n","\t    var TAC = TypedArray && getPrototypeOf(TypedArray);\n","\t    var FORCED = !TypedArray || !$typed.ABV;\n","\t    var O = {};\n","\t    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n","\t    var getter = function (that, index) {\n","\t      var data = that._d;\n","\t      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n","\t    };\n","\t    var setter = function (that, index, value) {\n","\t      var data = that._d;\n","\t      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n","\t      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n","\t    };\n","\t    var addElement = function (that, index) {\n","\t      dP(that, index, {\n","\t        get: function () {\n","\t          return getter(this, index);\n","\t        },\n","\t        set: function (value) {\n","\t          return setter(this, index, value);\n","\t        },\n","\t        enumerable: true\n","\t      });\n","\t    };\n","\t    if (FORCED) {\n","\t      TypedArray = wrapper(function (that, data, $offset, $length) {\n","\t        anInstance(that, TypedArray, NAME, '_d');\n","\t        var index = 0;\n","\t        var offset = 0;\n","\t        var buffer, byteLength, length, klass;\n","\t        if (!isObject(data)) {\n","\t          length = toIndex(data);\n","\t          byteLength = length * BYTES;\n","\t          buffer = new $ArrayBuffer(byteLength);\n","\t        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n","\t          buffer = data;\n","\t          offset = toOffset($offset, BYTES);\n","\t          var $len = data.byteLength;\n","\t          if ($length === undefined) {\n","\t            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n","\t            byteLength = $len - offset;\n","\t            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n","\t          } else {\n","\t            byteLength = toLength($length) * BYTES;\n","\t            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n","\t          }\n","\t          length = byteLength / BYTES;\n","\t        } else if (TYPED_ARRAY in data) {\n","\t          return fromList(TypedArray, data);\n","\t        } else {\n","\t          return $from.call(TypedArray, data);\n","\t        }\n","\t        hide(that, '_d', {\n","\t          b: buffer,\n","\t          o: offset,\n","\t          l: byteLength,\n","\t          e: length,\n","\t          v: new $DataView(buffer)\n","\t        });\n","\t        while (index < length) addElement(that, index++);\n","\t      });\n","\t      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n","\t      hide(TypedArrayPrototype, 'constructor', TypedArray);\n","\t    } else if (!fails(function () {\n","\t      TypedArray(1);\n","\t    }) || !fails(function () {\n","\t      new TypedArray(-1); // eslint-disable-line no-new\n","\t    }) || !$iterDetect(function (iter) {\n","\t      new TypedArray(); // eslint-disable-line no-new\n","\t      new TypedArray(null); // eslint-disable-line no-new\n","\t      new TypedArray(1.5); // eslint-disable-line no-new\n","\t      new TypedArray(iter); // eslint-disable-line no-new\n","\t    }, true)) {\n","\t      TypedArray = wrapper(function (that, data, $offset, $length) {\n","\t        anInstance(that, TypedArray, NAME);\n","\t        var klass;\n","\t        // `ws` module bug, temporarily remove validation length for Uint8Array\n","\t        // https://github.com/websockets/ws/pull/645\n","\t        if (!isObject(data)) return new Base(toIndex(data));\n","\t        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n","\t          return $length !== undefined\n","\t            ? new Base(data, toOffset($offset, BYTES), $length)\n","\t            : $offset !== undefined\n","\t              ? new Base(data, toOffset($offset, BYTES))\n","\t              : new Base(data);\n","\t        }\n","\t        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n","\t        return $from.call(TypedArray, data);\n","\t      });\n","\t      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n","\t        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n","\t      });\n","\t      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n","\t      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n","\t    }\n","\t    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n","\t    var CORRECT_ITER_NAME = !!$nativeIterator\n","\t      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n","\t    var $iterator = $iterators.values;\n","\t    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n","\t    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n","\t    hide(TypedArrayPrototype, VIEW, true);\n","\t    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n","\t\n","\t    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n","\t      dP(TypedArrayPrototype, TAG, {\n","\t        get: function () { return NAME; }\n","\t      });\n","\t    }\n","\t\n","\t    O[NAME] = TypedArray;\n","\t\n","\t    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n","\t\n","\t    $export($export.S, NAME, {\n","\t      BYTES_PER_ELEMENT: BYTES\n","\t    });\n","\t\n","\t    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n","\t      from: $from,\n","\t      of: $of\n","\t    });\n","\t\n","\t    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n","\t\n","\t    $export($export.P, NAME, proto);\n","\t\n","\t    setSpecies(NAME);\n","\t\n","\t    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n","\t\n","\t    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n","\t\n","\t    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n","\t\n","\t    $export($export.P + $export.F * fails(function () {\n","\t      new TypedArray(1).slice();\n","\t    }), NAME, { slice: $slice });\n","\t\n","\t    $export($export.P + $export.F * (fails(function () {\n","\t      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n","\t    }) || !fails(function () {\n","\t      TypedArrayPrototype.toLocaleString.call([1, 2]);\n","\t    })), NAME, { toLocaleString: $toLocaleString });\n","\t\n","\t    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n","\t    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n","\t  };\n","\t} else module.exports = function () { /* empty */ };\n","\n","\n","/***/ }),\n","/* 243 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint8', 1, function (init) {\n","\t  return function Uint8Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 244 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint8', 1, function (init) {\n","\t  return function Uint8ClampedArray(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t}, true);\n","\n","\n","/***/ }),\n","/* 245 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int16', 2, function (init) {\n","\t  return function Int16Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 246 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint16', 2, function (init) {\n","\t  return function Uint16Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 247 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int32', 4, function (init) {\n","\t  return function Int32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 248 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint32', 4, function (init) {\n","\t  return function Uint32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 249 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Float32', 4, function (init) {\n","\t  return function Float32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 250 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Float64', 8, function (init) {\n","\t  return function Float64Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 251 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar rApply = (__webpack_require__(11).Reflect || {}).apply;\n","\tvar fApply = Function.apply;\n","\t// MS Edge argumentsList argument is optional\n","\t$export($export.S + $export.F * !__webpack_require__(14)(function () {\n","\t  rApply(function () { /* empty */ });\n","\t}), 'Reflect', {\n","\t  apply: function apply(target, thisArgument, argumentsList) {\n","\t    var T = aFunction(target);\n","\t    var L = anObject(argumentsList);\n","\t    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 252 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\n","\tvar $export = __webpack_require__(15);\n","\tvar create = __webpack_require__(53);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar fails = __webpack_require__(14);\n","\tvar bind = __webpack_require__(84);\n","\tvar rConstruct = (__webpack_require__(11).Reflect || {}).construct;\n","\t\n","\t// MS Edge supports only 2 arguments and argumentsList argument is optional\n","\t// FF Nightly sets third argument as `new.target`, but does not create `this` from it\n","\tvar NEW_TARGET_BUG = fails(function () {\n","\t  function F() { /* empty */ }\n","\t  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n","\t});\n","\tvar ARGS_BUG = !fails(function () {\n","\t  rConstruct(function () { /* empty */ });\n","\t});\n","\t\n","\t$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n","\t  construct: function construct(Target, args /* , newTarget */) {\n","\t    aFunction(Target);\n","\t    anObject(args);\n","\t    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n","\t    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n","\t    if (Target == newTarget) {\n","\t      // w/o altered newTarget, optimization for 0-4 arguments\n","\t      switch (args.length) {\n","\t        case 0: return new Target();\n","\t        case 1: return new Target(args[0]);\n","\t        case 2: return new Target(args[0], args[1]);\n","\t        case 3: return new Target(args[0], args[1], args[2]);\n","\t        case 4: return new Target(args[0], args[1], args[2], args[3]);\n","\t      }\n","\t      // w/o altered newTarget, lot of arguments case\n","\t      var $args = [null];\n","\t      $args.push.apply($args, args);\n","\t      return new (bind.apply(Target, $args))();\n","\t    }\n","\t    // with altered newTarget, not support built-in constructors\n","\t    var proto = newTarget.prototype;\n","\t    var instance = create(isObject(proto) ? proto : Object.prototype);\n","\t    var result = Function.apply.call(Target, instance, args);\n","\t    return isObject(result) ? result : instance;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 253 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\n","\tvar dP = __webpack_require__(18);\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toPrimitive = __webpack_require__(23);\n","\t\n","\t// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  // eslint-disable-next-line no-undef\n","\t  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n","\t}), 'Reflect', {\n","\t  defineProperty: function defineProperty(target, propertyKey, attributes) {\n","\t    anObject(target);\n","\t    propertyKey = toPrimitive(propertyKey, true);\n","\t    anObject(attributes);\n","\t    try {\n","\t      dP.f(target, propertyKey, attributes);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 254 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.4 Reflect.deleteProperty(target, propertyKey)\n","\tvar $export = __webpack_require__(15);\n","\tvar gOPD = __webpack_require__(58).f;\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  deleteProperty: function deleteProperty(target, propertyKey) {\n","\t    var desc = gOPD(anObject(target), propertyKey);\n","\t    return desc && !desc.configurable ? false : delete target[propertyKey];\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 255 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 26.1.5 Reflect.enumerate(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar Enumerate = function (iterated) {\n","\t  this._t = anObject(iterated); // target\n","\t  this._i = 0;                  // next index\n","\t  var keys = this._k = [];      // keys\n","\t  var key;\n","\t  for (key in iterated) keys.push(key);\n","\t};\n","\t__webpack_require__(138)(Enumerate, 'Object', function () {\n","\t  var that = this;\n","\t  var keys = that._k;\n","\t  var key;\n","\t  do {\n","\t    if (that._i >= keys.length) return { value: undefined, done: true };\n","\t  } while (!((key = keys[that._i++]) in that._t));\n","\t  return { value: key, done: false };\n","\t});\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  enumerate: function enumerate(target) {\n","\t    return new Enumerate(target);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 256 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.6 Reflect.get(target, propertyKey [, receiver])\n","\tvar gOPD = __webpack_require__(58);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar has = __webpack_require__(12);\n","\tvar $export = __webpack_require__(15);\n","\tvar isObject = __webpack_require__(20);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\tfunction get(target, propertyKey /* , receiver */) {\n","\t  var receiver = arguments.length < 3 ? target : arguments[2];\n","\t  var desc, proto;\n","\t  if (anObject(target) === receiver) return target[propertyKey];\n","\t  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n","\t    ? desc.value\n","\t    : desc.get !== undefined\n","\t      ? desc.get.call(receiver)\n","\t      : undefined;\n","\t  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n","\t}\n","\t\n","\t$export($export.S, 'Reflect', { get: get });\n","\n","\n","/***/ }),\n","/* 257 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\n","\tvar gOPD = __webpack_require__(58);\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n","\t    return gOPD.f(anObject(target), propertyKey);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 258 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.8 Reflect.getPrototypeOf(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar getProto = __webpack_require__(66);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  getPrototypeOf: function getPrototypeOf(target) {\n","\t    return getProto(anObject(target));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 259 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.9 Reflect.has(target, propertyKey)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  has: function has(target, propertyKey) {\n","\t    return propertyKey in target;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 260 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.10 Reflect.isExtensible(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $isExtensible = Object.isExtensible;\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  isExtensible: function isExtensible(target) {\n","\t    anObject(target);\n","\t    return $isExtensible ? $isExtensible(target) : true;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 261 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.11 Reflect.ownKeys(target)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Reflect', { ownKeys: __webpack_require__(262) });\n","\n","\n","/***/ }),\n","/* 262 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// all object keys, includes non-enumerable and symbols\n","\tvar gOPN = __webpack_require__(57);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar anObject = __webpack_require__(19);\n","\tvar Reflect = __webpack_require__(11).Reflect;\n","\tmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n","\t  var keys = gOPN.f(anObject(it));\n","\t  var getSymbols = gOPS.f;\n","\t  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n","\t};\n","\n","\n","/***/ }),\n","/* 263 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.12 Reflect.preventExtensions(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $preventExtensions = Object.preventExtensions;\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  preventExtensions: function preventExtensions(target) {\n","\t    anObject(target);\n","\t    try {\n","\t      if ($preventExtensions) $preventExtensions(target);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 264 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\n","\tvar dP = __webpack_require__(18);\n","\tvar gOPD = __webpack_require__(58);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar has = __webpack_require__(12);\n","\tvar $export = __webpack_require__(15);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\tfunction set(target, propertyKey, V /* , receiver */) {\n","\t  var receiver = arguments.length < 4 ? target : arguments[3];\n","\t  var ownDesc = gOPD.f(anObject(target), propertyKey);\n","\t  var existingDescriptor, proto;\n","\t  if (!ownDesc) {\n","\t    if (isObject(proto = getPrototypeOf(target))) {\n","\t      return set(proto, propertyKey, V, receiver);\n","\t    }\n","\t    ownDesc = createDesc(0);\n","\t  }\n","\t  if (has(ownDesc, 'value')) {\n","\t    if (ownDesc.writable === false || !isObject(receiver)) return false;\n","\t    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n","\t      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n","\t      existingDescriptor.value = V;\n","\t      dP.f(receiver, propertyKey, existingDescriptor);\n","\t    } else dP.f(receiver, propertyKey, createDesc(0, V));\n","\t    return true;\n","\t  }\n","\t  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n","\t}\n","\t\n","\t$export($export.S, 'Reflect', { set: set });\n","\n","\n","/***/ }),\n","/* 265 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.14 Reflect.setPrototypeOf(target, proto)\n","\tvar $export = __webpack_require__(15);\n","\tvar setProto = __webpack_require__(80);\n","\t\n","\tif (setProto) $export($export.S, 'Reflect', {\n","\t  setPrototypeOf: function setPrototypeOf(target, proto) {\n","\t    setProto.check(target, proto);\n","\t    try {\n","\t      setProto.set(target, proto);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 266 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/Array.prototype.includes\n","\tvar $export = __webpack_require__(15);\n","\tvar $includes = __webpack_require__(44)(true);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  includes: function includes(el /* , fromIndex = 0 */) {\n","\t    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('includes');\n","\n","\n","/***/ }),\n","/* 267 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\n","\tvar $export = __webpack_require__(15);\n","\tvar flattenIntoArray = __webpack_require__(268);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar arraySpeciesCreate = __webpack_require__(182);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  flatMap: function flatMap(callbackfn /* , thisArg */) {\n","\t    var O = toObject(this);\n","\t    var sourceLen, A;\n","\t    aFunction(callbackfn);\n","\t    sourceLen = toLength(O.length);\n","\t    A = arraySpeciesCreate(O, 0);\n","\t    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n","\t    return A;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('flatMap');\n","\n","\n","/***/ }),\n","/* 268 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\n","\tvar isArray = __webpack_require__(52);\n","\tvar isObject = __webpack_require__(20);\n","\tvar toLength = __webpack_require__(45);\n","\tvar ctx = __webpack_require__(30);\n","\tvar IS_CONCAT_SPREADABLE = __webpack_require__(34)('isConcatSpreadable');\n","\t\n","\tfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n","\t  var targetIndex = start;\n","\t  var sourceIndex = 0;\n","\t  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n","\t  var element, spreadable;\n","\t\n","\t  while (sourceIndex < sourceLen) {\n","\t    if (sourceIndex in source) {\n","\t      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n","\t\n","\t      spreadable = false;\n","\t      if (isObject(element)) {\n","\t        spreadable = element[IS_CONCAT_SPREADABLE];\n","\t        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n","\t      }\n","\t\n","\t      if (spreadable && depth > 0) {\n","\t        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n","\t      } else {\n","\t        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n","\t        target[targetIndex] = element;\n","\t      }\n","\t\n","\t      targetIndex++;\n","\t    }\n","\t    sourceIndex++;\n","\t  }\n","\t  return targetIndex;\n","\t}\n","\t\n","\tmodule.exports = flattenIntoArray;\n","\n","\n","/***/ }),\n","/* 269 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\n","\tvar $export = __webpack_require__(15);\n","\tvar flattenIntoArray = __webpack_require__(268);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar arraySpeciesCreate = __webpack_require__(182);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  flatten: function flatten(/* depthArg = 1 */) {\n","\t    var depthArg = arguments[0];\n","\t    var O = toObject(this);\n","\t    var sourceLen = toLength(O.length);\n","\t    var A = arraySpeciesCreate(O, 0);\n","\t    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n","\t    return A;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('flatten');\n","\n","\n","/***/ }),\n","/* 270 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/mathiasbynens/String.prototype.at\n","\tvar $export = __webpack_require__(15);\n","\tvar $at = __webpack_require__(135)(true);\n","\t\n","\t$export($export.P, 'String', {\n","\t  at: function at(pos) {\n","\t    return $at(this, pos);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 271 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar $export = __webpack_require__(15);\n","\tvar $pad = __webpack_require__(272);\n","\tvar userAgent = __webpack_require__(225);\n","\t\n","\t// https://github.com/zloirock/core-js/issues/280\n","\tvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n","\t\n","\t$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n","\t  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n","\t    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 272 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar toLength = __webpack_require__(45);\n","\tvar repeat = __webpack_require__(98);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function (that, maxLength, fillString, left) {\n","\t  var S = String(defined(that));\n","\t  var stringLength = S.length;\n","\t  var fillStr = fillString === undefined ? ' ' : String(fillString);\n","\t  var intMaxLength = toLength(maxLength);\n","\t  if (intMaxLength <= stringLength || fillStr == '') return S;\n","\t  var fillLen = intMaxLength - stringLength;\n","\t  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n","\t  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n","\t  return left ? stringFiller + S : S + stringFiller;\n","\t};\n","\n","\n","/***/ }),\n","/* 273 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar $export = __webpack_require__(15);\n","\tvar $pad = __webpack_require__(272);\n","\tvar userAgent = __webpack_require__(225);\n","\t\n","\t// https://github.com/zloirock/core-js/issues/280\n","\tvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n","\t\n","\t$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n","\t  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n","\t    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 274 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n","\t__webpack_require__(90)('trimLeft', function ($trim) {\n","\t  return function trimLeft() {\n","\t    return $trim(this, 1);\n","\t  };\n","\t}, 'trimStart');\n","\n","\n","/***/ }),\n","/* 275 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n","\t__webpack_require__(90)('trimRight', function ($trim) {\n","\t  return function trimRight() {\n","\t    return $trim(this, 2);\n","\t  };\n","\t}, 'trimEnd');\n","\n","\n","/***/ }),\n","/* 276 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/String.prototype.matchAll/\n","\tvar $export = __webpack_require__(15);\n","\tvar defined = __webpack_require__(43);\n","\tvar toLength = __webpack_require__(45);\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar getFlags = __webpack_require__(205);\n","\tvar RegExpProto = RegExp.prototype;\n","\t\n","\tvar $RegExpStringIterator = function (regexp, string) {\n","\t  this._r = regexp;\n","\t  this._s = string;\n","\t};\n","\t\n","\t__webpack_require__(138)($RegExpStringIterator, 'RegExp String', function next() {\n","\t  var match = this._r.exec(this._s);\n","\t  return { value: match, done: match === null };\n","\t});\n","\t\n","\t$export($export.P, 'String', {\n","\t  matchAll: function matchAll(regexp) {\n","\t    defined(this);\n","\t    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n","\t    var S = String(this);\n","\t    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n","\t    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n","\t    rx.lastIndex = toLength(regexp.lastIndex);\n","\t    return new $RegExpStringIterator(rx, S);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 277 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(36)('asyncIterator');\n","\n","\n","/***/ }),\n","/* 278 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(36)('observable');\n","\n","\n","/***/ }),\n","/* 279 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-getownpropertydescriptors\n","\tvar $export = __webpack_require__(15);\n","\tvar ownKeys = __webpack_require__(262);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar gOPD = __webpack_require__(58);\n","\tvar createProperty = __webpack_require__(172);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n","\t    var O = toIObject(object);\n","\t    var getDesc = gOPD.f;\n","\t    var keys = ownKeys(O);\n","\t    var result = {};\n","\t    var i = 0;\n","\t    var key, desc;\n","\t    while (keys.length > i) {\n","\t      desc = getDesc(O, key = keys[i++]);\n","\t      if (desc !== undefined) createProperty(result, key, desc);\n","\t    }\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 280 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-values-entries\n","\tvar $export = __webpack_require__(15);\n","\tvar $values = __webpack_require__(281)(false);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  values: function values(it) {\n","\t    return $values(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 281 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar getKeys = __webpack_require__(38);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar isEnum = __webpack_require__(51).f;\n","\tmodule.exports = function (isEntries) {\n","\t  return function (it) {\n","\t    var O = toIObject(it);\n","\t    var keys = getKeys(O);\n","\t    var length = keys.length;\n","\t    var i = 0;\n","\t    var result = [];\n","\t    var key;\n","\t    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n","\t      result.push(isEntries ? [key, O[key]] : O[key]);\n","\t    } return result;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 282 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-values-entries\n","\tvar $export = __webpack_require__(15);\n","\tvar $entries = __webpack_require__(281)(true);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  entries: function entries(it) {\n","\t    return $entries(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 283 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar $defineProperty = __webpack_require__(18);\n","\t\n","\t// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __defineGetter__: function __defineGetter__(P, getter) {\n","\t    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 284 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// Forced replacement prototype accessors methods\n","\tmodule.exports = __webpack_require__(29) || !__webpack_require__(14)(function () {\n","\t  var K = Math.random();\n","\t  // In FF throws only define methods\n","\t  // eslint-disable-next-line no-undef, no-useless-call\n","\t  __defineSetter__.call(null, K, function () { /* empty */ });\n","\t  delete __webpack_require__(11)[K];\n","\t});\n","\n","\n","/***/ }),\n","/* 285 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar $defineProperty = __webpack_require__(18);\n","\t\n","\t// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __defineSetter__: function __defineSetter__(P, setter) {\n","\t    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 286 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t// B.2.2.4 Object.prototype.__lookupGetter__(P)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __lookupGetter__: function __lookupGetter__(P) {\n","\t    var O = toObject(this);\n","\t    var K = toPrimitive(P, true);\n","\t    var D;\n","\t    do {\n","\t      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n","\t    } while (O = getPrototypeOf(O));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 287 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t// B.2.2.5 Object.prototype.__lookupSetter__(P)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __lookupSetter__: function __lookupSetter__(P) {\n","\t    var O = toObject(this);\n","\t    var K = toPrimitive(P, true);\n","\t    var D;\n","\t    do {\n","\t      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n","\t    } while (O = getPrototypeOf(O));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 288 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(289)('Map') });\n","\n","\n","/***/ }),\n","/* 289 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar classof = __webpack_require__(82);\n","\tvar from = __webpack_require__(290);\n","\tmodule.exports = function (NAME) {\n","\t  return function toJSON() {\n","\t    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n","\t    return from(this);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 290 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar forOf = __webpack_require__(220);\n","\t\n","\tmodule.exports = function (iter, ITERATOR) {\n","\t  var result = [];\n","\t  forOf(iter, false, result.push, result, ITERATOR);\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 291 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(289)('Set') });\n","\n","\n","/***/ }),\n","/* 292 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\n","\t__webpack_require__(293)('Map');\n","\n","\n","/***/ }),\n","/* 293 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-setmap-offrom/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\tmodule.exports = function (COLLECTION) {\n","\t  $export($export.S, COLLECTION, { of: function of() {\n","\t    var length = arguments.length;\n","\t    var A = new Array(length);\n","\t    while (length--) A[length] = arguments[length];\n","\t    return new this(A);\n","\t  } });\n","\t};\n","\n","\n","/***/ }),\n","/* 294 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\n","\t__webpack_require__(293)('Set');\n","\n","\n","/***/ }),\n","/* 295 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\n","\t__webpack_require__(293)('WeakMap');\n","\n","\n","/***/ }),\n","/* 296 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\n","\t__webpack_require__(293)('WeakSet');\n","\n","\n","/***/ }),\n","/* 297 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\n","\t__webpack_require__(298)('Map');\n","\n","\n","/***/ }),\n","/* 298 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-setmap-offrom/\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar ctx = __webpack_require__(30);\n","\tvar forOf = __webpack_require__(220);\n","\t\n","\tmodule.exports = function (COLLECTION) {\n","\t  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n","\t    var mapFn = arguments[1];\n","\t    var mapping, A, n, cb;\n","\t    aFunction(this);\n","\t    mapping = mapFn !== undefined;\n","\t    if (mapping) aFunction(mapFn);\n","\t    if (source == undefined) return new this();\n","\t    A = [];\n","\t    if (mapping) {\n","\t      n = 0;\n","\t      cb = ctx(mapFn, arguments[2], 2);\n","\t      forOf(source, false, function (nextItem) {\n","\t        A.push(cb(nextItem, n++));\n","\t      });\n","\t    } else {\n","\t      forOf(source, false, A.push, A);\n","\t    }\n","\t    return new this(A);\n","\t  } });\n","\t};\n","\n","\n","/***/ }),\n","/* 299 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\n","\t__webpack_require__(298)('Set');\n","\n","\n","/***/ }),\n","/* 300 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\n","\t__webpack_require__(298)('WeakMap');\n","\n","\n","/***/ }),\n","/* 301 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\n","\t__webpack_require__(298)('WeakSet');\n","\n","\n","/***/ }),\n","/* 302 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-global\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.G, { global: __webpack_require__(11) });\n","\n","\n","/***/ }),\n","/* 303 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-global\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'System', { global: __webpack_require__(11) });\n","\n","\n","/***/ }),\n","/* 304 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/ljharb/proposal-is-error\n","\tvar $export = __webpack_require__(15);\n","\tvar cof = __webpack_require__(42);\n","\t\n","\t$export($export.S, 'Error', {\n","\t  isError: function isError(it) {\n","\t    return cof(it) === 'Error';\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 305 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  clamp: function clamp(x, lower, upper) {\n","\t    return Math.min(upper, Math.max(lower, x));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 306 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n","\n","\n","/***/ }),\n","/* 307 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar RAD_PER_DEG = 180 / Math.PI;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  degrees: function degrees(radians) {\n","\t    return radians * RAD_PER_DEG;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 308 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar scale = __webpack_require__(309);\n","\tvar fround = __webpack_require__(121);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n","\t    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 309 */\n","/***/ (function(module, exports) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n","\t  if (\n","\t    arguments.length === 0\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || x != x\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || inLow != inLow\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || inHigh != inHigh\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || outLow != outLow\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || outHigh != outHigh\n","\t  ) return NaN;\n","\t  if (x === Infinity || x === -Infinity) return x;\n","\t  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n","\t};\n","\n","\n","/***/ }),\n","/* 310 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  iaddh: function iaddh(x0, x1, y0, y1) {\n","\t    var $x0 = x0 >>> 0;\n","\t    var $x1 = x1 >>> 0;\n","\t    var $y0 = y0 >>> 0;\n","\t    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 311 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  isubh: function isubh(x0, x1, y0, y1) {\n","\t    var $x0 = x0 >>> 0;\n","\t    var $x1 = x1 >>> 0;\n","\t    var $y0 = y0 >>> 0;\n","\t    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 312 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  imulh: function imulh(u, v) {\n","\t    var UINT16 = 0xffff;\n","\t    var $u = +u;\n","\t    var $v = +v;\n","\t    var u0 = $u & UINT16;\n","\t    var v0 = $v & UINT16;\n","\t    var u1 = $u >> 16;\n","\t    var v1 = $v >> 16;\n","\t    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n","\t    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 313 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n","\n","\n","/***/ }),\n","/* 314 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar DEG_PER_RAD = Math.PI / 180;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  radians: function radians(degrees) {\n","\t    return degrees * DEG_PER_RAD;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 315 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { scale: __webpack_require__(309) });\n","\n","\n","/***/ }),\n","/* 316 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  umulh: function umulh(u, v) {\n","\t    var UINT16 = 0xffff;\n","\t    var $u = +u;\n","\t    var $v = +v;\n","\t    var u0 = $u & UINT16;\n","\t    var v0 = $v & UINT16;\n","\t    var u1 = $u >>> 16;\n","\t    var v1 = $v >>> 16;\n","\t    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n","\t    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 317 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// http://jfbastien.github.io/papers/Math.signbit.html\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { signbit: function signbit(x) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n","\t} });\n","\n","\n","/***/ }),\n","/* 318 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-promise-finally\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar core = __webpack_require__(16);\n","\tvar global = __webpack_require__(11);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar promiseResolve = __webpack_require__(226);\n","\t\n","\t$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n","\t  var C = speciesConstructor(this, core.Promise || global.Promise);\n","\t  var isFunction = typeof onFinally == 'function';\n","\t  return this.then(\n","\t    isFunction ? function (x) {\n","\t      return promiseResolve(C, onFinally()).then(function () { return x; });\n","\t    } : onFinally,\n","\t    isFunction ? function (e) {\n","\t      return promiseResolve(C, onFinally()).then(function () { throw e; });\n","\t    } : onFinally\n","\t  );\n","\t} });\n","\n","\n","/***/ }),\n","/* 319 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-promise-try\n","\tvar $export = __webpack_require__(15);\n","\tvar newPromiseCapability = __webpack_require__(223);\n","\tvar perform = __webpack_require__(224);\n","\t\n","\t$export($export.S, 'Promise', { 'try': function (callbackfn) {\n","\t  var promiseCapability = newPromiseCapability.f(this);\n","\t  var result = perform(callbackfn);\n","\t  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n","\t  return promiseCapability.promise;\n","\t} });\n","\n","\n","/***/ }),\n","/* 320 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toMetaKey = metadata.key;\n","\tvar ordinaryDefineOwnMetadata = metadata.set;\n","\t\n","\tmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n","\t  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n","\t} });\n","\n","\n","/***/ }),\n","/* 321 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar Map = __webpack_require__(228);\n","\tvar $export = __webpack_require__(15);\n","\tvar shared = __webpack_require__(28)('metadata');\n","\tvar store = shared.store || (shared.store = new (__webpack_require__(233))());\n","\t\n","\tvar getOrCreateMetadataMap = function (target, targetKey, create) {\n","\t  var targetMetadata = store.get(target);\n","\t  if (!targetMetadata) {\n","\t    if (!create) return undefined;\n","\t    store.set(target, targetMetadata = new Map());\n","\t  }\n","\t  var keyMetadata = targetMetadata.get(targetKey);\n","\t  if (!keyMetadata) {\n","\t    if (!create) return undefined;\n","\t    targetMetadata.set(targetKey, keyMetadata = new Map());\n","\t  } return keyMetadata;\n","\t};\n","\tvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n","\t  var metadataMap = getOrCreateMetadataMap(O, P, false);\n","\t  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n","\t};\n","\tvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n","\t  var metadataMap = getOrCreateMetadataMap(O, P, false);\n","\t  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n","\t};\n","\tvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n","\t  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n","\t};\n","\tvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n","\t  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n","\t  var keys = [];\n","\t  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n","\t  return keys;\n","\t};\n","\tvar toMetaKey = function (it) {\n","\t  return it === undefined || typeof it == 'symbol' ? it : String(it);\n","\t};\n","\tvar exp = function (O) {\n","\t  $export($export.S, 'Reflect', O);\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  store: store,\n","\t  map: getOrCreateMetadataMap,\n","\t  has: ordinaryHasOwnMetadata,\n","\t  get: ordinaryGetOwnMetadata,\n","\t  set: ordinaryDefineOwnMetadata,\n","\t  keys: ordinaryOwnMetadataKeys,\n","\t  key: toMetaKey,\n","\t  exp: exp\n","\t};\n","\n","\n","/***/ }),\n","/* 322 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toMetaKey = metadata.key;\n","\tvar getOrCreateMetadataMap = metadata.map;\n","\tvar store = metadata.store;\n","\t\n","\tmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n","\t  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n","\t  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n","\t  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n","\t  if (metadataMap.size) return true;\n","\t  var targetMetadata = store.get(target);\n","\t  targetMetadata['delete'](targetKey);\n","\t  return !!targetMetadata.size || store['delete'](target);\n","\t} });\n","\n","\n","/***/ }),\n","/* 323 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar ordinaryGetOwnMetadata = metadata.get;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n","\t  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n","\t  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n","\t  var parent = getPrototypeOf(O);\n","\t  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n","\t};\n","\t\n","\tmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 324 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar Set = __webpack_require__(232);\n","\tvar from = __webpack_require__(290);\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryOwnMetadataKeys = metadata.keys;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryMetadataKeys = function (O, P) {\n","\t  var oKeys = ordinaryOwnMetadataKeys(O, P);\n","\t  var parent = getPrototypeOf(O);\n","\t  if (parent === null) return oKeys;\n","\t  var pKeys = ordinaryMetadataKeys(parent, P);\n","\t  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n","\t};\n","\t\n","\tmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n","\t  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 325 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryGetOwnMetadata = metadata.get;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n","\t    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 326 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryOwnMetadataKeys = metadata.keys;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n","\t  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 327 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n","\t  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n","\t  if (hasOwn) return true;\n","\t  var parent = getPrototypeOf(O);\n","\t  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n","\t};\n","\t\n","\tmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 328 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n","\t    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 329 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toMetaKey = $metadata.key;\n","\tvar ordinaryDefineOwnMetadata = $metadata.set;\n","\t\n","\t$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n","\t  return function decorator(target, targetKey) {\n","\t    ordinaryDefineOwnMetadata(\n","\t      metadataKey, metadataValue,\n","\t      (targetKey !== undefined ? anObject : aFunction)(target),\n","\t      toMetaKey(targetKey)\n","\t    );\n","\t  };\n","\t} });\n","\n","\n","/***/ }),\n","/* 330 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\n","\tvar $export = __webpack_require__(15);\n","\tvar microtask = __webpack_require__(222)();\n","\tvar process = __webpack_require__(11).process;\n","\tvar isNode = __webpack_require__(42)(process) == 'process';\n","\t\n","\t$export($export.G, {\n","\t  asap: function asap(fn) {\n","\t    var domain = isNode && process.domain;\n","\t    microtask(domain ? domain.bind(fn) : fn);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 331 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/zenparsing/es-observable\n","\tvar $export = __webpack_require__(15);\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar microtask = __webpack_require__(222)();\n","\tvar OBSERVABLE = __webpack_require__(34)('observable');\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar hide = __webpack_require__(17);\n","\tvar forOf = __webpack_require__(220);\n","\tvar RETURN = forOf.RETURN;\n","\t\n","\tvar getMethod = function (fn) {\n","\t  return fn == null ? undefined : aFunction(fn);\n","\t};\n","\t\n","\tvar cleanupSubscription = function (subscription) {\n","\t  var cleanup = subscription._c;\n","\t  if (cleanup) {\n","\t    subscription._c = undefined;\n","\t    cleanup();\n","\t  }\n","\t};\n","\t\n","\tvar subscriptionClosed = function (subscription) {\n","\t  return subscription._o === undefined;\n","\t};\n","\t\n","\tvar closeSubscription = function (subscription) {\n","\t  if (!subscriptionClosed(subscription)) {\n","\t    subscription._o = undefined;\n","\t    cleanupSubscription(subscription);\n","\t  }\n","\t};\n","\t\n","\tvar Subscription = function (observer, subscriber) {\n","\t  anObject(observer);\n","\t  this._c = undefined;\n","\t  this._o = observer;\n","\t  observer = new SubscriptionObserver(this);\n","\t  try {\n","\t    var cleanup = subscriber(observer);\n","\t    var subscription = cleanup;\n","\t    if (cleanup != null) {\n","\t      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n","\t      else aFunction(cleanup);\n","\t      this._c = cleanup;\n","\t    }\n","\t  } catch (e) {\n","\t    observer.error(e);\n","\t    return;\n","\t  } if (subscriptionClosed(this)) cleanupSubscription(this);\n","\t};\n","\t\n","\tSubscription.prototype = redefineAll({}, {\n","\t  unsubscribe: function unsubscribe() { closeSubscription(this); }\n","\t});\n","\t\n","\tvar SubscriptionObserver = function (subscription) {\n","\t  this._s = subscription;\n","\t};\n","\t\n","\tSubscriptionObserver.prototype = redefineAll({}, {\n","\t  next: function next(value) {\n","\t    var subscription = this._s;\n","\t    if (!subscriptionClosed(subscription)) {\n","\t      var observer = subscription._o;\n","\t      try {\n","\t        var m = getMethod(observer.next);\n","\t        if (m) return m.call(observer, value);\n","\t      } catch (e) {\n","\t        try {\n","\t          closeSubscription(subscription);\n","\t        } finally {\n","\t          throw e;\n","\t        }\n","\t      }\n","\t    }\n","\t  },\n","\t  error: function error(value) {\n","\t    var subscription = this._s;\n","\t    if (subscriptionClosed(subscription)) throw value;\n","\t    var observer = subscription._o;\n","\t    subscription._o = undefined;\n","\t    try {\n","\t      var m = getMethod(observer.error);\n","\t      if (!m) throw value;\n","\t      value = m.call(observer, value);\n","\t    } catch (e) {\n","\t      try {\n","\t        cleanupSubscription(subscription);\n","\t      } finally {\n","\t        throw e;\n","\t      }\n","\t    } cleanupSubscription(subscription);\n","\t    return value;\n","\t  },\n","\t  complete: function complete(value) {\n","\t    var subscription = this._s;\n","\t    if (!subscriptionClosed(subscription)) {\n","\t      var observer = subscription._o;\n","\t      subscription._o = undefined;\n","\t      try {\n","\t        var m = getMethod(observer.complete);\n","\t        value = m ? m.call(observer, value) : undefined;\n","\t      } catch (e) {\n","\t        try {\n","\t          cleanupSubscription(subscription);\n","\t        } finally {\n","\t          throw e;\n","\t        }\n","\t      } cleanupSubscription(subscription);\n","\t      return value;\n","\t    }\n","\t  }\n","\t});\n","\t\n","\tvar $Observable = function Observable(subscriber) {\n","\t  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n","\t};\n","\t\n","\tredefineAll($Observable.prototype, {\n","\t  subscribe: function subscribe(observer) {\n","\t    return new Subscription(observer, this._f);\n","\t  },\n","\t  forEach: function forEach(fn) {\n","\t    var that = this;\n","\t    return new (core.Promise || global.Promise)(function (resolve, reject) {\n","\t      aFunction(fn);\n","\t      var subscription = that.subscribe({\n","\t        next: function (value) {\n","\t          try {\n","\t            return fn(value);\n","\t          } catch (e) {\n","\t            reject(e);\n","\t            subscription.unsubscribe();\n","\t          }\n","\t        },\n","\t        error: reject,\n","\t        complete: resolve\n","\t      });\n","\t    });\n","\t  }\n","\t});\n","\t\n","\tredefineAll($Observable, {\n","\t  from: function from(x) {\n","\t    var C = typeof this === 'function' ? this : $Observable;\n","\t    var method = getMethod(anObject(x)[OBSERVABLE]);\n","\t    if (method) {\n","\t      var observable = anObject(method.call(x));\n","\t      return observable.constructor === C ? observable : new C(function (observer) {\n","\t        return observable.subscribe(observer);\n","\t      });\n","\t    }\n","\t    return new C(function (observer) {\n","\t      var done = false;\n","\t      microtask(function () {\n","\t        if (!done) {\n","\t          try {\n","\t            if (forOf(x, false, function (it) {\n","\t              observer.next(it);\n","\t              if (done) return RETURN;\n","\t            }) === RETURN) return;\n","\t          } catch (e) {\n","\t            if (done) throw e;\n","\t            observer.error(e);\n","\t            return;\n","\t          } observer.complete();\n","\t        }\n","\t      });\n","\t      return function () { done = true; };\n","\t    });\n","\t  },\n","\t  of: function of() {\n","\t    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];\n","\t    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n","\t      var done = false;\n","\t      microtask(function () {\n","\t        if (!done) {\n","\t          for (var j = 0; j < items.length; ++j) {\n","\t            observer.next(items[j]);\n","\t            if (done) return;\n","\t          } observer.complete();\n","\t        }\n","\t      });\n","\t      return function () { done = true; };\n","\t    });\n","\t  }\n","\t});\n","\t\n","\thide($Observable.prototype, OBSERVABLE, function () { return this; });\n","\t\n","\t$export($export.G, { Observable: $Observable });\n","\t\n","\t__webpack_require__(201)('Observable');\n","\n","\n","/***/ }),\n","/* 332 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// ie9- setTimeout & setInterval additional parameters fix\n","\tvar global = __webpack_require__(11);\n","\tvar $export = __webpack_require__(15);\n","\tvar userAgent = __webpack_require__(225);\n","\tvar slice = [].slice;\n","\tvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n","\tvar wrap = function (set) {\n","\t  return function (fn, time /* , ...args */) {\n","\t    var boundArgs = arguments.length > 2;\n","\t    var args = boundArgs ? slice.call(arguments, 2) : false;\n","\t    return set(boundArgs ? function () {\n","\t      // eslint-disable-next-line no-new-func\n","\t      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n","\t    } : fn, time);\n","\t  };\n","\t};\n","\t$export($export.G + $export.B + $export.F * MSIE, {\n","\t  setTimeout: wrap(global.setTimeout),\n","\t  setInterval: wrap(global.setInterval)\n","\t});\n","\n","\n","/***/ }),\n","/* 333 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $task = __webpack_require__(221);\n","\t$export($export.G + $export.B, {\n","\t  setImmediate: $task.set,\n","\t  clearImmediate: $task.clear\n","\t});\n","\n","\n","/***/ }),\n","/* 334 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $iterators = __webpack_require__(202);\n","\tvar getKeys = __webpack_require__(38);\n","\tvar redefine = __webpack_require__(25);\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar wks = __webpack_require__(34);\n","\tvar ITERATOR = wks('iterator');\n","\tvar TO_STRING_TAG = wks('toStringTag');\n","\tvar ArrayValues = Iterators.Array;\n","\t\n","\tvar DOMIterables = {\n","\t  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n","\t  CSSStyleDeclaration: false,\n","\t  CSSValueList: false,\n","\t  ClientRectList: false,\n","\t  DOMRectList: false,\n","\t  DOMStringList: false,\n","\t  DOMTokenList: true,\n","\t  DataTransferItemList: false,\n","\t  FileList: false,\n","\t  HTMLAllCollection: false,\n","\t  HTMLCollection: false,\n","\t  HTMLFormElement: false,\n","\t  HTMLSelectElement: false,\n","\t  MediaList: true, // TODO: Not spec compliant, should be false.\n","\t  MimeTypeArray: false,\n","\t  NamedNodeMap: false,\n","\t  NodeList: true,\n","\t  PaintRequestList: false,\n","\t  Plugin: false,\n","\t  PluginArray: false,\n","\t  SVGLengthList: false,\n","\t  SVGNumberList: false,\n","\t  SVGPathSegList: false,\n","\t  SVGPointList: false,\n","\t  SVGStringList: false,\n","\t  SVGTransformList: false,\n","\t  SourceBufferList: false,\n","\t  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n","\t  TextTrackCueList: false,\n","\t  TextTrackList: false,\n","\t  TouchList: false\n","\t};\n","\t\n","\tfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n","\t  var NAME = collections[i];\n","\t  var explicit = DOMIterables[NAME];\n","\t  var Collection = global[NAME];\n","\t  var proto = Collection && Collection.prototype;\n","\t  var key;\n","\t  if (proto) {\n","\t    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n","\t    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n","\t    Iterators[NAME] = ArrayValues;\n","\t    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n","\t  }\n","\t}\n","\n","\n","/***/ }),\n","/* 335 */\n","/***/ (function(module, exports) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {/**\n","\t * Copyright (c) 2014, Facebook, Inc.\n","\t * All rights reserved.\n","\t *\n","\t * This source code is licensed under the BSD-style license found in the\n","\t * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n","\t * additional grant of patent rights can be found in the PATENTS file in\n","\t * the same directory.\n","\t */\n","\t\n","\t!(function(global) {\n","\t  \"use strict\";\n","\t\n","\t  var Op = Object.prototype;\n","\t  var hasOwn = Op.hasOwnProperty;\n","\t  var undefined; // More compressible than void 0.\n","\t  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n","\t  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n","\t  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n","\t  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n","\t\n","\t  var inModule = typeof module === \"object\";\n","\t  var runtime = global.regeneratorRuntime;\n","\t  if (runtime) {\n","\t    if (inModule) {\n","\t      // If regeneratorRuntime is defined globally and we're in a module,\n","\t      // make the exports object identical to regeneratorRuntime.\n","\t      module.exports = runtime;\n","\t    }\n","\t    // Don't bother evaluating the rest of this file if the runtime was\n","\t    // already defined globally.\n","\t    return;\n","\t  }\n","\t\n","\t  // Define the runtime globally (as expected by generated code) as either\n","\t  // module.exports (if we're in a module) or a new, empty object.\n","\t  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n","\t\n","\t  function wrap(innerFn, outerFn, self, tryLocsList) {\n","\t    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n","\t    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n","\t    var generator = Object.create(protoGenerator.prototype);\n","\t    var context = new Context(tryLocsList || []);\n","\t\n","\t    // The ._invoke method unifies the implementations of the .next,\n","\t    // .throw, and .return methods.\n","\t    generator._invoke = makeInvokeMethod(innerFn, self, context);\n","\t\n","\t    return generator;\n","\t  }\n","\t  runtime.wrap = wrap;\n","\t\n","\t  // Try/catch helper to minimize deoptimizations. Returns a completion\n","\t  // record like context.tryEntries[i].completion. This interface could\n","\t  // have been (and was previously) designed to take a closure to be\n","\t  // invoked without arguments, but in all the cases we care about we\n","\t  // already have an existing method we want to call, so there's no need\n","\t  // to create a new function object. We can even get away with assuming\n","\t  // the method takes exactly one argument, since that happens to be true\n","\t  // in every case, so we don't have to touch the arguments object. The\n","\t  // only additional allocation required is the completion record, which\n","\t  // has a stable shape and so hopefully should be cheap to allocate.\n","\t  function tryCatch(fn, obj, arg) {\n","\t    try {\n","\t      return { type: \"normal\", arg: fn.call(obj, arg) };\n","\t    } catch (err) {\n","\t      return { type: \"throw\", arg: err };\n","\t    }\n","\t  }\n","\t\n","\t  var GenStateSuspendedStart = \"suspendedStart\";\n","\t  var GenStateSuspendedYield = \"suspendedYield\";\n","\t  var GenStateExecuting = \"executing\";\n","\t  var GenStateCompleted = \"completed\";\n","\t\n","\t  // Returning this object from the innerFn has the same effect as\n","\t  // breaking out of the dispatch switch statement.\n","\t  var ContinueSentinel = {};\n","\t\n","\t  // Dummy constructor functions that we use as the .constructor and\n","\t  // .constructor.prototype properties for functions that return Generator\n","\t  // objects. For full spec compliance, you may wish to configure your\n","\t  // minifier not to mangle the names of these two functions.\n","\t  function Generator() {}\n","\t  function GeneratorFunction() {}\n","\t  function GeneratorFunctionPrototype() {}\n","\t\n","\t  // This is a polyfill for %IteratorPrototype% for environments that\n","\t  // don't natively support it.\n","\t  var IteratorPrototype = {};\n","\t  IteratorPrototype[iteratorSymbol] = function () {\n","\t    return this;\n","\t  };\n","\t\n","\t  var getProto = Object.getPrototypeOf;\n","\t  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n","\t  if (NativeIteratorPrototype &&\n","\t      NativeIteratorPrototype !== Op &&\n","\t      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n","\t    // This environment has a native %IteratorPrototype%; use it instead\n","\t    // of the polyfill.\n","\t    IteratorPrototype = NativeIteratorPrototype;\n","\t  }\n","\t\n","\t  var Gp = GeneratorFunctionPrototype.prototype =\n","\t    Generator.prototype = Object.create(IteratorPrototype);\n","\t  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n","\t  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n","\t  GeneratorFunctionPrototype[toStringTagSymbol] =\n","\t    GeneratorFunction.displayName = \"GeneratorFunction\";\n","\t\n","\t  // Helper for defining the .next, .throw, and .return methods of the\n","\t  // Iterator interface in terms of a single ._invoke method.\n","\t  function defineIteratorMethods(prototype) {\n","\t    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n","\t      prototype[method] = function(arg) {\n","\t        return this._invoke(method, arg);\n","\t      };\n","\t    });\n","\t  }\n","\t\n","\t  runtime.isGeneratorFunction = function(genFun) {\n","\t    var ctor = typeof genFun === \"function\" && genFun.constructor;\n","\t    return ctor\n","\t      ? ctor === GeneratorFunction ||\n","\t        // For the native GeneratorFunction constructor, the best we can\n","\t        // do is to check its .name property.\n","\t        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n","\t      : false;\n","\t  };\n","\t\n","\t  runtime.mark = function(genFun) {\n","\t    if (Object.setPrototypeOf) {\n","\t      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n","\t    } else {\n","\t      genFun.__proto__ = GeneratorFunctionPrototype;\n","\t      if (!(toStringTagSymbol in genFun)) {\n","\t        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n","\t      }\n","\t    }\n","\t    genFun.prototype = Object.create(Gp);\n","\t    return genFun;\n","\t  };\n","\t\n","\t  // Within the body of any async function, `await x` is transformed to\n","\t  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n","\t  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n","\t  // meant to be awaited.\n","\t  runtime.awrap = function(arg) {\n","\t    return { __await: arg };\n","\t  };\n","\t\n","\t  function AsyncIterator(generator) {\n","\t    function invoke(method, arg, resolve, reject) {\n","\t      var record = tryCatch(generator[method], generator, arg);\n","\t      if (record.type === \"throw\") {\n","\t        reject(record.arg);\n","\t      } else {\n","\t        var result = record.arg;\n","\t        var value = result.value;\n","\t        if (value &&\n","\t            typeof value === \"object\" &&\n","\t            hasOwn.call(value, \"__await\")) {\n","\t          return Promise.resolve(value.__await).then(function(value) {\n","\t            invoke(\"next\", value, resolve, reject);\n","\t          }, function(err) {\n","\t            invoke(\"throw\", err, resolve, reject);\n","\t          });\n","\t        }\n","\t\n","\t        return Promise.resolve(value).then(function(unwrapped) {\n","\t          // When a yielded Promise is resolved, its final value becomes\n","\t          // the .value of the Promise<{value,done}> result for the\n","\t          // current iteration. If the Promise is rejected, however, the\n","\t          // result for this iteration will be rejected with the same\n","\t          // reason. Note that rejections of yielded Promises are not\n","\t          // thrown back into the generator function, as is the case\n","\t          // when an awaited Promise is rejected. This difference in\n","\t          // behavior between yield and await is important, because it\n","\t          // allows the consumer to decide what to do with the yielded\n","\t          // rejection (swallow it and continue, manually .throw it back\n","\t          // into the generator, abandon iteration, whatever). With\n","\t          // await, by contrast, there is no opportunity to examine the\n","\t          // rejection reason outside the generator function, so the\n","\t          // only option is to throw it from the await expression, and\n","\t          // let the generator function handle the exception.\n","\t          result.value = unwrapped;\n","\t          resolve(result);\n","\t        }, reject);\n","\t      }\n","\t    }\n","\t\n","\t    if (typeof global.process === \"object\" && global.process.domain) {\n","\t      invoke = global.process.domain.bind(invoke);\n","\t    }\n","\t\n","\t    var previousPromise;\n","\t\n","\t    function enqueue(method, arg) {\n","\t      function callInvokeWithMethodAndArg() {\n","\t        return new Promise(function(resolve, reject) {\n","\t          invoke(method, arg, resolve, reject);\n","\t        });\n","\t      }\n","\t\n","\t      return previousPromise =\n","\t        // If enqueue has been called before, then we want to wait until\n","\t        // all previous Promises have been resolved before calling invoke,\n","\t        // so that results are always delivered in the correct order. If\n","\t        // enqueue has not been called before, then it is important to\n","\t        // call invoke immediately, without waiting on a callback to fire,\n","\t        // so that the async generator function has the opportunity to do\n","\t        // any necessary setup in a predictable way. This predictability\n","\t        // is why the Promise constructor synchronously invokes its\n","\t        // executor callback, and why async functions synchronously\n","\t        // execute code before the first await. Since we implement simple\n","\t        // async functions in terms of async generators, it is especially\n","\t        // important to get this right, even though it requires care.\n","\t        previousPromise ? previousPromise.then(\n","\t          callInvokeWithMethodAndArg,\n","\t          // Avoid propagating failures to Promises returned by later\n","\t          // invocations of the iterator.\n","\t          callInvokeWithMethodAndArg\n","\t        ) : callInvokeWithMethodAndArg();\n","\t    }\n","\t\n","\t    // Define the unified helper method that is used to implement .next,\n","\t    // .throw, and .return (see defineIteratorMethods).\n","\t    this._invoke = enqueue;\n","\t  }\n","\t\n","\t  defineIteratorMethods(AsyncIterator.prototype);\n","\t  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n","\t    return this;\n","\t  };\n","\t  runtime.AsyncIterator = AsyncIterator;\n","\t\n","\t  // Note that simple async functions are implemented on top of\n","\t  // AsyncIterator objects; they just return a Promise for the value of\n","\t  // the final result produced by the iterator.\n","\t  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n","\t    var iter = new AsyncIterator(\n","\t      wrap(innerFn, outerFn, self, tryLocsList)\n","\t    );\n","\t\n","\t    return runtime.isGeneratorFunction(outerFn)\n","\t      ? iter // If outerFn is a generator, return the full iterator.\n","\t      : iter.next().then(function(result) {\n","\t          return result.done ? result.value : iter.next();\n","\t        });\n","\t  };\n","\t\n","\t  function makeInvokeMethod(innerFn, self, context) {\n","\t    var state = GenStateSuspendedStart;\n","\t\n","\t    return function invoke(method, arg) {\n","\t      if (state === GenStateExecuting) {\n","\t        throw new Error(\"Generator is already running\");\n","\t      }\n","\t\n","\t      if (state === GenStateCompleted) {\n","\t        if (method === \"throw\") {\n","\t          throw arg;\n","\t        }\n","\t\n","\t        // Be forgiving, per 25.3.3.3.3 of the spec:\n","\t        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n","\t        return doneResult();\n","\t      }\n","\t\n","\t      context.method = method;\n","\t      context.arg = arg;\n","\t\n","\t      while (true) {\n","\t        var delegate = context.delegate;\n","\t        if (delegate) {\n","\t          var delegateResult = maybeInvokeDelegate(delegate, context);\n","\t          if (delegateResult) {\n","\t            if (delegateResult === ContinueSentinel) continue;\n","\t            return delegateResult;\n","\t          }\n","\t        }\n","\t\n","\t        if (context.method === \"next\") {\n","\t          // Setting context._sent for legacy support of Babel's\n","\t          // function.sent implementation.\n","\t          context.sent = context._sent = context.arg;\n","\t\n","\t        } else if (context.method === \"throw\") {\n","\t          if (state === GenStateSuspendedStart) {\n","\t            state = GenStateCompleted;\n","\t            throw context.arg;\n","\t          }\n","\t\n","\t          context.dispatchException(context.arg);\n","\t\n","\t        } else if (context.method === \"return\") {\n","\t          context.abrupt(\"return\", context.arg);\n","\t        }\n","\t\n","\t        state = GenStateExecuting;\n","\t\n","\t        var record = tryCatch(innerFn, self, context);\n","\t        if (record.type === \"normal\") {\n","\t          // If an exception is thrown from innerFn, we leave state ===\n","\t          // GenStateExecuting and loop back for another invocation.\n","\t          state = context.done\n","\t            ? GenStateCompleted\n","\t            : GenStateSuspendedYield;\n","\t\n","\t          if (record.arg === ContinueSentinel) {\n","\t            continue;\n","\t          }\n","\t\n","\t          return {\n","\t            value: record.arg,\n","\t            done: context.done\n","\t          };\n","\t\n","\t        } else if (record.type === \"throw\") {\n","\t          state = GenStateCompleted;\n","\t          // Dispatch the exception by looping back around to the\n","\t          // context.dispatchException(context.arg) call above.\n","\t          context.method = \"throw\";\n","\t          context.arg = record.arg;\n","\t        }\n","\t      }\n","\t    };\n","\t  }\n","\t\n","\t  // Call delegate.iterator[context.method](context.arg) and handle the\n","\t  // result, either by returning a { value, done } result from the\n","\t  // delegate iterator, or by modifying context.method and context.arg,\n","\t  // setting context.delegate to null, and returning the ContinueSentinel.\n","\t  function maybeInvokeDelegate(delegate, context) {\n","\t    var method = delegate.iterator[context.method];\n","\t    if (method === undefined) {\n","\t      // A .throw or .return when the delegate iterator has no .throw\n","\t      // method always terminates the yield* loop.\n","\t      context.delegate = null;\n","\t\n","\t      if (context.method === \"throw\") {\n","\t        if (delegate.iterator.return) {\n","\t          // If the delegate iterator has a return method, give it a\n","\t          // chance to clean up.\n","\t          context.method = \"return\";\n","\t          context.arg = undefined;\n","\t          maybeInvokeDelegate(delegate, context);\n","\t\n","\t          if (context.method === \"throw\") {\n","\t            // If maybeInvokeDelegate(context) changed context.method from\n","\t            // \"return\" to \"throw\", let that override the TypeError below.\n","\t            return ContinueSentinel;\n","\t          }\n","\t        }\n","\t\n","\t        context.method = \"throw\";\n","\t        context.arg = new TypeError(\n","\t          \"The iterator does not provide a 'throw' method\");\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    var record = tryCatch(method, delegate.iterator, context.arg);\n","\t\n","\t    if (record.type === \"throw\") {\n","\t      context.method = \"throw\";\n","\t      context.arg = record.arg;\n","\t      context.delegate = null;\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    var info = record.arg;\n","\t\n","\t    if (! info) {\n","\t      context.method = \"throw\";\n","\t      context.arg = new TypeError(\"iterator result is not an object\");\n","\t      context.delegate = null;\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    if (info.done) {\n","\t      // Assign the result of the finished delegate to the temporary\n","\t      // variable specified by delegate.resultName (see delegateYield).\n","\t      context[delegate.resultName] = info.value;\n","\t\n","\t      // Resume execution at the desired location (see delegateYield).\n","\t      context.next = delegate.nextLoc;\n","\t\n","\t      // If context.method was \"throw\" but the delegate handled the\n","\t      // exception, let the outer generator proceed normally. If\n","\t      // context.method was \"next\", forget context.arg since it has been\n","\t      // \"consumed\" by the delegate iterator. If context.method was\n","\t      // \"return\", allow the original .return call to continue in the\n","\t      // outer generator.\n","\t      if (context.method !== \"return\") {\n","\t        context.method = \"next\";\n","\t        context.arg = undefined;\n","\t      }\n","\t\n","\t    } else {\n","\t      // Re-yield the result returned by the delegate method.\n","\t      return info;\n","\t    }\n","\t\n","\t    // The delegate iterator is finished, so forget it and continue with\n","\t    // the outer generator.\n","\t    context.delegate = null;\n","\t    return ContinueSentinel;\n","\t  }\n","\t\n","\t  // Define Generator.prototype.{next,throw,return} in terms of the\n","\t  // unified ._invoke helper method.\n","\t  defineIteratorMethods(Gp);\n","\t\n","\t  Gp[toStringTagSymbol] = \"Generator\";\n","\t\n","\t  // A Generator should always return itself as the iterator object when the\n","\t  // @@iterator function is called on it. Some browsers' implementations of the\n","\t  // iterator prototype chain incorrectly implement this, causing the Generator\n","\t  // object to not be returned from this call. This ensures that doesn't happen.\n","\t  // See https://github.com/facebook/regenerator/issues/274 for more details.\n","\t  Gp[iteratorSymbol] = function() {\n","\t    return this;\n","\t  };\n","\t\n","\t  Gp.toString = function() {\n","\t    return \"[object Generator]\";\n","\t  };\n","\t\n","\t  function pushTryEntry(locs) {\n","\t    var entry = { tryLoc: locs[0] };\n","\t\n","\t    if (1 in locs) {\n","\t      entry.catchLoc = locs[1];\n","\t    }\n","\t\n","\t    if (2 in locs) {\n","\t      entry.finallyLoc = locs[2];\n","\t      entry.afterLoc = locs[3];\n","\t    }\n","\t\n","\t    this.tryEntries.push(entry);\n","\t  }\n","\t\n","\t  function resetTryEntry(entry) {\n","\t    var record = entry.completion || {};\n","\t    record.type = \"normal\";\n","\t    delete record.arg;\n","\t    entry.completion = record;\n","\t  }\n","\t\n","\t  function Context(tryLocsList) {\n","\t    // The root entry object (effectively a try statement without a catch\n","\t    // or a finally block) gives us a place to store values thrown from\n","\t    // locations where there is no enclosing try statement.\n","\t    this.tryEntries = [{ tryLoc: \"root\" }];\n","\t    tryLocsList.forEach(pushTryEntry, this);\n","\t    this.reset(true);\n","\t  }\n","\t\n","\t  runtime.keys = function(object) {\n","\t    var keys = [];\n","\t    for (var key in object) {\n","\t      keys.push(key);\n","\t    }\n","\t    keys.reverse();\n","\t\n","\t    // Rather than returning an object with a next method, we keep\n","\t    // things simple and return the next function itself.\n","\t    return function next() {\n","\t      while (keys.length) {\n","\t        var key = keys.pop();\n","\t        if (key in object) {\n","\t          next.value = key;\n","\t          next.done = false;\n","\t          return next;\n","\t        }\n","\t      }\n","\t\n","\t      // To avoid creating an additional object, we just hang the .value\n","\t      // and .done properties off the next function object itself. This\n","\t      // also ensures that the minifier will not anonymize the function.\n","\t      next.done = true;\n","\t      return next;\n","\t    };\n","\t  };\n","\t\n","\t  function values(iterable) {\n","\t    if (iterable) {\n","\t      var iteratorMethod = iterable[iteratorSymbol];\n","\t      if (iteratorMethod) {\n","\t        return iteratorMethod.call(iterable);\n","\t      }\n","\t\n","\t      if (typeof iterable.next === \"function\") {\n","\t        return iterable;\n","\t      }\n","\t\n","\t      if (!isNaN(iterable.length)) {\n","\t        var i = -1, next = function next() {\n","\t          while (++i < iterable.length) {\n","\t            if (hasOwn.call(iterable, i)) {\n","\t              next.value = iterable[i];\n","\t              next.done = false;\n","\t              return next;\n","\t            }\n","\t          }\n","\t\n","\t          next.value = undefined;\n","\t          next.done = true;\n","\t\n","\t          return next;\n","\t        };\n","\t\n","\t        return next.next = next;\n","\t      }\n","\t    }\n","\t\n","\t    // Return an iterator with no values.\n","\t    return { next: doneResult };\n","\t  }\n","\t  runtime.values = values;\n","\t\n","\t  function doneResult() {\n","\t    return { value: undefined, done: true };\n","\t  }\n","\t\n","\t  Context.prototype = {\n","\t    constructor: Context,\n","\t\n","\t    reset: function(skipTempReset) {\n","\t      this.prev = 0;\n","\t      this.next = 0;\n","\t      // Resetting context._sent for legacy support of Babel's\n","\t      // function.sent implementation.\n","\t      this.sent = this._sent = undefined;\n","\t      this.done = false;\n","\t      this.delegate = null;\n","\t\n","\t      this.method = \"next\";\n","\t      this.arg = undefined;\n","\t\n","\t      this.tryEntries.forEach(resetTryEntry);\n","\t\n","\t      if (!skipTempReset) {\n","\t        for (var name in this) {\n","\t          // Not sure about the optimal order of these conditions:\n","\t          if (name.charAt(0) === \"t\" &&\n","\t              hasOwn.call(this, name) &&\n","\t              !isNaN(+name.slice(1))) {\n","\t            this[name] = undefined;\n","\t          }\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    stop: function() {\n","\t      this.done = true;\n","\t\n","\t      var rootEntry = this.tryEntries[0];\n","\t      var rootRecord = rootEntry.completion;\n","\t      if (rootRecord.type === \"throw\") {\n","\t        throw rootRecord.arg;\n","\t      }\n","\t\n","\t      return this.rval;\n","\t    },\n","\t\n","\t    dispatchException: function(exception) {\n","\t      if (this.done) {\n","\t        throw exception;\n","\t      }\n","\t\n","\t      var context = this;\n","\t      function handle(loc, caught) {\n","\t        record.type = \"throw\";\n","\t        record.arg = exception;\n","\t        context.next = loc;\n","\t\n","\t        if (caught) {\n","\t          // If the dispatched exception was caught by a catch block,\n","\t          // then let that catch block handle the exception normally.\n","\t          context.method = \"next\";\n","\t          context.arg = undefined;\n","\t        }\n","\t\n","\t        return !! caught;\n","\t      }\n","\t\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        var record = entry.completion;\n","\t\n","\t        if (entry.tryLoc === \"root\") {\n","\t          // Exception thrown outside of any try block that could handle\n","\t          // it, so set the completion value of the entire function to\n","\t          // throw the exception.\n","\t          return handle(\"end\");\n","\t        }\n","\t\n","\t        if (entry.tryLoc <= this.prev) {\n","\t          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n","\t          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n","\t\n","\t          if (hasCatch && hasFinally) {\n","\t            if (this.prev < entry.catchLoc) {\n","\t              return handle(entry.catchLoc, true);\n","\t            } else if (this.prev < entry.finallyLoc) {\n","\t              return handle(entry.finallyLoc);\n","\t            }\n","\t\n","\t          } else if (hasCatch) {\n","\t            if (this.prev < entry.catchLoc) {\n","\t              return handle(entry.catchLoc, true);\n","\t            }\n","\t\n","\t          } else if (hasFinally) {\n","\t            if (this.prev < entry.finallyLoc) {\n","\t              return handle(entry.finallyLoc);\n","\t            }\n","\t\n","\t          } else {\n","\t            throw new Error(\"try statement without catch or finally\");\n","\t          }\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    abrupt: function(type, arg) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.tryLoc <= this.prev &&\n","\t            hasOwn.call(entry, \"finallyLoc\") &&\n","\t            this.prev < entry.finallyLoc) {\n","\t          var finallyEntry = entry;\n","\t          break;\n","\t        }\n","\t      }\n","\t\n","\t      if (finallyEntry &&\n","\t          (type === \"break\" ||\n","\t           type === \"continue\") &&\n","\t          finallyEntry.tryLoc <= arg &&\n","\t          arg <= finallyEntry.finallyLoc) {\n","\t        // Ignore the finally entry if control is not jumping to a\n","\t        // location outside the try/catch block.\n","\t        finallyEntry = null;\n","\t      }\n","\t\n","\t      var record = finallyEntry ? finallyEntry.completion : {};\n","\t      record.type = type;\n","\t      record.arg = arg;\n","\t\n","\t      if (finallyEntry) {\n","\t        this.method = \"next\";\n","\t        this.next = finallyEntry.finallyLoc;\n","\t        return ContinueSentinel;\n","\t      }\n","\t\n","\t      return this.complete(record);\n","\t    },\n","\t\n","\t    complete: function(record, afterLoc) {\n","\t      if (record.type === \"throw\") {\n","\t        throw record.arg;\n","\t      }\n","\t\n","\t      if (record.type === \"break\" ||\n","\t          record.type === \"continue\") {\n","\t        this.next = record.arg;\n","\t      } else if (record.type === \"return\") {\n","\t        this.rval = this.arg = record.arg;\n","\t        this.method = \"return\";\n","\t        this.next = \"end\";\n","\t      } else if (record.type === \"normal\" && afterLoc) {\n","\t        this.next = afterLoc;\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    },\n","\t\n","\t    finish: function(finallyLoc) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.finallyLoc === finallyLoc) {\n","\t          this.complete(entry.completion, entry.afterLoc);\n","\t          resetTryEntry(entry);\n","\t          return ContinueSentinel;\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    \"catch\": function(tryLoc) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.tryLoc === tryLoc) {\n","\t          var record = entry.completion;\n","\t          if (record.type === \"throw\") {\n","\t            var thrown = record.arg;\n","\t            resetTryEntry(entry);\n","\t          }\n","\t          return thrown;\n","\t        }\n","\t      }\n","\t\n","\t      // The context.catch method must only be called with a location\n","\t      // argument that corresponds to a known catch block.\n","\t      throw new Error(\"illegal catch attempt\");\n","\t    },\n","\t\n","\t    delegateYield: function(iterable, resultName, nextLoc) {\n","\t      this.delegate = {\n","\t        iterator: values(iterable),\n","\t        resultName: resultName,\n","\t        nextLoc: nextLoc\n","\t      };\n","\t\n","\t      if (this.method === \"next\") {\n","\t        // Deliberately forget the last sent value so that we don't\n","\t        // accidentally pass it on to the delegate.\n","\t        this.arg = undefined;\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    }\n","\t  };\n","\t})(\n","\t  // Among the various tricks for obtaining a reference to the global\n","\t  // object, this seems to be the most reliable technique that does not\n","\t  // use indirect eval (which violates Content Security Policy).\n","\t  typeof global === \"object\" ? global :\n","\t  typeof window === \"object\" ? window :\n","\t  typeof self === \"object\" ? self : this\n","\t);\n","\t\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 336 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(337);\n","\tmodule.exports = __webpack_require__(16).RegExp.escape;\n","\n","\n","/***/ }),\n","/* 337 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/benjamingr/RexExp.escape\n","\tvar $export = __webpack_require__(15);\n","\tvar $re = __webpack_require__(338)(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n","\t\n","\t$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n","\n","\n","/***/ }),\n","/* 338 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (regExp, replace) {\n","\t  var replacer = replace === Object(replace) ? function (part) {\n","\t    return replace[part];\n","\t  } : replace;\n","\t  return function (it) {\n","\t    return String(it).replace(regExp, replacer);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 339 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// style-loader: Adds some css to the DOM by adding a <style> tag\n","\t\n","\t// load the styles\n","\tvar content = __webpack_require__(340);\n","\tif(typeof content === 'string') content = [[module.id, content, '']];\n","\t// add the styles to the DOM\n","\tvar update = __webpack_require__(342)(content, {});\n","\tif(content.locals) module.exports = content.locals;\n","\t// Hot Module Replacement\n","\tif(false) {\n","\t\t// When the styles change, update the <style> tags\n","\t\tif(!content.locals) {\n","\t\t\tmodule.hot.accept(\"!!./node_modules/css-loader/index.js!./style.css\", function() {\n","\t\t\t\tvar newContent = require(\"!!./node_modules/css-loader/index.js!./style.css\");\n","\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n","\t\t\t\tupdate(newContent);\n","\t\t\t});\n","\t\t}\n","\t\t// When the module is disposed, remove the <style> tags\n","\t\tmodule.hot.dispose(function() { update(); });\n","\t}\n","\n","/***/ }),\n","/* 340 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\texports = module.exports = __webpack_require__(341)();\n","\t// imports\n","\t\n","\t\n","\t// module\n","\texports.push([module.id, \".lime {\\n  all: initial;\\n}\\n.lime.top_div {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n.lime.predict_proba {\\n  width: 245px;\\n}\\n.lime.predicted_value {\\n  width: 245px;\\n}\\n.lime.explanation {\\n  width: 350px;\\n}\\n\\n.lime.text_div {\\n  max-height:300px;\\n  flex: 1 0 300px;\\n  overflow:scroll;\\n}\\n.lime.table_div {\\n  max-height:300px;\\n  flex: 1 0 300px;\\n  overflow:scroll;\\n}\\n.lime.table_div table {\\n  border-collapse: collapse;\\n  color: white;\\n  border-style: hidden;\\n  margin: 0 auto;\\n}\\n\", \"\"]);\n","\t\n","\t// exports\n","\n","\n","/***/ }),\n","/* 341 */\n","/***/ (function(module, exports) {\n","\n","\t/*\n","\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n","\t\tAuthor Tobias Koppers @sokra\n","\t*/\n","\t// css base code, injected by the css-loader\n","\tmodule.exports = function() {\n","\t\tvar list = [];\n","\t\n","\t\t// return the list of modules as css string\n","\t\tlist.toString = function toString() {\n","\t\t\tvar result = [];\n","\t\t\tfor(var i = 0; i < this.length; i++) {\n","\t\t\t\tvar item = this[i];\n","\t\t\t\tif(item[2]) {\n","\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\n","\t\t\t\t} else {\n","\t\t\t\t\tresult.push(item[1]);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn result.join(\"\");\n","\t\t};\n","\t\n","\t\t// import a list of modules into the list\n","\t\tlist.i = function(modules, mediaQuery) {\n","\t\t\tif(typeof modules === \"string\")\n","\t\t\t\tmodules = [[null, modules, \"\"]];\n","\t\t\tvar alreadyImportedModules = {};\n","\t\t\tfor(var i = 0; i < this.length; i++) {\n","\t\t\t\tvar id = this[i][0];\n","\t\t\t\tif(typeof id === \"number\")\n","\t\t\t\t\talreadyImportedModules[id] = true;\n","\t\t\t}\n","\t\t\tfor(i = 0; i < modules.length; i++) {\n","\t\t\t\tvar item = modules[i];\n","\t\t\t\t// skip already imported module\n","\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\n","\t\t\t\t//  when a module is imported multiple times with different media queries.\n","\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n","\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n","\t\t\t\t\tif(mediaQuery && !item[2]) {\n","\t\t\t\t\t\titem[2] = mediaQuery;\n","\t\t\t\t\t} else if(mediaQuery) {\n","\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n","\t\t\t\t\t}\n","\t\t\t\t\tlist.push(item);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t};\n","\t\treturn list;\n","\t};\n","\n","\n","/***/ }),\n","/* 342 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/*\n","\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n","\t\tAuthor Tobias Koppers @sokra\n","\t*/\n","\tvar stylesInDom = {},\n","\t\tmemoize = function(fn) {\n","\t\t\tvar memo;\n","\t\t\treturn function () {\n","\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n","\t\t\t\treturn memo;\n","\t\t\t};\n","\t\t},\n","\t\tisOldIE = memoize(function() {\n","\t\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n","\t\t}),\n","\t\tgetHeadElement = memoize(function () {\n","\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n","\t\t}),\n","\t\tsingletonElement = null,\n","\t\tsingletonCounter = 0,\n","\t\tstyleElementsInsertedAtTop = [];\n","\t\n","\tmodule.exports = function(list, options) {\n","\t\tif(false) {\n","\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n","\t\t}\n","\t\n","\t\toptions = options || {};\n","\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n","\t\t// tags it will allow on a page\n","\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n","\t\n","\t\t// By default, add <style> tags to the bottom of <head>.\n","\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n","\t\n","\t\tvar styles = listToStyles(list);\n","\t\taddStylesToDom(styles, options);\n","\t\n","\t\treturn function update(newList) {\n","\t\t\tvar mayRemove = [];\n","\t\t\tfor(var i = 0; i < styles.length; i++) {\n","\t\t\t\tvar item = styles[i];\n","\t\t\t\tvar domStyle = stylesInDom[item.id];\n","\t\t\t\tdomStyle.refs--;\n","\t\t\t\tmayRemove.push(domStyle);\n","\t\t\t}\n","\t\t\tif(newList) {\n","\t\t\t\tvar newStyles = listToStyles(newList);\n","\t\t\t\taddStylesToDom(newStyles, options);\n","\t\t\t}\n","\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\n","\t\t\t\tvar domStyle = mayRemove[i];\n","\t\t\t\tif(domStyle.refs === 0) {\n","\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n","\t\t\t\t\t\tdomStyle.parts[j]();\n","\t\t\t\t\tdelete stylesInDom[domStyle.id];\n","\t\t\t\t}\n","\t\t\t}\n","\t\t};\n","\t}\n","\t\n","\tfunction addStylesToDom(styles, options) {\n","\t\tfor(var i = 0; i < styles.length; i++) {\n","\t\t\tvar item = styles[i];\n","\t\t\tvar domStyle = stylesInDom[item.id];\n","\t\t\tif(domStyle) {\n","\t\t\t\tdomStyle.refs++;\n","\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n","\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\n","\t\t\t\t}\n","\t\t\t\tfor(; j < item.parts.length; j++) {\n","\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n","\t\t\t\t}\n","\t\t\t} else {\n","\t\t\t\tvar parts = [];\n","\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n","\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\n","\t\t\t\t}\n","\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n","\t\t\t}\n","\t\t}\n","\t}\n","\t\n","\tfunction listToStyles(list) {\n","\t\tvar styles = [];\n","\t\tvar newStyles = {};\n","\t\tfor(var i = 0; i < list.length; i++) {\n","\t\t\tvar item = list[i];\n","\t\t\tvar id = item[0];\n","\t\t\tvar css = item[1];\n","\t\t\tvar media = item[2];\n","\t\t\tvar sourceMap = item[3];\n","\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n","\t\t\tif(!newStyles[id])\n","\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n","\t\t\telse\n","\t\t\t\tnewStyles[id].parts.push(part);\n","\t\t}\n","\t\treturn styles;\n","\t}\n","\t\n","\tfunction insertStyleElement(options, styleElement) {\n","\t\tvar head = getHeadElement();\n","\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n","\t\tif (options.insertAt === \"top\") {\n","\t\t\tif(!lastStyleElementInsertedAtTop) {\n","\t\t\t\thead.insertBefore(styleElement, head.firstChild);\n","\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n","\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n","\t\t\t} else {\n","\t\t\t\thead.appendChild(styleElement);\n","\t\t\t}\n","\t\t\tstyleElementsInsertedAtTop.push(styleElement);\n","\t\t} else if (options.insertAt === \"bottom\") {\n","\t\t\thead.appendChild(styleElement);\n","\t\t} else {\n","\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n","\t\t}\n","\t}\n","\t\n","\tfunction removeStyleElement(styleElement) {\n","\t\tstyleElement.parentNode.removeChild(styleElement);\n","\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n","\t\tif(idx >= 0) {\n","\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n","\t\t}\n","\t}\n","\t\n","\tfunction createStyleElement(options) {\n","\t\tvar styleElement = document.createElement(\"style\");\n","\t\tstyleElement.type = \"text/css\";\n","\t\tinsertStyleElement(options, styleElement);\n","\t\treturn styleElement;\n","\t}\n","\t\n","\tfunction createLinkElement(options) {\n","\t\tvar linkElement = document.createElement(\"link\");\n","\t\tlinkElement.rel = \"stylesheet\";\n","\t\tinsertStyleElement(options, linkElement);\n","\t\treturn linkElement;\n","\t}\n","\t\n","\tfunction addStyle(obj, options) {\n","\t\tvar styleElement, update, remove;\n","\t\n","\t\tif (options.singleton) {\n","\t\t\tvar styleIndex = singletonCounter++;\n","\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n","\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n","\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n","\t\t} else if(obj.sourceMap &&\n","\t\t\ttypeof URL === \"function\" &&\n","\t\t\ttypeof URL.createObjectURL === \"function\" &&\n","\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\n","\t\t\ttypeof Blob === \"function\" &&\n","\t\t\ttypeof btoa === \"function\") {\n","\t\t\tstyleElement = createLinkElement(options);\n","\t\t\tupdate = updateLink.bind(null, styleElement);\n","\t\t\tremove = function() {\n","\t\t\t\tremoveStyleElement(styleElement);\n","\t\t\t\tif(styleElement.href)\n","\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\n","\t\t\t};\n","\t\t} else {\n","\t\t\tstyleElement = createStyleElement(options);\n","\t\t\tupdate = applyToTag.bind(null, styleElement);\n","\t\t\tremove = function() {\n","\t\t\t\tremoveStyleElement(styleElement);\n","\t\t\t};\n","\t\t}\n","\t\n","\t\tupdate(obj);\n","\t\n","\t\treturn function updateStyle(newObj) {\n","\t\t\tif(newObj) {\n","\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n","\t\t\t\t\treturn;\n","\t\t\t\tupdate(obj = newObj);\n","\t\t\t} else {\n","\t\t\t\tremove();\n","\t\t\t}\n","\t\t};\n","\t}\n","\t\n","\tvar replaceText = (function () {\n","\t\tvar textStore = [];\n","\t\n","\t\treturn function (index, replacement) {\n","\t\t\ttextStore[index] = replacement;\n","\t\t\treturn textStore.filter(Boolean).join('\\n');\n","\t\t};\n","\t})();\n","\t\n","\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\n","\t\tvar css = remove ? \"\" : obj.css;\n","\t\n","\t\tif (styleElement.styleSheet) {\n","\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n","\t\t} else {\n","\t\t\tvar cssNode = document.createTextNode(css);\n","\t\t\tvar childNodes = styleElement.childNodes;\n","\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n","\t\t\tif (childNodes.length) {\n","\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n","\t\t\t} else {\n","\t\t\t\tstyleElement.appendChild(cssNode);\n","\t\t\t}\n","\t\t}\n","\t}\n","\t\n","\tfunction applyToTag(styleElement, obj) {\n","\t\tvar css = obj.css;\n","\t\tvar media = obj.media;\n","\t\n","\t\tif(media) {\n","\t\t\tstyleElement.setAttribute(\"media\", media)\n","\t\t}\n","\t\n","\t\tif(styleElement.styleSheet) {\n","\t\t\tstyleElement.styleSheet.cssText = css;\n","\t\t} else {\n","\t\t\twhile(styleElement.firstChild) {\n","\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\n","\t\t\t}\n","\t\t\tstyleElement.appendChild(document.createTextNode(css));\n","\t\t}\n","\t}\n","\t\n","\tfunction updateLink(linkElement, obj) {\n","\t\tvar css = obj.css;\n","\t\tvar sourceMap = obj.sourceMap;\n","\t\n","\t\tif(sourceMap) {\n","\t\t\t// http://stackoverflow.com/a/26603875\n","\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n","\t\t}\n","\t\n","\t\tvar blob = new Blob([css], { type: \"text/css\" });\n","\t\n","\t\tvar oldSrc = linkElement.href;\n","\t\n","\t\tlinkElement.href = URL.createObjectURL(blob);\n","\t\n","\t\tif(oldSrc)\n","\t\t\tURL.revokeObjectURL(oldSrc);\n","\t}\n","\n","\n","/***/ })\n","/******/ ]);\n","//# sourceMappingURL=bundle.js.map </script></head><body>\n","        <div class=\"lime top_div\" id=\"top_divBDYUBIQT4QG1MYH\"></div>\n","        \n","        <script>\n","        var top_div = d3.select('#top_divBDYUBIQT4QG1MYH').classed('lime top_div', true);\n","        \n","        \n","                    var pp_div = top_div.append('div')\n","                                        .classed('lime predicted_value', true);\n","                    var pp_svg = pp_div.append('svg').style('width', '100%');\n","                    var pp = new lime.PredictedValue(pp_svg, 28431.5546875, 21469.099609375, 46299.82421875);\n","                    \n","        var exp_div;\n","            var exp = new lime.Explanation([\"negative\", \"positive\"]);\n","        \n","            exp_div = top_div.append('div').classed('lime explanation', true);\n","            exp.show([[\"hour <= 6.00\", -8033.899450780466], [\"dayofyear > 274.00\", -1884.5555978773466], [\"1.00 < dayofweek <= 3.00\", 804.9987094355896], [\"year > 2011.00\", -488.8553605750475], [\"month > 10.00\", -407.14740513817884], [\"3.00 < quarter <= 4.00\", -60.49150670765058], [\"dayofmonth > 23.00\", 39.54983696059913]], 1, exp_div);\n","            \n","        var raw_div = top_div.append('div');\n","            exp.show_raw_tabular([[\"hour\", \"1.00\", -8033.899450780466], [\"dayofyear\", \"365.00\", -1884.5555978773466], [\"dayofweek\", \"3.00\", 804.9987094355896], [\"year\", \"2015.00\", -488.8553605750475], [\"month\", \"12.00\", -407.14740513817884], [\"quarter\", \"4.00\", -60.49150670765058], [\"dayofmonth\", \"31.00\", 39.54983696059913]], 1, raw_div);\n","        \n","        </script>\n","        </body></html>"]},"metadata":{}}]},{"cell_type":"code","source":["# Feature Importances\n","plt.figure(figsize=(10, 8))\n","plot_importance(reg, height=0.9)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"co5gObsB6Jjf","executionInfo":{"status":"ok","timestamp":1718018945733,"user_tz":-60,"elapsed":1019,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"3038d053-2ea0-426f-ec0d-9288255f2a5f"},"execution_count":83,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["5. Permutation Importance\n","\n","- Permutation importance measures the importance of a feature by calculating the decrease in a model's performance when the values of that feature are randomly shuffled."],"metadata":{"id":"1SLaHuVx6RRI"}},{"cell_type":"code","source":["# Permutation Importance\n","perm_importance = permutation_importance(reg, X_test, y_test, n_repeats=10, random_state=42)\n","sorted_idx = perm_importance.importances_mean.argsort()\n","plt.figure(figsize=(10, 8))\n","plt.barh(X_test.columns[sorted_idx], perm_importance.importances_mean[sorted_idx])\n","plt.xlabel(\"Permutation Importance\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":500},"id":"vZ6Og-Yf6Lwb","executionInfo":{"status":"ok","timestamp":1718018957592,"user_tz":-60,"elapsed":3123,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"ed9adc03-3f17-4492-ac0d-0c17c305b34a"},"execution_count":84,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Tree-based Method\n","tree_reg = DecisionTreeRegressor(max_depth=3)\n","tree_reg.fit(X_train, y_train)\n","plt.figure(figsize=(20, 10))\n","plot_tree(tree_reg, feature_names=X_train.columns, filled=True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"sc-xAwBF6bHQ","executionInfo":{"status":"ok","timestamp":1718019021649,"user_tz":-60,"elapsed":3664,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"0be23174-50b4-40c5-fd5d-3c38c01f0422"},"execution_count":85,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"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v4cCESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZxvJFN7hyMzg7jkPkv1r68/7a3fC/8UhE/j5/du5funTp//FIRP7//Nm5fela4P/jkYj890h/7l97FPs3HonI3yP9eX/1btjfeCQif5/05/6VwKC/8UhE/j7pz/0rwQ//xiMR+Xu86HlvlpqamvpXVgwKCsLX15eYmJiXOjCR/3W2traYAbFxcX/3oYj8bezt7Lh0+TKenp6A7g3y72Bvb8+lS5d03oukY3guSiU2Lv7vPhSRv4WtjQ1mZmaqG8i/mq2NDWbm5sTGKigt/162traYmUFsrO4H8u9kb2/HpUtp74n+zF8ORICh4v3o0aP/6OBE/le5uroC6BqQfzVXV9dMNxfdG+SfTue9SGZ6LpJ/O10DIroOREDXgYip+nJWXigQISIiIiIiIiIiIiIi8iI0WLWIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItlEgQkREREREREREREREso0CESIiIiIiIiIiIiIikm0UiBARERERERERERERkWyjQISIiIiIiIiIiIiIiGQbBSJERERERERERERERCTbKBAhIiIiIiIiIiIiIiLZRoEIERERERERERERERHJNgpEiIiIiIiIiIiIiIhItvk/9rvVBU33QnMAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Sliding windows with XGBoost**"],"metadata":{"id":"fBxBPCEoQ5dY"}},{"cell_type":"code","source":["def sliding_window_prediction(data, window_size, forecast_horizon, model, feature_function, label):\n","    predictions = []\n","    test_dates = []\n","    mse_scores = []\n","\n","    # Create a list of date ranges for each sliding window\n","    date_ranges = pd.date_range(start=data.index[0], end=data.index[-1], freq='MS')\n","\n","    for end_date in date_ranges:\n","        start_date = end_date - pd.DateOffset(months=window_size)\n","\n","        if start_date < data.index[0] or end_date > data.index[-1]:\n","            continue\n","\n","        # Define training and testing periods\n","        train_data = data[start_date:end_date]\n","        test_data = data[end_date:end_date + pd.DateOffset(months=forecast_horizon)]\n","\n","        if len(test_data) == 0:\n","            continue\n","\n","        # Create features for training and testing data\n","        X_train, y_train = feature_function(train_data, label=label)\n","        X_test, y_test = feature_function(test_data, label=label)\n","\n","        # Train the model\n","        model.fit(X_train, y_train)\n","\n","        # Make predictions\n","        y_pred = model.predict(X_test)\n","\n","        # Store predictions and test dates\n","        predictions.extend(y_pred)\n","        test_dates.extend(test_data.index)\n","\n","        # Calculate and store MSE\n","        mse = mean_squared_error(y_test, y_pred)\n","        mse_scores.append(mse)\n","\n","    return predictions, test_dates, mse_scores\n"],"metadata":{"id":"JTdQ4D-6SKMb","executionInfo":{"status":"ok","timestamp":1718025530495,"user_tz":-60,"elapsed":240,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","source":["# Define model\n","model = XGBRegressor(n_estimators=10, random_state=42)"],"metadata":{"id":"fpuLW_KNTTLX","executionInfo":{"status":"ok","timestamp":1718025555529,"user_tz":-60,"elapsed":569,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["# Define the window size (e.g., 12 months) and forecast horizon (e.g., 1 month)\n","window_size = 12  # in months\n","forecast_horizon = 1  # in months\n","\n","# Run the sliding window prediction\n","predictions, test_dates, mse_scores = sliding_window_prediction(pjme, window_size, forecast_horizon, model, create_features, 'PJME_MW')\n","\n","# Convert predictions to a DataFrame for easier handling\n","predictions_df = pd.DataFrame({'Datetime': test_dates, 'Predicted_PJME_MW': predictions}).set_index('Datetime')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"Mcca-qhiTZvq","executionInfo":{"status":"ok","timestamp":1718025596009,"user_tz":-60,"elapsed":12450,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"a1f468bf-b98f-404d-abe9-6b5e6e5c7972"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot the actual vs predicted values\n","plt.figure(figsize=(15, 5))\n","plt.plot(pjme['PJME_MW'], label='Actual PJME_MW')\n","plt.plot(predictions_df['Predicted_PJME_MW'], label='Predicted PJME_MW', linestyle='--')\n","plt.title('Actual vs Predicted PJME_MW')\n","plt.xlabel('Date')\n","plt.ylabel('PJME_MW')\n","plt.legend()\n","plt.show()\n","\n","# Print mean MSE score\n","print(f'Mean MSE score: {np.mean(mse_scores)}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"zeWj_NXtTlHi","executionInfo":{"status":"ok","timestamp":1718025612252,"user_tz":-60,"elapsed":2517,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"38917a25-1743-488a-acfa-7c98075549c3"},"execution_count":89,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Mean MSE score: 15528973.787710298\n"]}]},{"cell_type":"code","source":["def sliding_window_prediction_visualization(data, window_size, forecast_horizon, model, feature_function, label):\n","    predictions = []\n","    test_dates = []\n","    mse_scores = []\n","    window_info = []\n","\n","    # Create a list of date ranges for each sliding window\n","    date_ranges = pd.date_range(start=data.index[0], end=data.index[-1], freq='MS')\n","\n","    for end_date in date_ranges:\n","        start_date = end_date - pd.DateOffset(months=window_size)\n","\n","        if start_date < data.index[0] or end_date > data.index[-1]:\n","            continue\n","\n","        # Define training and testing periods\n","        train_data = data[start_date:end_date]\n","        test_data = data[end_date:end_date + pd.DateOffset(months=forecast_horizon)]\n","\n","        if len(test_data) == 0:\n","            continue\n","\n","        # Create features for training and testing data\n","        X_train, y_train = feature_function(train_data, label=label)\n","        X_test, y_test = feature_function(test_data, label=label)\n","\n","        # Train the model\n","        model.fit(X_train, y_train)\n","\n","        # Make predictions\n","        y_pred = model.predict(X_test)\n","\n","        # Store predictions and test dates\n","        predictions.extend(y_pred)\n","        test_dates.extend(test_data.index)\n","\n","        # Calculate and store MSE\n","        mse = mean_squared_error(y_test, y_pred)\n","        mse_scores.append(mse)\n","\n","        # Store window information for visualization\n","        window_info.append((start_date, end_date, end_date + pd.DateOffset(months=forecast_horizon)))\n","\n","    return predictions, test_dates, mse_scores, window_info\n","\n","# Define model\n","model = XGBRegressor(n_estimators=10, random_state=42)\n","\n","# Define the window size (e.g., 12 months) and forecast horizon (e.g., 1 month)\n","window_size = 12  # in months\n","forecast_horizon = 1  # in months\n","\n","# Run the sliding window prediction with visualization\n","predictions, test_dates, mse_scores, window_info = sliding_window_prediction_visualization(pjme, window_size, forecast_horizon, model, create_features, 'PJME_MW')\n","\n","# Convert predictions to a DataFrame for easier handling\n","predictions_df = pd.DataFrame({'Datetime': test_dates, 'Predicted_PJME_MW': predictions}).set_index('Datetime')\n","\n","\n","# Visualize the sliding windows\n","plt.figure(figsize=(15, 5))\n","plt.plot(pjme['PJME_MW'], label='Actual PJME_MW')\n","for start_date, end_date, forecast_end in window_info:\n","    plt.axvspan(start_date, end_date, color='lightblue', alpha=0.3)\n","    plt.axvspan(end_date, forecast_end, color='orange', alpha=0.3)\n","plt.title('Sliding Window Visualization')\n","plt.xlabel('Date')\n","plt.ylabel('PJME_MW')\n","plt.legend(['Actual PJME_MW', 'Training Period', 'Forecasting Period'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vygG1VmqUEmT","executionInfo":{"status":"ok","timestamp":1718025844105,"user_tz":-60,"elapsed":4500,"user":{"displayName":"Akram Yoosoofsah","userId":"15428459772312358460"}},"outputId":"187118c5-cfa0-4011-8d99-3c14ec2087a1"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n","<ipython-input-55-d376d2c8da92>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['date'] = df.index\n","<ipython-input-55-d376d2c8da92>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['hour'] = df['date'].dt.hour\n","<ipython-input-55-d376d2c8da92>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofweek'] = df['date'].dt.dayofweek\n","<ipython-input-55-d376d2c8da92>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['quarter'] = df['date'].dt.quarter\n","<ipython-input-55-d376d2c8da92>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['month'] = df['date'].dt.month\n","<ipython-input-55-d376d2c8da92>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['year'] = df['date'].dt.year\n","<ipython-input-55-d376d2c8da92>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofyear'] = df['date'].dt.dayofyear\n","<ipython-input-55-d376d2c8da92>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['dayofmonth'] = df['date'].dt.day\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}